/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:54:10 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1247L));
      Encomenda encomenda0 = new Encomenda(1221, (LocalDateTime) null, 1160.1, 0, "IZqF)u_pCC7s\"bd");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("u,HU4i!/cALbe1y", "", "IZqF)u_pCC7s\"bd", 1.0, map0, 1221, 1221, 1221, "IZqF)u_pCC7s\"bd", (-1247L), 1160.1, (LocalDateTime) null, (-1247L));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "u,HU4i!/cALbe1y", 1160.1, (-1247L), (-1278.8092961035766));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda0.clone();
      linhaEncomenda0.setQuantidade(0);
      linhaEncomenda1.setDescricao("n/a");
      linhaEncomenda1.setDescricao("");
      encomenda1.addLinhaEncomenda(linhaEncomenda1);
      encomenda1.toString();
      encomenda1.precoEncomenda();
      Encomenda encomenda2 = encomenda1.Clone();
      encomenda2.addLinhaEncomenda(linhaEncomenda1);
      encomenda2.precoEncomenda();
      encomenda1.toString();
      System.setCurrentTimeMillis(1L);
      encomenda2.precoEncomenda();
      encomenda2.precoEncomenda();
      System.setCurrentTimeMillis(0);
      encomenda0.precoEncomenda();
      encomenda0.toString();
      encomenda0.getProdutos();
      encomenda1.getProdutos();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-1), (LocalDateTime) null, (-1), (-1), (String) null);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setMedicamentos((-1));
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, (-430.0296507412), map0, 0, 0, (-1), "m'n5,s,U#5njkN;", (-1), (-1), (LocalDateTime) null, (-1));
      encomenda1.toString();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setTempo((-430.0296507412));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "J-W?a", (-430.0296507412), (-1), 92.1049);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.toString();
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda1.clone();
      encomenda2.addLinhaEncomenda(linhaEncomenda2);
      encomenda2.toString();
      encomenda2.pesoEncomenda();
      encomenda2.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 2318.6, map0, 1004, 1004, (-1508), (String) null, 1004, (-58.614), localDateTime0, (-1508));
      encomenda1.getProdutos();
      encomenda1.getLoja();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setValorUni(2318.6);
      encomenda1.addLinhaEncomenda(linhaEncomenda0);
      encomenda1.getPeso();
      encomenda0.getCusto();
      encomenda1.getCusto();
      encomenda1.setPeso(0.0);
      encomenda0.precoEncomenda();
      encomenda1.setCusto((-494.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEstado(1776);
      int int0 = (-1756);
      int int1 = 1;
      int int2 = 343;
      // Undeclared exception!
      try { 
        encomenda0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("k.]8,4u6", "D;*] XLSi3YqpG|>:N", "IllajC", (-2716.647296053), (Map<String, LinhaEncomenda>) null, 0, 0, (-1390), "D;*] XLSi3YqpG|>:N", (-2716.647296053), (-1390), (LocalDateTime) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.setEstado(0);
      encomenda0.preparaEnc();
      encomenda0.setTempo(0.0F);
      encomenda0.getPeso();
      encomenda0.toString();
      encomenda0.setClassificacao(0.0);
      encomenda0.setEstado(1475);
      encomenda0.setMedicamentos((-86));
      encomenda0.getUser();
      encomenda0.getTempo();
      encomenda0.setTempo((-2064.8625));
      encomenda0.getMedicamentos();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.getClassificacao();
      encomenda0.getProdutos();
      encomenda1.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, month0, 1, 1, 0, 1);
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, 1, 1, "LinhaEncomenda");
      encomenda0.setTempo(931.9091);
      encomenda0.setUser("");
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.setAceitaCusto(0);
      encomenda1.getTempo();
      encomenda1.getMedicamentos();
      encomenda1.setEnc("F1rW");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEnc((String) null);
      encomenda0.precoEncomenda();
      encomenda0.toString();
      encomenda0.setEstado((-1879));
      encomenda0.setClassificacao(0.0F);
      encomenda0.precoEncomenda();
      encomenda0.setUser("nzP");
      encomenda0.setEnc((String) null);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.setEstado((-1));
      encomenda0.setClassificacao(1118.113675755);
      encomenda0.getClassificacao();
      encomenda0.precoEncomenda();
      encomenda0.setNomTrans("\nEncomenda: null\nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n");
      encomenda0.getProdutos();
      encomenda0.getPeso();
      encomenda0.getEnc();
      encomenda0.getLoja();
      encomenda0.getAceitaCusto();
      encomenda0.getMedicamentos();
      encomenda0.getData();
      encomenda0.pesoEncomenda();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.setAceitaCusto(684);
      encomenda0.getClassificacao();
      encomenda0.getCusto();
      encomenda0.getEstado();
      encomenda0.getPeso();
      encomenda0.getData();
      encomenda1.getNomTrans();
      encomenda0.setProdutos(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0, 0, "--Valor por unidade : ");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("--Valor por unidade : ", "--Valor por unidade : ", "--Valor por unidade : ", (-2126.8241591), map0, 1, 0, 0, (String) null, (-2464.40260286), 0.0, (LocalDateTime) null, 0);
      encomenda1.getEstado();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Instant instant1 = MockInstant.plusMillis(instant0, (-1118L));
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.fixed(instant1, zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, (-2680.657899706712), 0, "");
      encomenda0.getTempo();
      encomenda0.getNomTrans();
      encomenda0.preparaEnc();
      encomenda0.setNomTrans("_?wbSwi.?D-");
      encomenda0.setAceitaCusto(0);
      encomenda0.setClassificacao((-1.0));
      encomenda0.toString();
      encomenda0.setPeso(0);
      encomenda0.getAceitaCusto();
      encomenda0.getEstado();
      encomenda0.getAceitaCusto();
      encomenda0.getClassificacao();
      // Undeclared exception!
      try { 
        encomenda0.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCusto(0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.toString();
      encomenda0.setNomTrans("ba2QNe+4K");
      encomenda0.setUser("");
      encomenda0.setNomTrans("");
      encomenda0.toString();
      encomenda0.setClassificacao(1065.351);
      encomenda0.setTempo(1065.351);
      encomenda0.setMedicamentos(195);
      encomenda0.getMedicamentos();
      encomenda0.getPeso();
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda0.getProdutos();
      encomenda0.setAceitaCusto(195);
      encomenda0.getAceitaCusto();
      encomenda0.preparaEnc();
      encomenda0.setCusto(195);
      encomenda0.setUser("\nUtilizador: ");
      encomenda0.getClassificacao();
      Encomenda encomenda3 = encomenda2.Clone();
      encomenda3.setUser("\nUtilizador: ");
      encomenda0.getMedicamentos();
      encomenda2.getLoja();
      encomenda0.getPeso();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("nVV)?n/Yc&V QfA", (String) null, 1308.671605869, 1308.671605869, (-584.115471662869));
      linhaEncomenda0.toString();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setEstado(0);
      encomenda0.setProdutos(map0);
      encomenda0.preparaEnc();
      encomenda0.setEnc("\nTransporte: ");
      encomenda0.precoEncomenda();
      encomenda0.getData();
      encomenda0.setTempo((-1305.36349346348));
      encomenda0.setAceitaCusto((-1));
      encomenda0.getMedicamentos();
      encomenda0.setMedicamentos((-1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setAceitaCusto(828);
      encomenda0.setEnc((String) null);
      encomenda0.setLoja("");
      encomenda0.getData();
      encomenda0.getTempo();
      encomenda0.setEnc("\n");
      encomenda0.pesoEncomenda();
      encomenda0.getEstado();
      encomenda0.preparaEnc();
      encomenda0.getAceitaCusto();
      encomenda0.pesoEncomenda();
      encomenda0.toString();
      encomenda0.setClassificacao(1.0);
      encomenda0.setEnc("\n\n\n");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      linhaEncomenda0.toString();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.getUser();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda((-2145), localDateTime0, (-2145), 0, (String) null);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotNull(encomenda0);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: -2145\nContem Medicamentos: 0\nEstado da Encomenda: 0\nTransporte: null\nCusto: -2145.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotNull(string0);
      
      encomenda0.setLoja((String) null);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      encomenda0.setPeso(1916.415684258321);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      String string1 = encomenda0.getEnc();
      assertEquals("", string1);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals((-2145), int0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      String string2 = encomenda0.getEnc();
      assertEquals("", string2);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      double double0 = encomenda0.getTempo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      String string3 = encomenda0.getNomTrans();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNull(string3);
      
      Map<String, LinhaEncomenda> map1 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      encomenda0.setMedicamentos((-2145));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      float float1 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertEquals(float1, float0, 0.01F);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.equals((Object)map1));
      assertNotSame(map0, map1);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.equals((Object)map1));
      assertNotSame(map0, map1);
      
      String string4 = encomenda0.getEnc();
      assertEquals("", string4);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      
      float float2 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      double double1 = encomenda0.getClassificacao();
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotEquals(double1, double0, 0.01);
      
      Map<String, LinhaEncomenda> map2 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map2);
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map2, map0);
      assertNotSame(map2, map1);
      
      double double2 = encomenda0.getPeso();
      assertEquals(1916.415684258321, double2, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getEstado());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      encomenda0.setEstado((-2145));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals((-2145), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 486.119263210993, 0.0F, (-1.0));
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertNull(linhaEncomenda0.getReferencia());
      assertNull(linhaEncomenda0.getDescricao());
      assertEquals(486.119263210993, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-2145.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-2145), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(1916.415684258321, encomenda0.getPeso(), 0.01);
      assertNull(encomenda0.getLoja());
      assertEquals((-2145), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-2145), encomenda0.getAceitaCusto());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertNull(linhaEncomenda0.getReferencia());
      assertNull(linhaEncomenda0.getDescricao());
      assertEquals(486.119263210993, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setNomTrans("");
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string0 = encomenda0.getEnc();
      assertEquals("", string0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(string0);
      
      LocalDateTime localDateTime0 = encomenda0.getData();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(localDateTime0);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      encomenda0.setNomTrans("");
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      int int0 = encomenda0.getEstado();
      assertEquals((-1), int0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string1 = encomenda0.getLoja();
      assertEquals("", string1);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Map<String, LinhaEncomenda> map1 = encomenda0.getProdutos();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      double double0 = encomenda0.getTempo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      encomenda0.setData(localDateTime0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      Map<String, LinhaEncomenda> map2 = encomenda0.getProdutos();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      assertNotNull(map2);
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map2, map0);
      assertNotSame(map2, map1);
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      encomenda0.setClassificacao(1.0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(1.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertNotNull(encomenda0);
      
      encomenda0.setCusto((-1.0));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      
      encomenda0.setClassificacao((-2963.0));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      
      LocalDateTime localDateTime0 = encomenda0.getData();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertNotNull(localDateTime0);
      
      encomenda0.setUser("");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals((-2963.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      float float0 = encomenda1.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals((-2963.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.preparaEnc();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      Encomenda encomenda2 = encomenda0.Clone();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda2.getEnc());
      assertEquals((-1.0), encomenda2.getTempo(), 0.01);
      assertEquals("", encomenda2.getNomTrans());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-2963.0), encomenda2.getClassificacao(), 0.01);
      assertEquals("", encomenda2.getLoja());
      assertEquals(0, encomenda2.getMedicamentos());
      assertEquals(1, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals("", encomenda2.getUser());
      assertNotNull(encomenda2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      
      double double0 = encomenda2.getCusto();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda2.getEnc());
      assertEquals((-1.0), encomenda2.getTempo(), 0.01);
      assertEquals("", encomenda2.getNomTrans());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-2963.0), encomenda2.getClassificacao(), 0.01);
      assertEquals("", encomenda2.getLoja());
      assertEquals(0, encomenda2.getMedicamentos());
      assertEquals(1, encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals("", encomenda2.getUser());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      
      LocalDateTime localDateTime1 = encomenda1.getData();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals((-2963.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNull(localDateTime1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      
      int int0 = encomenda0.getEstado();
      assertEquals(1, int0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      
      encomenda1.setLoja("--Referencia: ");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-2963.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("--Referencia: ", encomenda1.getLoja());
      assertEquals((-2963.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertNotNull(encomenda0);
      
      float float0 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.preparaEnc();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.preparaEnc();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals(0, int0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      
      float float1 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(float1, float0, 0.01F);
      
      Map<String, LinhaEncomenda> map1 = encomenda0.getProdutos();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertNotNull(string0);
      
      float float2 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      encomenda0.setProdutos(map0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.equals((Object)map1));
      assertNotSame(map0, map1);
      
      encomenda0.setCusto(0.0F);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.setUser("euros");
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("euros", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      int int1 = encomenda0.getMedicamentos();
      assertEquals(0, int1);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("euros", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertTrue(int1 == int0);
      
      double double0 = encomenda0.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("euros", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      int int2 = encomenda0.getMedicamentos();
      assertEquals(0, int2);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("euros", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      encomenda0.setUser("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n");
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      String string1 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n\nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string1);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      encomenda0.setPeso((-4005.891));
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      encomenda0.setEstado(1);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      float float3 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float0, 0.01F);
      
      String string2 = encomenda0.getUser();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string2);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      encomenda0.setLoja("--Referencia: ");
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      
      double double1 = encomenda0.getPeso();
      assertEquals((-4005.891), double1, 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      assertNotEquals(double1, double0, 0.01);
      
      encomenda0.preparaEnc();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      
      float float4 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float4, 0.01F);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      
      encomenda0.setEstado(0);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      
      encomenda0.setEstado(0);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      
      String string3 = encomenda0.getLoja();
      assertEquals("--Referencia: ", string3);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("--Referencia: ", encomenda0.getLoja());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      encomenda0.setMedicamentos(1);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(1, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("--Referencia: ", encomenda0.getLoja());
      
      encomenda0.setEnc("aqmu':^&tq^");
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4005.891), encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("aqmu':^&tq^", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(1, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("--Referencia: ", encomenda0.getLoja());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      assertNotNull(localDateTime0);
      
      Encomenda encomenda1 = new Encomenda((String) null, "sT.R", "sT.R", 2318.6, map0, 1004, 1004, (-1508), (String) null, 1004, 0.0, localDateTime0, (-1508));
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      Map<String, LinhaEncomenda> map1 = encomenda1.getProdutos();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(map1, map0);
      
      String string0 = encomenda1.getLoja();
      assertEquals("sT.R", string0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      String string1 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string1);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertNotNull(string1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertNotNull(linhaEncomenda0);
      
      linhaEncomenda0.setValorUni(2318.6);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(2318.6, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      
      encomenda1.addLinhaEncomenda(linhaEncomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(2318.6, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      String string2 = encomenda1.getLoja();
      assertEquals("sT.R", string2);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertNotNull(string2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      double double0 = encomenda1.getPeso();
      assertEquals(2318.6, double0, 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      double double1 = encomenda0.getCusto();
      assertEquals(0.0, double1, 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(encomenda0, encomenda1);
      
      double double2 = encomenda1.getCusto();
      assertEquals(0.0, double2, 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(2318.6, encomenda1.getPeso(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda1.setPeso(0.0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
      
      float float0 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda1.setCusto((-494.0));
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals((-1508.0), encomenda1.getClassificacao(), 0.01);
      assertNull(encomenda1.getEnc());
      assertEquals("sT.R", encomenda1.getUser());
      assertEquals((-1508), encomenda1.getEstado());
      assertEquals((-494.0), encomenda1.getCusto(), 0.01);
      assertEquals(1004, encomenda1.getMedicamentos());
      assertEquals(1004.0, encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getNomTrans());
      assertEquals("sT.R", encomenda1.getLoja());
      assertEquals(1004, encomenda1.getAceitaCusto());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(map0.equals((Object)map1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(map0, map1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getNomTrans());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      encomenda0.setAceitaCusto(0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      double double0 = encomenda1.getClassificacao();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getNomTrans());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      int int0 = encomenda1.getEstado();
      assertEquals((-1), int0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getNomTrans());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.setTempo((-1733.3821629158447));
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1733.3821629158447), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setCusto(0.0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      LocalDateTime localDateTime0 = encomenda1.getData();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNull(localDateTime0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      double double0 = encomenda0.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda(1037, localDateTime0, 1037, 1037, (String) null);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setAceitaCusto(1037);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", (String) null, (-1371.2762298201415), 4197.0, 4197.0);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals((-5755246.336555134), linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(4197.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertNull(linhaEncomenda0.getDescricao());
      assertEquals(4197.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals((-1371.2762298201415), linhaEncomenda0.getValorUni(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals((-5755246.336555134), linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(4197.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertNull(linhaEncomenda0.getDescricao());
      assertEquals(4197.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals((-1371.2762298201415), linhaEncomenda0.getValorUni(), 0.01);
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(1.7614808E7F, float0, 0.01F);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setMedicamentos(1037);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals(1037, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setMedicamentos((-1573));
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setMedicamentos(1141);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1037, encomenda0.getEstado());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setEstado((-1573));
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setUser((String) null);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      float float1 = encomenda0.pesoEncomenda();
      assertEquals(1.7614808E7F, float1, 0.01F);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(float1, float0, 0.01F);
      
      float float2 = encomenda0.pesoEncomenda();
      assertEquals(1.7614808E7F, float2, 0.01F);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      String string0 = encomenda0.getUser();
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNull(string0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      encomenda0.setProdutos(map0);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      String string1 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: null\nPeso: 0.0\nProdutos:\n--Referencia: --Descri\u00E7ao: null--Valor por unidade : -1371.2762298201415--Quanidade : 4197.0\n\nAceita o Custo: 1037\nContem Medicamentos: 1141\nEstado da Encomenda: -1573\nTransporte: null\nCusto: 1037.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string1);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(string1);
      
      encomenda0.setLoja((String) null);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setClassificacao(0.0);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      double double0 = encomenda0.getCusto();
      assertEquals(1037.0, double0, 0.01);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      double double1 = encomenda0.getCusto();
      assertEquals(1037.0, double1, 0.01);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int0 = encomenda0.getEstado();
      assertEquals((-1573), int0);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setUser((String) null);
      assertEquals(1037, encomenda0.getAceitaCusto());
      assertNull(encomenda0.getLoja());
      assertEquals(1141, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1037.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertNull(encomenda0.getUser());
      assertNull(encomenda0.getNomTrans());
      assertEquals((-1573), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      String string0 = encomenda1.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda1.setMedicamentos((-4719));
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-4719), encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      // Undeclared exception!
      try { 
        encomenda0.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.setEnc("o!<>KL");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setMedicamentos((-1));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setClassificacao(0.0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setLoja("\n");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setNomTrans("\n");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      String string0 = encomenda0.getNomTrans();
      assertEquals("\n", string0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setNomTrans("\n");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      double double0 = encomenda0.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      String string1 = encomenda0.getEnc();
      assertEquals("o!<>KL", string1);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertNotNull(string1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals(0, int0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("\n", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertEquals("o!<>KL", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("\n", encomenda0.getLoja());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertNotNull(encomenda0);
      
      encomenda0.setAceitaCusto((-198));
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      linhaEncomenda0.setDescricao("--Valor por unidade : ");
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("--Valor por unidade : ", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      
      encomenda0.setEnc("");
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("--Valor por unidade : ", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      
      String string0 = encomenda0.getNomTrans();
      assertEquals("", string0);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      assertNotNull(string0);
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals((-198), int0);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      
      int int1 = encomenda0.getMedicamentos();
      assertEquals(0, int1);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
      assertFalse(int1 == int0);
      
      encomenda0.setEnc("");
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-198), encomenda0.getAceitaCusto());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0, (-1), "Ms.s9hN7/K");
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      encomenda0.setCusto(0.0);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      Encomenda encomenda1 = new Encomenda("Ms.s9hN7/K", "Ms.s9hN7/K", "Ms.s9hN7/K", (-1.0), map0, (-599), 1, (-599), "U7XN;*+BO", 0.0, 0, (LocalDateTime) null, (-599));
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "Ms.s9hN7/K", 0.0, 0.0, 0.0);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals("Ms.s9hN7/K", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals("Ms.s9hN7/K", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("Ms.s9hN7/K", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
      assertNotNull(linhaEncomenda1);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda1.clone();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals("Ms.s9hN7/K", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("Ms.s9hN7/K", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", linhaEncomenda2.getDescricao());
      assertEquals(0.0, linhaEncomenda2.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda2.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda2.getReferencia());
      assertNotNull(linhaEncomenda2);
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda1));
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda0));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda1));
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda2);
      assertNotSame(linhaEncomenda1, linhaEncomenda2);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      assertNotSame(linhaEncomenda2, linhaEncomenda0);
      assertNotSame(linhaEncomenda2, linhaEncomenda1);
      
      encomenda1.addLinhaEncomenda(linhaEncomenda2);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals("Ms.s9hN7/K", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("Ms.s9hN7/K", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", linhaEncomenda2.getDescricao());
      assertEquals(0.0, linhaEncomenda2.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda2.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda2.getReferencia());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda1));
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda2));
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda2));
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda0));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda2);
      assertNotSame(linhaEncomenda1, linhaEncomenda2);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      assertNotSame(linhaEncomenda2, linhaEncomenda0);
      assertNotSame(linhaEncomenda2, linhaEncomenda1);
      
      float float0 = encomenda1.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      double double0 = encomenda1.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      int int0 = encomenda0.getEstado();
      assertEquals((-1), int0);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      Encomenda encomenda2 = encomenda1.Clone();
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(1, encomenda2.getMedicamentos());
      assertEquals((-599), encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCusto(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda2.getLoja());
      assertEquals("U7XN;*+BO", encomenda2.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda2.getEnc());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda2.getUser());
      assertEquals((-1.0), encomenda2.getPeso(), 0.01);
      assertEquals((-599), encomenda2.getAceitaCusto());
      assertEquals((-599.0), encomenda2.getClassificacao(), 0.01);
      assertNotNull(encomenda2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      
      String string0 = encomenda1.getUser();
      assertEquals("Ms.s9hN7/K", string0);
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      
      encomenda2.setNomTrans("Ms.s9hN7/K");
      assertEquals("Ms.s9hN7/K", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0.0, encomenda1.getTempo(), 0.01);
      assertEquals((-599.0), encomenda1.getClassificacao(), 0.01);
      assertEquals("U7XN;*+BO", encomenda1.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda1.getEnc());
      assertEquals("Ms.s9hN7/K", encomenda1.getLoja());
      assertEquals(1, encomenda1.getMedicamentos());
      assertEquals((-1.0), encomenda1.getPeso(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda1.getUser());
      assertEquals((-599), encomenda1.getEstado());
      assertEquals((-599), encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(1, encomenda2.getMedicamentos());
      assertEquals((-599), encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getCusto(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda2.getLoja());
      assertEquals("Ms.s9hN7/K", encomenda2.getEnc());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals("Ms.s9hN7/K", encomenda2.getNomTrans());
      assertEquals("Ms.s9hN7/K", encomenda2.getUser());
      assertEquals((-1.0), encomenda2.getPeso(), 0.01);
      assertEquals((-599), encomenda2.getAceitaCusto());
      assertEquals((-599.0), encomenda2.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-215), (LocalDateTime) null, 0.0, (-215), "");
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setEnc("minutos");
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda1.setCusto(0.0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda1.setClassificacao(0.0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.setClassificacao((-215));
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-215), encomenda0.getEstado());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.preparaEnc();
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      String string0 = encomenda0.getUser();
      assertEquals("", string0);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      String string1 = encomenda1.toString();
      assertEquals("\nEncomenda: minutos\nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: -215\nContem Medicamentos: 0\nEstado da Encomenda: -215\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: 0.0\n\n\n", string1);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertNotNull(string1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertNotNull(linhaEncomenda1);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      
      encomenda1.setTempo((-215));
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertEquals((-215.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.precoLinha(), 0.01);
      assertEquals("n/a", linhaEncomenda2.getDescricao());
      assertEquals(0.0, linhaEncomenda2.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda2.getReferencia());
      assertNotNull(linhaEncomenda2);
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda1));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda1));
      assertTrue(linhaEncomenda2.equals((Object)linhaEncomenda0));
      
      linhaEncomenda2.setDescricao("_gM^1%;Ww:+CFTs!n");
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getValorUni(), 0.01);
      assertEquals("_gM^1%;Ww:+CFTs!n", linhaEncomenda2.getDescricao());
      assertEquals(0.0, linhaEncomenda2.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda2.getReferencia());
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda1));
      assertFalse(linhaEncomenda0.equals((Object)linhaEncomenda2));
      assertFalse(linhaEncomenda2.equals((Object)linhaEncomenda1));
      assertFalse(linhaEncomenda2.equals((Object)linhaEncomenda0));
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda2);
      assertNotSame(linhaEncomenda2, linhaEncomenda1);
      assertNotSame(linhaEncomenda2, linhaEncomenda0);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda2);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda2.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda2.getValorUni(), 0.01);
      assertEquals("_gM^1%;Ww:+CFTs!n", linhaEncomenda2.getDescricao());
      assertEquals(0.0, linhaEncomenda2.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda2.getReferencia());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertTrue(linhaEncomenda0.equals((Object)linhaEncomenda1));
      assertFalse(linhaEncomenda0.equals((Object)linhaEncomenda2));
      assertFalse(linhaEncomenda2.equals((Object)linhaEncomenda1));
      assertFalse(linhaEncomenda2.equals((Object)linhaEncomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda2);
      assertNotSame(linhaEncomenda2, linhaEncomenda1);
      assertNotSame(linhaEncomenda2, linhaEncomenda0);
      
      encomenda1.setLoja("minutos");
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertEquals((-215.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("minutos", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      String string2 = encomenda0.getLoja();
      assertEquals("", string2);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      int int0 = encomenda1.getAceitaCusto();
      assertEquals((-215), int0);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertEquals((-215.0), encomenda1.getTempo(), 0.01);
      assertEquals("minutos", encomenda1.getEnc());
      assertEquals((-215), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("minutos", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-215), encomenda1.getAceitaCusto());
      assertEquals(0, encomenda1.getMedicamentos());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      String string3 = encomenda0.toString();
      assertEquals("\nEncomenda: minutos\nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n--Referencia: n/a--Descri\u00E7ao: _gM^1%;Ww:+CFTs!n--Valor por unidade : 0.0--Quanidade : 0.0\n\nAceita o Custo: -215\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: -215.0\n\n\n", string3);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-215), encomenda0.getAceitaCusto());
      assertEquals("minutos", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-215.0), encomenda0.getClassificacao(), 0.01);
      assertNotNull(string3);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setProdutos(map0);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda1.setMedicamentos((-969));
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-969), encomenda1.getMedicamentos());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.setPeso(0.0);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      int int0 = encomenda1.getMedicamentos();
      assertEquals((-969), int0);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-969), encomenda1.getMedicamentos());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda1.setEnc("");
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-969), encomenda1.getMedicamentos());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-969), (-969), (-969), (-969), (-1), (-969));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -969
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      float float0 = encomenda1.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda2 = new Encomenda("08Pz-U\"s$U#-.^cvpP", "08Pz-U\"s$U#-.^cvpP", "", 0.0, map0, 0, 1433, 0, "\nEstado da Encomenda: ", 0.0, 2695.6799, localDateTime0, 2695.6799);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getEnc());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getUser());
      assertEquals("", encomenda2.getLoja());
      assertEquals(1433, encomenda2.getMedicamentos());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals(0, encomenda2.getEstado());
      assertEquals("\nEstado da Encomenda: ", encomenda2.getNomTrans());
      assertEquals(2695.6799, encomenda2.getCusto(), 0.01);
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals(2695.6799, encomenda2.getClassificacao(), 0.01);
      assertNotNull(encomenda2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      
      double double0 = encomenda2.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getEnc());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getUser());
      assertEquals("", encomenda2.getLoja());
      assertEquals(1433, encomenda2.getMedicamentos());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals(0, encomenda2.getEstado());
      assertEquals("\nEstado da Encomenda: ", encomenda2.getNomTrans());
      assertEquals(2695.6799, encomenda2.getCusto(), 0.01);
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals(2695.6799, encomenda2.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      
      double double1 = encomenda1.getCusto();
      assertEquals(0.0, double1, 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertEquals(double1, double0, 0.01);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      
      String string0 = encomenda2.toString();
      assertEquals("\nEncomenda: 08Pz-U\"s$U#-.^cvpP\nLoja: \nUtilizador: 08Pz-U\"s$U#-.^cvpP\nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 1433\nEstado da Encomenda: 0\nTransporte: \nEstado da Encomenda: \nCusto: 2695.6799euros\nTempo: 0.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 2695.6799\n\n\n", string0);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getEnc());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getUser());
      assertEquals("", encomenda2.getLoja());
      assertEquals(1433, encomenda2.getMedicamentos());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals(0, encomenda2.getEstado());
      assertEquals("\nEstado da Encomenda: ", encomenda2.getNomTrans());
      assertEquals(2695.6799, encomenda2.getCusto(), 0.01);
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals(2695.6799, encomenda2.getClassificacao(), 0.01);
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      
      encomenda0.setMedicamentos((-594));
      assertEquals((-594), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      
      Map<String, LinhaEncomenda> map1 = encomenda2.getProdutos();
      assertEquals((-594), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getEnc());
      assertEquals("08Pz-U\"s$U#-.^cvpP", encomenda2.getUser());
      assertEquals("", encomenda2.getLoja());
      assertEquals(1433, encomenda2.getMedicamentos());
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getTempo(), 0.01);
      assertEquals(0, encomenda2.getEstado());
      assertEquals("\nEstado da Encomenda: ", encomenda2.getNomTrans());
      assertEquals(2695.6799, encomenda2.getCusto(), 0.01);
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals(2695.6799, encomenda2.getClassificacao(), 0.01);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(map0, map1);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(map1, map0);
      
      String string1 = encomenda1.getLoja();
      assertEquals("", string1);
      assertEquals((-594), encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertNotNull(string1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda((-684), localDateTime0, (-684), (-684), "C'JE");
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      float float0 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      int int0 = encomenda0.getEstado();
      assertEquals((-684), int0);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      float float1 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(float1, float0, 0.01F);
      
      encomenda0.setPeso(0.0F);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      int int1 = encomenda0.getEstado();
      assertEquals((-684), int1);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(int1 == int0);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: -684\nContem Medicamentos: 0\nEstado da Encomenda: -684\nTransporte: C'JE\nCusto: -684.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-684), encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("C'JE", encomenda0.getNomTrans());
      assertEquals((-684), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-684.0), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, 0, 0, "X>4+.tQ(iPDK0R");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("X>4+.tQ(iPDK0R", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setEstado(0);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("X>4+.tQ(iPDK0R", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("X>4+.tQ(iPDK0R", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("X>4+.tQ(iPDK0R", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getUser());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getEstado());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      double double0 = encomenda0.getTempo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("X>4+.tQ(iPDK0R", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda0.setNomTrans("");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setMedicamentos((-3114));
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-3114), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      encomenda0.setAceitaCusto(1027);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-3114), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      encomenda0.setPeso(3476.8432507137954);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-3114), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      encomenda0.setUser("Encomenda");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-3114), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      encomenda0.setMedicamentos((-6565));
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      encomenda0.setLoja("");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      float float1 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      assertEquals(float1, float0, 0.01F);
      
      double double0 = encomenda0.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(3476.8432507137954, encomenda0.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals((-6565), encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1027, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals("", encomenda1.getEnc());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals((-6565), encomenda1.getMedicamentos());
      assertEquals(3476.8432507137954, encomenda1.getPeso(), 0.01);
      assertEquals("Encomenda", encomenda1.getUser());
      assertEquals("", encomenda1.getLoja());
      assertEquals(1027, encomenda1.getAceitaCusto());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(1174, (LocalDateTime) null, (-2709.4006), 1174, "m;");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setNomTrans("m;");
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      linhaEncomenda0.setQuantidade(0.0);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      
      encomenda0.setPeso((-1322.47849));
      assertEquals("", encomenda0.getLoja());
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1322.47849), encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      String string0 = encomenda0.getNomTrans();
      assertEquals("m;", string0);
      assertEquals("", encomenda0.getLoja());
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1322.47849), encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(string0);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals("", encomenda0.getLoja());
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1322.47849), encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(1174, encomenda1.getAceitaCusto());
      assertEquals(1174, encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertEquals("m;", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals((-1322.47849), encomenda1.getPeso(), 0.01);
      assertEquals((-2709.4006), encomenda1.getCusto(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.setNomTrans("m;");
      assertEquals("", encomenda0.getLoja());
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1322.47849), encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      String string1 = encomenda0.getLoja();
      assertEquals("", string1);
      assertEquals("", encomenda0.getLoja());
      assertEquals("m;", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-2709.4006), encomenda0.getCusto(), 0.01);
      assertEquals(1174, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1322.47849), encomenda0.getPeso(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1174, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(string1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "pO[<e9#";
      String string1 = "FvQuZ*jd*)2n";
      double double0 = 0.0;
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.preparaEnc();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(string0);
      
      LocalDateTime localDateTime0 = encomenda0.getData();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(localDateTime0);
      
      encomenda0.setClassificacao((-1095.5163463901565));
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", "\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", 0.0, 0.0, 0.0);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getReferencia());
      assertNotNull(linhaEncomenda0);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getReferencia());
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      encomenda0.setNomTrans("\nPeso: ");
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1095.5163463901565), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("\nPeso: ", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      double double0 = encomenda1.getTempo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1095.5163463901565), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("\nPeso: ", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getReferencia());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda1.addLinhaEncomenda(linhaEncomenda0);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0.getReferencia());
      assertEquals(1, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1095.5163463901565), encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getUser());
      assertEquals("", encomenda1.getEnc());
      assertEquals("\nPeso: ", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      LocalDateTime localDateTime1 = encomenda0.getData();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1095.5163463901565), encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(1, encomenda0.getEstado());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertNotNull(localDateTime1);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      LocalDateTime localDateTime0 = encomenda0.getData();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertNotNull(localDateTime0);
      
      encomenda0.setNomTrans("[#");
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("[#", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.setLoja("[#");
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("[#", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals("[#", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setEstado(2332);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(2332, encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertNotNull(encomenda0);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      linhaEncomenda0.setQuantidade(2335.369132972);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(2335.369132972, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(2335.369132972, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      
      encomenda0.setMedicamentos(0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.setMedicamentos(0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      
      double double0 = encomenda0.getCusto();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      
      float float0 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.setPeso(1922.42545775059);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(1922.42545775059, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      
      encomenda0.setUser((String) null);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(1922.42545775059, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getUser());
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: null\nPeso: 1922.42545775059\nProdutos:\n--Referencia: n/a--Descri\u00E7ao: n/a--Valor por unidade : 0.0--Quanidade : 2335.369132972\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(1922.42545775059, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getUser());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.preparaEnc();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      encomenda0.setCusto((-1579.3016898584976));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 1\nTransporte: \nCusto: -1579.3016898584976euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNotNull(string0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      int int0 = encomenda0.getMedicamentos();
      assertEquals(0, int0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1579.3016898584976), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertNotNull(encomenda0);
      
      float float0 = encomenda0.pesoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      double double0 = encomenda0.getTempo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      encomenda0.setClassificacao(0.0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      Encomenda encomenda1 = encomenda0.Clone();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      encomenda0.setProdutos(map0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      encomenda0.setData(localDateTime0);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      encomenda0.setMedicamentos(0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      
      encomenda0.setEnc("g>V~nt[u_+E3");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("g>V~nt[u_+E3", encomenda0.getEnc());
      
      encomenda0.setUser((String) null);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertNull(encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("g>V~nt[u_+E3", encomenda0.getEnc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0, 0, "i>%BvC&qb");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals("i>%BvC&qb", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setTempo(0.0);
      assertEquals(0.0, encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals("i>%BvC&qb", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      encomenda0.setPeso(2538.5);
      assertEquals(0.0, encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getEstado());
      assertEquals(2538.5, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals("i>%BvC&qb", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      double double0 = encomenda0.getPeso();
      assertEquals(2538.5, double0, 0.01);
      assertEquals(0.0, encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0, encomenda0.getEstado());
      assertEquals(2538.5, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals("i>%BvC&qb", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertNotNull(string0);
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals(0, int0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      
      encomenda0.setEnc("Z)cb{sweSyx=A");
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("Z)cb{sweSyx=A", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      
      int int1 = encomenda0.getMedicamentos();
      assertEquals(0, int1);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("Z)cb{sweSyx=A", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda(1144, localDateTime0, (-4294.847426051), 1144, "");
      assertEquals("", encomenda0.getEnc());
      assertEquals(1144, encomenda0.getEstado());
      assertEquals(1144, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4294.847426051), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertNotNull(encomenda0);
      
      encomenda0.setClassificacao(0.0);
      assertEquals("", encomenda0.getEnc());
      assertEquals(1144, encomenda0.getEstado());
      assertEquals(1144, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-4294.847426051), encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      encomenda1.setAceitaCusto((-2992));
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-2992), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      int int0 = encomenda0.getAceitaCusto();
      assertEquals(0, int0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      encomenda1.setLoja("");
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-2992), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      encomenda1.setLoja("L~8{*d2NGOv`[j<[");
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getEnc());
      assertEquals("L~8{*d2NGOv`[j<[", encomenda1.getLoja());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-1), (LocalDateTime) null, (-1), (-1), (String) null);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      encomenda0.setMedicamentos((-1));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, (-430.0296507412), map0, (-1), (-1), (-1), "m'n5,s,U#5njkN;", (-1), (-1), (LocalDateTime) null, (-1));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      String string0 = encomenda1.toString();
      assertEquals("\nEncomenda: null\nLoja: null\nUtilizador: null\nPeso: -430.0296507412\nProdutos:\n\nAceita o Custo: -1\nContem Medicamentos: -1\nEstado da Encomenda: -1\nTransporte: m'n5,s,U#5njkN;\nCusto: -1.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: -1.0\n\n\n", string0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertNotNull(string0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      Encomenda encomenda2 = new Encomenda(encomenda1);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertEquals("m'n5,s,U#5njkN;", encomenda2.getNomTrans());
      assertNull(encomenda2.getEnc());
      assertNull(encomenda2.getUser());
      assertEquals((-1), encomenda2.getMedicamentos());
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-1.0), encomenda2.getClassificacao(), 0.01);
      assertEquals((-1), encomenda2.getAceitaCusto());
      assertEquals((-1), encomenda2.getEstado());
      assertEquals((-1.0), encomenda2.getTempo(), 0.01);
      assertEquals((-430.0296507412), encomenda2.getPeso(), 0.01);
      assertNull(encomenda2.getLoja());
      assertNotNull(encomenda2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      
      encomenda2.setTempo((-430.0296507412));
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertEquals("m'n5,s,U#5njkN;", encomenda2.getNomTrans());
      assertNull(encomenda2.getEnc());
      assertNull(encomenda2.getUser());
      assertEquals((-1), encomenda2.getMedicamentos());
      assertEquals((-430.0296507412), encomenda2.getTempo(), 0.01);
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-1.0), encomenda2.getClassificacao(), 0.01);
      assertEquals((-1), encomenda2.getAceitaCusto());
      assertEquals((-1), encomenda2.getEstado());
      assertEquals((-430.0296507412), encomenda2.getPeso(), 0.01);
      assertNull(encomenda2.getLoja());
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "J-W?a", (-430.0296507412), (-1), (-1));
      assertEquals(430.0296507412, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("J-W?a", linhaEncomenda0.getDescricao());
      assertNull(linhaEncomenda0.getReferencia());
      assertEquals((-430.0296507412), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertNotNull(linhaEncomenda0);
      
      String string1 = linhaEncomenda0.toString();
      assertEquals("--Referencia: null--Descri\u00E7ao: J-W?a--Valor por unidade : -430.0296507412--Quanidade : -1.0", string1);
      assertEquals(430.0296507412, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("J-W?a", linhaEncomenda0.getDescricao());
      assertNull(linhaEncomenda0.getReferencia());
      assertEquals((-430.0296507412), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(430.0296507412, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("J-W?a", linhaEncomenda0.getDescricao());
      assertNull(linhaEncomenda0.getReferencia());
      assertEquals((-430.0296507412), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getPeso(), 0.01);
      assertEquals(430.0296507412, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-430.0296507412), linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("J-W?a", linhaEncomenda1.getDescricao());
      assertNull(linhaEncomenda1.getReferencia());
      assertNotNull(linhaEncomenda1);
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      
      linhaEncomenda1.setDescricao("--Referencia: null--Descri\u00E7ao: J-W?a--Valor por unidade : -430.0296507412--Quanidade : -1.0");
      assertEquals(430.0296507412, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("J-W?a", linhaEncomenda0.getDescricao());
      assertNull(linhaEncomenda0.getReferencia());
      assertEquals((-430.0296507412), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals("--Referencia: null--Descri\u00E7ao: J-W?a--Valor por unidade : -430.0296507412--Quanidade : -1.0", linhaEncomenda1.getDescricao());
      assertEquals((-1.0), linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getPeso(), 0.01);
      assertEquals(430.0296507412, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-430.0296507412), linhaEncomenda1.getValorUni(), 0.01);
      assertNull(linhaEncomenda1.getReferencia());
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      
      encomenda2.addLinhaEncomenda(linhaEncomenda1);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertEquals("m'n5,s,U#5njkN;", encomenda2.getNomTrans());
      assertNull(encomenda2.getEnc());
      assertNull(encomenda2.getUser());
      assertEquals((-1), encomenda2.getMedicamentos());
      assertEquals((-430.0296507412), encomenda2.getTempo(), 0.01);
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-1.0), encomenda2.getClassificacao(), 0.01);
      assertEquals((-1), encomenda2.getAceitaCusto());
      assertEquals((-1), encomenda2.getEstado());
      assertEquals((-430.0296507412), encomenda2.getPeso(), 0.01);
      assertNull(encomenda2.getLoja());
      assertEquals(430.0296507412, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("J-W?a", linhaEncomenda0.getDescricao());
      assertNull(linhaEncomenda0.getReferencia());
      assertEquals((-430.0296507412), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals("--Referencia: null--Descri\u00E7ao: J-W?a--Valor por unidade : -430.0296507412--Quanidade : -1.0", linhaEncomenda1.getDescricao());
      assertEquals((-1.0), linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getPeso(), 0.01);
      assertEquals(430.0296507412, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-430.0296507412), linhaEncomenda1.getValorUni(), 0.01);
      assertNull(linhaEncomenda1.getReferencia());
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(linhaEncomenda0, linhaEncomenda1);
      assertNotSame(linhaEncomenda1, linhaEncomenda0);
      
      String string2 = encomenda2.toString();
      assertEquals("\nEncomenda: null\nLoja: null\nUtilizador: null\nPeso: -430.0296507412\nProdutos:\n--Referencia: null--Descri\u00E7ao: --Referencia: null--Descri\u00E7ao: J-W?a--Valor por unidade : -430.0296507412--Quanidade : -1.0--Valor por unidade : -430.0296507412--Quanidade : -1.0\n\nAceita o Custo: -1\nContem Medicamentos: -1\nEstado da Encomenda: -1\nTransporte: m'n5,s,U#5njkN;\nCusto: -1.0euros\nTempo: -430.0296507412minutos\nTData: null\nClassifica\u00E7ao: -1.0\n\n\n", string2);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1), encomenda0.getAceitaCusto());
      assertEquals((-1.0), encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertNull(encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1), encomenda0.getMedicamentos());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals((-1), encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getCusto(), 0.01);
      assertEquals((-1.0), encomenda1.getClassificacao(), 0.01);
      assertEquals((-430.0296507412), encomenda1.getPeso(), 0.01);
      assertNull(encomenda1.getUser());
      assertNull(encomenda1.getEnc());
      assertEquals((-1), encomenda1.getMedicamentos());
      assertEquals("m'n5,s,U#5njkN;", encomenda1.getNomTrans());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertNull(encomenda1.getLoja());
      assertEquals("m'n5,s,U#5njkN;", encomenda2.getNomTrans());
      assertNull(encomenda2.getEnc());
      assertNull(encomenda2.getUser());
      assertEquals((-1), encomenda2.getMedicamentos());
      assertEquals((-430.0296507412), encomenda2.getTempo(), 0.01);
      assertEquals((-1.0), encomenda2.getCusto(), 0.01);
      assertEquals((-1.0), encomenda2.getClassificacao(), 0.01);
      assertEquals((-1), encomenda2.getAceitaCusto());
      assertEquals((-1), encomenda2.getEstado());
      assertEquals((-430.0296507412), encomenda2.getPeso(), 0.01);
      assertNull(encomenda2.getLoja());
      assertNotNull(string2);
      assertFalse(encomenda0.equals((Object)encomenda2));
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda2));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, 1.0, 0, "}(,-");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCusto(1.0);
      encomenda0.setEstado((-1696));
      encomenda1.setAceitaCusto(0);
      encomenda1.setUser("");
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda0.setTempo(1.0);
      encomenda1.getMedicamentos();
      encomenda2.setData(localDateTime0);
      encomenda0.setClassificacao(0);
      encomenda0.setLoja("3Ek xgQl$NP");
      assertEquals((-1696), encomenda0.getEstado());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setNomTrans("");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setValorUni(0.0);
      linhaEncomenda0.setReferencia("38O`i*uJNf;s");
      encomenda0.setPeso(0.0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.preparaEnc();
      encomenda0.getProdutos();
      encomenda0.pesoEncomenda();
      encomenda0.precoEncomenda();
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      encomenda0.setCusto(1.0);
      encomenda0.setUser("");
      encomenda0.getData();
      encomenda0.setLoja("38O`i*uJNf;s");
      encomenda0.setEnc((String) null);
      encomenda0.getUser();
      assertEquals(1, encomenda0.getEstado());
  }
}
