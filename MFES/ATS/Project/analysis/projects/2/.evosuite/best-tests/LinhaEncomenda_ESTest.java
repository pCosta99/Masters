/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:53:16 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.setValorUni(5958.778);
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(5958.778, linhaEncomenda1.getValorUni(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setValorUni((-4018.0));
      linhaEncomenda0.setQuantidade((-1.0));
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals((-4018.0), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(4018.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setValorUni((-913.212714));
      linhaEncomenda0.setQuantidade(1.0);
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals((-913.212714), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-913.212714), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("?Zx`Olr1$lPSu", "?Zx`Olr1$lPSu", 1.0, 0.0, 0.0);
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "eqI Q'Rm?@l[E$Ny", (-1448.9), 1.0, (-1448.9));
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals((-1448.9), linhaEncomenda0.getPeso(), 0.01);
      assertEquals("eqI Q'Rm?@l[E$Ny", linhaEncomenda0.getDescricao());
      assertEquals((-1448.9), linhaEncomenda0.precoLinha(), 0.01);
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals((-1448.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 0.0, 0.0);
      linhaEncomenda0.getReferencia();
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-2444.2462), 0.0, (-3397.1147191));
      linhaEncomenda0.getReferencia();
      assertEquals((-2444.2462), linhaEncomenda0.getValorUni(), 0.01);
      assertEquals((-3397.1147191), linhaEncomenda0.getPeso(), 0.01);
      assertEquals(-0.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("6!/gouNte,Q", "OF0PLh", 0.0, 0.0, 0.0);
      linhaEncomenda0.setQuantidade(1.0);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      
      linhaEncomenda0.setQuantidade((-1.0));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(">", (String) null, 2000.83, 2000.83, 2000.83);
      double double0 = linhaEncomenda0.getPeso();
      assertEquals(4003320.6888999995, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(2000.83, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("6!/gouNte,Q", "OF0PLh", 0.0, 0.0, 0.0);
      linhaEncomenda0.setPeso((-3264.93885416));
      double double0 = linhaEncomenda0.getPeso();
      assertEquals((-3264.93885416), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("w/.4", (String) null, (-1662.0), (-1662.0), (-5987.8275));
      String string0 = linhaEncomenda0.getDescricao();
      assertEquals((-5987.8275), linhaEncomenda0.getPeso(), 0.01);
      assertNull(string0);
      assertEquals(2762244.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-702.3347741171), 2844.9338783, 0.0);
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals((-1998095.9927939156), linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("~'Qg;Dd?", "~'Qg;Dd?", 0.0, 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.setReferencia("");
      int int0 = linhaEncomenda0.compareTo(linhaEncomenda1);
      assertEquals(8, int0);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("~'Qg;Dd?", "~'Qg;Dd?", 0.0, 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.setReferencia("");
      int int0 = linhaEncomenda1.compareTo(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-8), int0);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-702.3347741171), 2844.9338783, 0.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals((-1998095.9927939156), linhaEncomenda1.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 2530.22997, 2530.22997, 2530.22997);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(2530.22997, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(6402063.7010862, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals(2530.22997, linhaEncomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda((String) null, "--Referencia: n/a--Descri\u00E7ao: n/a--Valor por unidade : 0.0--Quanidade : 0.0", 3755.09615, 1.0, 1.0);
      // Undeclared exception!
      try { 
        linhaEncomenda0.compareTo(linhaEncomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("6!/gouNte,Q", "OF0PLh", 0.0, 0.0, 0.0);
      double double0 = linhaEncomenda0.getPeso();
      assertEquals("OF0PLh", linhaEncomenda0.getDescricao());
      assertEquals(0.0, double0, 0.01);
      assertEquals("6!/gouNte,Q", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.getDescricao();
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", string0);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.getReferencia();
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", string0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      
      linhaEncomenda1.setDescricao("r|.wr1Sv'(");
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      
      linhaEncomenda0.setReferencia("p$I");
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals("r|.wr1Sv'(");
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertFalse(boolean0);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "A4JHsB#ueE&gk5", 1183.1003566322, 1183.1003566322, 1183.1003566322);
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertEquals(1399726.4538632387, linhaEncomenda0.precoLinha(), 0.01);
      assertFalse(boolean0);
      assertEquals("A4JHsB#ueE&gk5", linhaEncomenda0.getDescricao());
      assertEquals("", linhaEncomenda0.getReferencia());
      assertEquals(1183.1003566322, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("w/.4", (String) null, (-1662.0), (-1662.0), (-5987.8275));
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertEquals((-5987.8275), linhaEncomenda0.getPeso(), 0.01);
      assertTrue(boolean0);
      assertEquals(2762244.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.compareTo(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("w/.4", (String) null, (-1662.0), (-1662.0), (-5987.8275));
      String string0 = linhaEncomenda0.toString();
      assertEquals("--Referencia: w/.4--Descri\u00E7ao: null--Valor por unidade : -1662.0--Quanidade : -1662.0", string0);
      assertEquals((-5987.8275), linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("w/.4", (String) null, (-1662.0), (-1662.0), (-5987.8275));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      // Undeclared exception!
      try { 
        linhaEncomenda0.equals(linhaEncomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "A4JHsB#ueE&gk5", 1183.1003566322, 1183.1003566322, 1183.1003566322);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("g8OF4|Dkc", "A4JHsB#ueE&gk5", 1.0, 1183.1003566322, 1183.1003566322);
      assertEquals("g8OF4|Dkc", linhaEncomenda1.getReferencia());
      
      linhaEncomenda1.setReferencia("");
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
  }
}
