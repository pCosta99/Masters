/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:56:23 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transporte_ESTest extends Transporte_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Empresa empresa0 = new Empresa("", "", "/", (Ponto2D) null, 0.0, 2003, (-34), "\n", 2003, (-1.0));
      int int0 = empresa0.getVelmed();
      assertEquals((-34), empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(2003, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "", (Ponto2D) null, (-1.0), (-4319), 1139, true);
      int int0 = voluntario0.getVelmed();
      assertEquals(1139, voluntario0.getLicMedicamentos());
      assertEquals((-4319), int0);
      assertEquals((-1.0), voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio(260.01);
      double double0 = voluntario0.getRaio();
      assertEquals(260.01, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "", (Ponto2D) null, (-1.0), (-4319), 1139, true);
      double double0 = voluntario0.getRaio();
      assertEquals((-4319), voluntario0.getVelmed());
      assertEquals(1139, voluntario0.getLicMedicamentos());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLicMedicamentos(3860);
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals(3860, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", ")pMK5$ aR9@T<>m_nKe", "", (Ponto2D) null, (-47.0862), (-1321), (-1321), false);
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals((-1321), int0);
      assertEquals((-1321), voluntario0.getVelmed());
      assertEquals((-47.0862), voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      assertEquals(0, empresa0.getVelmed());
      
      empresa0.setVelmed(1);
      empresa0.clone();
      assertEquals(1, empresa0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio(260.01);
      voluntario0.clone();
      assertEquals(260.01, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("Q .c", "Ponto2D", "Q .c", ponto2D0, (-102.2196907), (-1), (-1), "Ponto2D", (-102.2196907), (-102.2196907));
      Transporte transporte0 = empresa0.clone();
      assertEquals((-1), empresa0.getVelmed());
      assertEquals((-102.2196907), transporte0.getRaio(), 0.01);
      assertEquals((-102.2196907), empresa0.getRaio(), 0.01);
      assertEquals((-1), transporte0.getLicMedicamentos());
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals((-1), transporte0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      assertEquals(0, empresa0.getLicMedicamentos());
      
      empresa0.setLicMedicamentos(1);
      empresa0.clone();
      assertEquals(1, empresa0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLocal((Ponto2D) null);
      // Undeclared exception!
      try { 
        voluntario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Perfil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.toString();
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nRaio de a\u00E7ao: 0.0\nVelocidade media: 0\nLicen\u00E7a de transporte de medicamentos: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      int int0 = empresa0.getVelmed();
      assertEquals(0, int0);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      double double0 = empresa0.getRaio();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0, empresa0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals(0, int0);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
  }
}
