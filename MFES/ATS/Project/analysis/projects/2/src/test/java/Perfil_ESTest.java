/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:51:38 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Perfil_ESTest extends Perfil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      boolean boolean0 = empresa0.validaLogin("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Loja loja0 = new Loja();
      boolean boolean0 = loja0.validaLogin("[lTpyY'-9\"jW*+:LP'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      String string0 = empresa0.toString();
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nRaio de a\u00E7ao: 0.0\nVelocidade media: 0\nLicen\u00E7a de transporte de medicamentos: 0\nNif: null\nCusto por km: 0.0\nCusto por quilo: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword((String) null);
      String string0 = utilizador0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa(",", ",", ",", ponto2D0, 2.0, 218, 0, ",", 218, 1210.0399503);
      String string0 = empresa0.getPassword();
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setNome((String) null);
      String string0 = loja0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      String string0 = empresa0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\n", "", "", (Ponto2D) null, (-2991));
      Ponto2D ponto2D0 = utilizador0.getLocal();
      assertNull(ponto2D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail((String) null);
      String string0 = utilizador0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Loja loja0 = new Loja("Perfil: ", "", "Perfil: ", ponto2D0, 1, "");
      String string0 = loja0.getEmail();
      assertEquals("Perfil: ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = (Empresa)empresa0.clone();
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      Ponto2D ponto2D0 = empresa0.getLocal();
      assertEquals(0.0, ponto2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Utilizador utilizador0 = new Utilizador("ncC %Mh#mYay%}Q'?-3", "B&`2'9wU[CjQ_", "B&`2'9wU[CjQ_", ponto2D0, 0);
      String string0 = utilizador0.getNome();
      assertEquals("B&`2'9wU[CjQ_", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Loja loja0 = new Loja();
      String string0 = loja0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertTrue(voluntario1.equals((Object)voluntario0));
      
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ponto2D0).toString();
      voluntario0.setLocal(ponto2D0);
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertFalse(voluntario1.equals((Object)voluntario0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setPassword("\n");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      boolean boolean0 = empresa0.equals("lY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(ponto2D0).toString();
      Empresa empresa0 = new Empresa((String) null, "vP\"<3", (String) null, ponto2D0, (-238.0), (-2009), 0, "vP\"<3", (-238.0), (-238.0));
      Empresa empresa1 = empresa0.clone();
      empresa0.setEmail("Custo por km: ");
      // Undeclared exception!
      try { 
        empresa1.equals(empresa0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("^+ucvj,B%r $cE?`T(X", (String) null, "(", ponto2D0, 345.4, 478, 478, "", 0.0, 478);
      // Undeclared exception!
      try { 
        empresa0.validaLogin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = empresa0.clone();
      assertTrue(empresa1.equals((Object)empresa0));
      
      empresa1.setEmail("WJK/7r5~I");
      boolean boolean0 = empresa1.equals(empresa0);
      assertFalse(boolean0);
  }
}
