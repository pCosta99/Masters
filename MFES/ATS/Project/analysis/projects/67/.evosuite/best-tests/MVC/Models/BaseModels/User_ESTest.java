/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:04:40 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Classificacao;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.User;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("re", "re", 0.0, 0.0, "", (-2293.1), (-2293.1), (-1));
      transportadora0.setGps(2.0, 60.0);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.isSenha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Loja loja0 = new Loja("RK{", "RK{", 0.0, 0.0);
      boolean boolean0 = loja0.isSenha("p-[::m qt}J,Ud0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("IBrw2!t3K`~<", (String) null, 2504.32, 1702.3498, 2504.32, false);
      String string0 = voluntarioMed0.getPass();
      assertEquals("IBrw2!t3K`~<", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      String string0 = transportadoraMed0.getPass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("\nNome: ", "MVC.Models.BaseModels.User", (-3531.648958), (-3531.648958), (-3531.648958), true);
      GPS gPS0 = voluntarioMed0.getGPS();
      assertEquals("\nNome: ", voluntarioMed0.getPass());
      assertEquals("MVC.Models.BaseModels.User", voluntarioMed0.getName());
      assertEquals((-3531.648958), gPS0.getY(), 0.01);
      assertEquals((-3531.648958), gPS0.getX(), 0.01);
      assertEquals("\nNome: ", voluntarioMed0.getCod());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "MVC.Models.BaseModels.Classificacao", 1.0, 1.0);
      GPS gPS0 = transportadora0.getGPS();
      assertEquals(1.0, gPS0.getX(), 0.01);
      assertEquals(1.0, gPS0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, 1.0, (-3975.29615));
      utilizador0.addEncomenda("MJq(m[-6");
      List<String> list0 = utilizador0.getCodencomendas();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-1515.0), 1.0, 1.0);
      String string0 = voluntario0.getCod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getCod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.distanciaUser(voluntario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("Voluntario{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nRaio: 0.0\nClassificacao:0.00\n}Transporta Medicamentos: false\n", "", 0.0, 3225.47277667, "", (-4807.7894), (-4807.7894), false);
      // Undeclared exception!
      try { 
        transportadoraMed0.setGps((GPS) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, 0.0, (-2648.77988));
      // Undeclared exception!
      try { 
        voluntario0.distanciaUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Loja loja0 = new Loja("9PTY", "9PTY", (-2320.5754809), 555.0);
      String string0 = loja0.getCod();
      assertEquals("9PTY", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Loja loja0 = new Loja("9PTY", "9PTY", (-2320.5754809), 555.0);
      List<String> list0 = loja0.getCodencomendas();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, (-995.2460136188573), (-995.2460136188573), (String) null, 0.0, 830.81938510636);
      String string0 = transportadora0.getPass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-1515.0), (-1515.0), (-1515.0));
      String string0 = voluntario0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("B}Pw2d0k4MgxG6g.", "C\u00F3digo: ", 1, 0.0, "C\u00F3digo: ", 0.0, 0.0, false, 1);
      Transportadora transportadora0 = transportadoraMed0.clone();
      boolean boolean0 = transportadoraMed0.equals(transportadora0);
      assertTrue(boolean0);
      assertEquals("B}Pw2d0k4MgxG6g.", transportadora0.getPass());
      assertEquals("B}Pw2d0k4MgxG6g.", transportadora0.getCod());
      assertEquals("C\u00F3digo: ", transportadora0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("B}Pw2d0k4MgxG6g.", "C\u00F3digo: ", 1, 0.0, "C\u00F3digo: ", 0.0, 0.0, false, 1);
      boolean boolean0 = transportadoraMed0.equals(transportadoraMed0);
      assertEquals("C\u00F3digo: ", transportadoraMed0.getName());
      assertEquals("B}Pw2d0k4MgxG6g.", transportadoraMed0.getPass());
      assertTrue(boolean0);
      assertEquals("B}Pw2d0k4MgxG6g.", transportadoraMed0.getCod());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("Utilizador{ \n", "Utilizador{ \n", 2050.290847, 0.0, (String) null, 0.0, 2050.290847, true, 0);
      Classificacao classificacao0 = transportadoraMed0.getClassificacao();
      boolean boolean0 = transportadoraMed0.equals(classificacao0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      GPS gPS0 = voluntarioMed0.getGPS();
      voluntarioMed0.setGps(gPS0);
      assertTrue(voluntarioMed0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-1515.0), (-1515.0), (-1515.0));
      voluntario0.setName("@c");
      String string0 = voluntario0.getName();
      assertEquals("@c", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, 0.0, 0);
      // Undeclared exception!
      try { 
        utilizador0.isSenha("Transportadora{ \nC\u00F3digo: Utilizador{ \n\nNome: Utilizador{ \n\nGPS: (2050.290847,0.0)\nNIF: null\nRaio: 0.0\nPre\u00E7o por Km: 2050.290847\nKms Total: 0.00\nClassificacao:0.00\n}\nTransporta Medicamentos: true\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 5.83926070744429, 5.83926070744429, (-2026.6567831452), true);
      voluntarioMed0.setPass((String) null);
      assertEquals(5.0, voluntarioMed0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 5.83926070744429, 5.83926070744429, (-2026.6567831452), true);
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      double double0 = transportadoraMed0.distanciaUser(voluntarioMed0);
      assertEquals(8.257961686700028, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-1515.0), (-1515.0), (-1515.0));
      voluntario0.setCod("@c");
      assertTrue(voluntario0.getEstaLivre());
  }
}
