/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:04:36 GMT 2021
 */

package MVC.Comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Comparators.MaisKmsComparator;
import MVC.Models.BaseModels.Transportadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaisKmsComparator_ESTest extends MaisKmsComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn((-2536.1), (-2536.1), (-2536.1), (-147.38850708)).when(transportadora0).getKmsTotal();
      doReturn((String) null, "").when(transportadora0).getCod();
      // Undeclared exception!
      try { 
        maisKmsComparator0.compare(transportadora0, transportadora0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Comparators.MaisKmsComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, (-1424.9826), (-1424.9826), (-1424.9826)).when(transportadora0).getKmsTotal();
      doReturn("MVC.Models.BaseModels.User", "9w>`N@ e#6F").when(transportadora0).getCod();
      int int0 = maisKmsComparator0.compare(transportadora0, transportadora0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(transportadora0).getKmsTotal();
      doReturn((String) null).when(transportadora0).getCod();
      Transportadora transportadora1 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(transportadora1).getKmsTotal();
      doReturn((String) null).when(transportadora1).getCod();
      // Undeclared exception!
      try { 
        maisKmsComparator0.compare(transportadora0, transportadora1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Comparators.MaisKmsComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn(2044.865651584897, 2044.865651584897, 2044.865651584897, 2044.865651584897).when(transportadora0).getKmsTotal();
      doReturn("\n}", "\n}").when(transportadora0).getCod();
      int int0 = maisKmsComparator0.compare(transportadora0, transportadora0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn(3338.033046, 3338.033046, 3338.033046, 589.517525042323).when(transportadora0).getKmsTotal();
      int int0 = maisKmsComparator0.compare(transportadora0, transportadora0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaisKmsComparator maisKmsComparator0 = new MaisKmsComparator();
      Transportadora transportadora0 = mock(Transportadora.class, new ViolatedAssumptionAnswer());
      doReturn((-1069.082599328077), (-338.1044218044)).when(transportadora0).getKmsTotal();
      int int0 = maisKmsComparator0.compare(transportadora0, transportadora0);
      assertEquals(1, int0);
  }
}
