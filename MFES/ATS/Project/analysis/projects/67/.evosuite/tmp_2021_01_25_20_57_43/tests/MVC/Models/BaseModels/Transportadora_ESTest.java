/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:05:51 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Classificacao;
import MVC.Models.BaseModels.Transportadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "A$KDKy>''Ct0%", 1235.9739054, 2206.18, "", 2206.18, (-71.40843548), (-356));
      assertNotNull(transportadora0);
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      
      transportadora0.incCapacidade();
      assertEquals((-355), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getName());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("rFtCiQvHI~I", "rFtCiQvHI~I", (-2671.4), (-2671.4), "rFtCiQvHI~I", 0.0, 2.0);
      assertNotNull(transportadora0);
      assertEquals("rFtCiQvHI~I", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("rFtCiQvHI~I", transportadora0.getCod());
      assertEquals("rFtCiQvHI~I", transportadora0.getNif());
      assertEquals("rFtCiQvHI~I", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      transportadora0.setVelocidadeMed((-2671.4));
      assertEquals("rFtCiQvHI~I", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("rFtCiQvHI~I", transportadora0.getCod());
      assertEquals("rFtCiQvHI~I", transportadora0.getNif());
      assertEquals((-2671.4), transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("rFtCiQvHI~I", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals((-2671.4), double0, 0.01);
      assertEquals("rFtCiQvHI~I", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("rFtCiQvHI~I", transportadora0.getCod());
      assertEquals("rFtCiQvHI~I", transportadora0.getNif());
      assertEquals((-2671.4), transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("rFtCiQvHI~I", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "A$KDKy>''Ct0%", 1235.9739054, 2206.18, "", 2206.18, (-71.40843548), (-356));
      assertNotNull(transportadora0);
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      
      double double0 = transportadora0.getRaio();
      assertEquals(2206.18, double0, 0.01);
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "MVC.Models.BaseModels.Transportadora", (-7.054142579126933), (-7.054142579126933), "", (-662.7), (-7.054142579126933), 0);
      assertNotNull(transportadora0);
      assertEquals("MVC.Models.BaseModels.Transportadora", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals((-662.7), transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-7.054142579126933), transportadora0.getPrecoKm(), 0.01);
      
      double double0 = transportadora0.getRaio();
      assertEquals((-662.7), double0, 0.01);
      assertEquals("MVC.Models.BaseModels.Transportadora", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals((-662.7), transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-7.054142579126933), transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("X", "X", 0.0, 0.0, "X", 0.0, 0.0);
      assertNotNull(transportadora0);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("X", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("X", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("X", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("X", transportadora0.getNif());
      
      double double0 = transportadora0.getPrecoKm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("X", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("X", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("X", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("X", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", (-1.0), (-1.0), "", 0.0, (-931.5433));
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-931.5433), transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      double double0 = transportadora0.getPrecoKm();
      assertEquals((-931.5433), double0, 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-931.5433), transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "*/|", 2132.6171, 2132.6171, "", 0.0, 1075.0);
      assertNotNull(transportadora0);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      
      transportadora0.classificaTransportadora(1687);
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(1687.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getPass());
      
      double double0 = transportadora0.getNota();
      assertEquals(1687.0, double0, 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(1687.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("?JunoKE-J]\"cYm.i", "?JunoKE-J]\"cYm.i", 2050.7748, 2050.7748, "jqxn3N:", 2050.7748, 2050.7748, (-2817));
      assertNotNull(transportadora0);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getName());
      assertEquals("jqxn3N:", transportadora0.getNif());
      assertEquals(2050.7748, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-2817), transportadora0.getCapacidade());
      assertEquals(2050.7748, transportadora0.getPrecoKm(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      
      transportadora0.classificaTransportadora((-3904));
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getName());
      assertEquals("jqxn3N:", transportadora0.getNif());
      assertEquals(2050.7748, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-2817), transportadora0.getCapacidade());
      assertEquals(2050.7748, transportadora0.getPrecoKm(), 0.01);
      assertEquals((-3904.0), transportadora0.getNota(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getPass());
      
      double double0 = transportadora0.getNota();
      assertEquals((-3904.0), double0, 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getName());
      assertEquals("jqxn3N:", transportadora0.getNif());
      assertEquals(2050.7748, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-2817), transportadora0.getCapacidade());
      assertEquals(2050.7748, transportadora0.getPrecoKm(), 0.01);
      assertEquals((-3904.0), transportadora0.getNota(), 0.01);
      assertEquals("?JunoKE-J]\"cYm.i", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, 0.0, 4204.082, (String) null, (-485.7513054019291), (-1913.31671225774));
      assertNotNull(transportadora0);
      assertNull(transportadora0.getCod());
      assertNull(transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals((-485.7513054019291), transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals((-1913.31671225774), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getPass());
      
      String string0 = transportadora0.getNif();
      assertNull(string0);
      assertNull(transportadora0.getCod());
      assertNull(transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals((-485.7513054019291), transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals((-1913.31671225774), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      
      String string0 = transportadora0.getNif();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nNIF: ", (String) null, (-2557.0), (-2557.0), "", (-2557.0), (-12.2068072), 259);
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getNif());
      assertEquals((-12.2068072), transportadora0.getPrecoKm(), 0.01);
      assertEquals("\nNIF: ", transportadora0.getPass());
      assertEquals(259, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals("\nNIF: ", transportadora0.getCod());
      assertEquals((-2557.0), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      
      transportadora0.setKmsTotal(1417.165);
      assertEquals("", transportadora0.getNif());
      assertEquals((-12.2068072), transportadora0.getPrecoKm(), 0.01);
      assertEquals("\nNIF: ", transportadora0.getPass());
      assertEquals(259, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals("\nNIF: ", transportadora0.getCod());
      assertEquals((-2557.0), transportadora0.getRaio(), 0.01);
      assertEquals(1417.165, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      
      double double0 = transportadora0.getKmsTotal();
      assertEquals(1417.165, double0, 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals((-12.2068072), transportadora0.getPrecoKm(), 0.01);
      assertEquals("\nNIF: ", transportadora0.getPass());
      assertEquals(259, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals("\nNIF: ", transportadora0.getCod());
      assertEquals((-2557.0), transportadora0.getRaio(), 0.01);
      assertEquals(1417.165, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "*/|", 2132.6171, 2132.6171, "", 0.0, 1075.0);
      assertNotNull(transportadora0);
      assertEquals("*/|", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      
      transportadora0.setKmsTotal((-1924.9773746663643));
      assertEquals("*/|", transportadora0.getName());
      assertEquals((-1924.9773746663643), transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      
      double double0 = transportadora0.getKmsTotal();
      assertEquals((-1924.9773746663643), double0, 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals((-1924.9773746663643), transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("q5n<IKdi/8h[F", "k+B6Mkc$%?W9eN6^'", (-1227.2082355090777), 0.0, "\nKms Total: ", 0.0, (-871.4927254093633));
      assertNotNull(transportadora0);
      assertEquals("k+B6Mkc$%?W9eN6^'", transportadora0.getName());
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getCod());
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-871.4927254093633), transportadora0.getPrecoKm(), 0.01);
      
      transportadora0.setEstaLivre(false);
      assertEquals("k+B6Mkc$%?W9eN6^'", transportadora0.getName());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getCod());
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-871.4927254093633), transportadora0.getPrecoKm(), 0.01);
      assertFalse(transportadora0.getEstaLivre());
      
      boolean boolean0 = transportadora0.getEstaLivre();
      assertFalse(boolean0);
      assertEquals("k+B6Mkc$%?W9eN6^'", transportadora0.getName());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getCod());
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("q5n<IKdi/8h[F", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-871.4927254093633), transportadora0.getPrecoKm(), 0.01);
      assertFalse(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "*/|", 2132.6171, 2132.6171, "", 0.0, 1075.0);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      
      transportadora0.classificaTransportadora(1687);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(1687.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      
      Classificacao classificacao0 = transportadora0.getClassificacao();
      assertNotNull(classificacao0);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("*/|", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(1687.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals(1687.0, classificacao0.getNota(), 0.01);
      assertEquals(1687, classificacao0.getSomaNotas());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      transportadora0.classificaTransportadora((-2068));
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-2068.0), transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      Classificacao classificacao0 = transportadora0.getClassificacao();
      assertNotNull(classificacao0);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-2068.0), transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-2068.0), classificacao0.getNota(), 0.01);
      assertEquals((-2068), classificacao0.getSomaNotas());
      assertEquals(1, classificacao0.getNumNotas());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("hg]|WkA9", "", (-2043.814895471), 0.0, (String) null, 4.0, 1.0, 159);
      assertNotNull(transportadora0);
      assertEquals("hg]|WkA9", transportadora0.getPass());
      assertEquals(159, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getName());
      assertEquals("hg]|WkA9", transportadora0.getCod());
      assertEquals(4.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertNull(transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      
      int int0 = transportadora0.getCapacidade();
      assertEquals(159, int0);
      assertEquals("hg]|WkA9", transportadora0.getPass());
      assertEquals(159, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getName());
      assertEquals("hg]|WkA9", transportadora0.getCod());
      assertEquals(4.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertNull(transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, 0.0, "", 0.0, 0.0, (-5578));
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      assertEquals((-5578), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      
      int int0 = transportadora0.getCapacidade();
      assertEquals((-5578), int0);
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      assertEquals((-5578), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "A$KDKy>''Ct0%", 1235.9739054, 2206.18, "", 2206.18, (-71.40843548), (-356));
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      
      transportadora0.setVelocidadeMed((-71.40843548));
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-71.40843548), transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-71.40843548), transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals((-71.40843548), transportadora1.getPrecoKm(), 0.01);
      assertEquals((-71.40843548), transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(2206.18, transportadora1.getRaio(), 0.01);
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getPass());
      assertEquals("A$KDKy>''Ct0%", transportadora1.getName());
      assertEquals((-356), transportadora1.getCapacidade());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals("", transportadora1.getCod());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nNIF: ", (String) null, (-2557.0), (-2557.0), "", (-2557.0), (-12.2068072), 259);
      assertNotNull(transportadora0);
      assertEquals(259, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-2557.0), transportadora0.getRaio(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\nNIF: ", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("\nNIF: ", transportadora0.getPass());
      assertEquals((-12.2068072), transportadora0.getPrecoKm(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals(259, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-2557.0), transportadora0.getRaio(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\nNIF: ", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("\nNIF: ", transportadora0.getPass());
      assertEquals((-12.2068072), transportadora0.getPrecoKm(), 0.01);
      assertEquals("\nNIF: ", transportadora1.getPass());
      assertEquals("", transportadora1.getNif());
      assertEquals((-12.2068072), transportadora1.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals(259, transportadora1.getCapacidade());
      assertNull(transportadora1.getName());
      assertEquals((-2557.0), transportadora1.getRaio(), 0.01);
      assertEquals("\nNIF: ", transportadora1.getCod());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, 1.0, 57.2341578321, (String) null, 1.0, 571.855986261801);
      assertNotNull(transportadora0);
      assertNull(transportadora0.getPass());
      assertNull(transportadora0.getCod());
      assertNull(transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(571.855986261801, transportadora0.getPrecoKm(), 0.01);
      
      transportadora0.classificaTransportadora(755);
      assertNull(transportadora0.getPass());
      assertNull(transportadora0.getCod());
      assertNull(transportadora0.getNif());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(755.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(571.855986261801, transportadora0.getPrecoKm(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertNull(transportadora0.getPass());
      assertNull(transportadora0.getCod());
      assertNull(transportadora0.getNif());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(755.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(571.855986261801, transportadora0.getPrecoKm(), 0.01);
      assertNull(transportadora1.getNif());
      assertNull(transportadora1.getCod());
      assertNull(transportadora1.getPass());
      assertEquals(1.0, transportadora1.getRaio(), 0.01);
      assertEquals(2, transportadora1.getCapacidade());
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(571.855986261801, transportadora1.getPrecoKm(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(755.0, transportadora1.getNota(), 0.01);
      assertNull(transportadora1.getName());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "A$KDKy>''Ct0%", 1235.9739054, 2206.18, "", 2206.18, (-71.40843548), (-356));
      assertNotNull(transportadora0);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      
      transportadora0.classificaTransportadora((-356));
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-356.0), transportadora0.getNota(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("A$KDKy>''Ct0%", transportadora0.getName());
      assertEquals((-71.40843548), transportadora0.getPrecoKm(), 0.01);
      assertEquals(2206.18, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-356), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-356.0), transportadora0.getNota(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals("A$KDKy>''Ct0%", transportadora1.getName());
      assertEquals((-356), transportadora1.getCapacidade());
      assertEquals((-71.40843548), transportadora1.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getPass());
      assertEquals(2206.18, transportadora1.getRaio(), 0.01);
      assertEquals((-356.0), transportadora1.getNota(), 0.01);
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals("", transportadora1.getCod());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("MVC.Models.BaseModels.VoluntarioMed", "MVC.Models.BaseModels.Voluntario", 1644.8, 0.0, "3mKP3]:4@62aHAI=R", 1704.5452939742, 1644.8);
      assertNotNull(transportadora0);
      assertEquals(1644.8, transportadora0.getPrecoKm(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.Voluntario", transportadora0.getName());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1704.5452939742, transportadora0.getRaio(), 0.01);
      
      transportadora0.addKmsTotal(527.956135);
      assertEquals(1644.8, transportadora0.getPrecoKm(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("MVC.Models.BaseModels.Voluntario", transportadora0.getName());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(527.956135, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1704.5452939742, transportadora0.getRaio(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals(1644.8, transportadora0.getPrecoKm(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("MVC.Models.BaseModels.Voluntario", transportadora0.getName());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(527.956135, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1704.5452939742, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(2, transportadora1.getCapacidade());
      assertEquals(1704.5452939742, transportadora1.getRaio(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora1.getPass());
      assertEquals(527.956135, transportadora1.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.Voluntario", transportadora1.getName());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(1644.8, transportadora1.getPrecoKm(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora1.getCod());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      transportadora0.setKmsTotal((-2111.49035215048));
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals((-2111.49035215048), transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals((-2111.49035215048), transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora1.getPass());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals("", transportadora1.getName());
      assertEquals("", transportadora1.getCod());
      assertEquals((-2111.49035215048), transportadora1.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals("", transportadora1.getNif());
      assertEquals(0.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("v){KGZK", "v){KGZK", (-1.0), (-1869.678588), "I", 3244.40959, (-1.0));
      assertTrue(transportadora0.getEstaLivre());
      
      transportadora0.setEstaLivre(false);
      transportadora0.clone();
      assertFalse(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "*/|", 2132.6171, 2132.6171, "", 0.0, 1075.0);
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals(35.0, double0, 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, 0.0, "", 0.0, 0.0, (-5578));
      boolean boolean0 = transportadora0.getEstaLivre();
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-5578), transportadora0.getCapacidade());
      assertTrue(boolean0);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, 0.0, "", 0.0, 0.0, (-5578));
      double double0 = transportadora0.getKmsTotal();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-5578), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "*/|", 2132.6171, 2132.6171, "", 0.0, 1075.0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(1075.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(2, transportadora1.getCapacidade());
      assertEquals("", transportadora1.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(1075.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("5rk^pYP<dQ+^64s.KnV", "", 0.0, 0.0, "5rk^pYP<dQ+^64s.KnV", 0.0, (-1146.97), 1);
      String string0 = transportadora0.getNif();
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("5rk^pYP<dQ+^64s.KnV", string0);
      assertEquals((-1146.97), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("?JunoKE-J]\"cYm.i", "?JunoKE-J]\"cYm.i", 2050.7748, 2050.7748, "jqxn3N:", 2050.7748, 2050.7748, (-2817));
      double double0 = transportadora0.getPrecoKm();
      assertEquals((-2817), transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(2050.7748, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("jqxn3N:", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2050.7748, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getRaio();
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("?JunoKE-J]\"cYm.i", "?JunoKE-J]\"cYm.i", 2050.7748, 2050.7748, "jqxn3N:", 2050.7748, 2050.7748, (-2817));
      transportadora0.getNota();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2050.7748, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-2817), transportadora0.getCapacidade());
      assertEquals("jqxn3N:", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2050.7748, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getClassificacao();
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      int int0 = transportadora0.getCapacidade();
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0, int0);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.incCapacidade();
      assertEquals(1, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.decCapacidade();
      transportadora0.incCapacidade();
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nTransporta Medicamentos: ", "\nTransporta Medicamentos: ", (-1.0), (-1.0), "MVC.Models.BaseModels.Utilizador", (-1.0), (-1.0));
      transportadora0.decCapacidade();
      transportadora0.decCapacidade();
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nTransporta Medicamentos: ", "\nTransporta Medicamentos: ", (-1.0), (-1.0), "MVC.Models.BaseModels.Utilizador", (-1.0), (-1.0));
      String string0 = transportadora0.toString();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("Transportadora{ \nC\u00F3digo: \nTransporta Medicamentos: \nNome: \nTransporta Medicamentos: \nGPS: (-1.0,-1.0)\nNIF: MVC.Models.BaseModels.Utilizador\nRaio: -1.0\nPre\u00E7o por Km: -1.0\nKms Total: 0.00\nClassificacao:0.00\n}", string0);
      assertEquals(2, transportadora0.getCapacidade());
  }
}
