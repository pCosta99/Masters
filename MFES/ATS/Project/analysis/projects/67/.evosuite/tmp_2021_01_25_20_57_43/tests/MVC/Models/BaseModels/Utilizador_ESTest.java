/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:07:34 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Utilizador;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.aceitaEncomenda("", true);
      utilizador0.getPorClassificar();
      assertEquals(1, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("&]p73?yNU", "&]p73?yNU", (-3389.5172594), (-3389.5172594));
      utilizador0.addKeyPorAceitar("");
      utilizador0.getPorAceitar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("~sX]f$Mz", "", 2.0, 0.0);
      utilizador0.aceitaEncomenda("", true);
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNumeroEncomendas((-2386));
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals((-2386), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.aceitaEncomenda("", true);
      utilizador0.clone();
      assertEquals(1, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNumeroEncomendas((-509));
      utilizador0.clone();
      assertEquals((-509), utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("&]p73?yNU", "&]p73?yNU", (-3389.5172594), (-3389.5172594));
      utilizador0.getPorClassificar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPorAceitar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.addKeyPorClassificar("t&Y=");
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0, utilizador1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.classificaEncomenda("]4OHK");
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.criaEncomenda("h&Grr3", (String) null, (-1336.67), (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("^[bokQYzjdMuD{", "^[bokQYzjdMuD{", 2411.707108, 2411.707108);
      utilizador0.aceitaEncomenda("^[bokQYzjdMuD{", false);
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("^[bokQYzjdMuD{", "^[bokQYzjdMuD{", 2411.707108, 2411.707108);
      String string0 = utilizador0.toString();
      assertEquals("Utilizador{ \nC\u00F3digo: ^[bokQYzjdMuD{\nNome: ^[bokQYzjdMuD{\nGPS: (2411.707108,2411.707108)\nNumero de encomendas: 0\n}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("^[bokQYzjdMuD{", "^[bokQYzjdMuD{", 2411.707108, 2411.707108);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(0, utilizador1.getNumeroEncomendas());
  }
}
