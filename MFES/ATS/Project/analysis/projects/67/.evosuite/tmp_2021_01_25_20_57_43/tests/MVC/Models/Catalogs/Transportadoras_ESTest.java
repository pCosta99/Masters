/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:02:51 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Catalogs.Transportadoras;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      Transportadora transportadora0 = new Transportadora("@LXcMqO)v0Z", (String) null, (-598), (-1932735281), (String) null, 2924.4, (-1932735281));
      transportadora0.setVelocidadeMed(0.0);
      transportadoras0.addTransportadora(transportadora0);
      GPS gPS0 = new GPS();
      gPS0.setY((-1932735281));
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-598));
      assertEquals("@LXcMqO)v0Z", encomenda0.getCodEntregador());
      assertEquals((-1.3869308376455999E12), encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("MVC.Models.BaseModels.LinhaEncomenda", "MVC.Models.BaseModels.LinhaEncomenda", 60.0, 60.0, "kK%n^A6zr\"P?Q9o", 60.0, 4.0, true);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.incTransportadora("MVC.Models.BaseModels.LinhaEncomenda");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora();
      transportadoras0.addTransportadora(transportadora0);
      transportadoras0.decTransportadora("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora();
      transportadoras0.addTransportadora(transportadora0);
      transportadoras0.classificaTransportadora("", 426);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "Br+%cc*`0gi$*$wO", 479.0985620639976, 3582.1378333039283, "&kov!f$", 334.5, (-1.0), true, (-1499));
      transportadoras0.addTransportadora(transportadoraMed0);
      Boolean boolean0 = new Boolean("");
      transportadoras0.setEstaLivreTransportadora("", boolean0);
      TransportadoraMed transportadoraMed1 = (TransportadoraMed)transportadoras0.getTransportadora("");
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      hashMap0.put("%.2f", transportadoraMed0);
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      Transportadora transportadora0 = transportadoras0.getTransportadora("%.2f");
      assertTrue(transportadora0.equals((Object)transportadoraMed0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora();
      Utilizador utilizador0 = new Utilizador("3#K", "3#K", (-1612.463961), (-1612.463961));
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("3#K", "Transportadoras:\n[]", 1.2, linkedList0);
      encomenda0.setPreco(1.2);
      GPS gPS0 = transportadora0.getGPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1.2);
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("MVC.Models.BaseModels.Produto", "", "\nPreco: ", (-2362.553167108), list0);
      GPS gPS0 = new GPS(1.0, 1556.0);
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS0, (-2362.553167108));
      assertNotSame(encomenda0, encomenda2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-2087831322));
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-598));
      assertEquals("", encomenda1.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("", "QO", 1551.4390405543, linkedList0);
      encomenda0.setClassificacao(629);
      GPS gPS0 = new GPS((-4056.23), 1551.4390405543);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-4056.23));
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-1932735281));
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-598));
      assertEquals("", encomenda1.getCodUser());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.setTransportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      GPS gPS0 = new GPS();
      // Undeclared exception!
      try { 
        transportadoras0.entregaEncomendaTransportadora((Encomenda) null, gPS0, (-3159.50898));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addTransportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("MVC.Models.BaseModels.LinhaEncomenda", "MVC.Models.BaseModels.LinhaEncomenda", 51.36640181944936, 51.36640181944936, "MVC.Models.BaseModels.LinhaEncomenda", 51.36640181944936, 4.0, true);
      transportadoras0.addTransportadora(transportadoraMed0);
      boolean boolean0 = transportadoras0.existeTransportadora("MVC.Models.BaseModels.LinhaEncomenda");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.existeTransportadora("MVC.Models.Catalogs.Transportadoras");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      Transportadora transportadora0 = new Transportadora("@LXcMqO)v0Z", (String) null, (-598), (-1932735281), (String) null, 2924.4, (-1932735281));
      transportadoras0.addTransportadora(transportadora0);
      GPS gPS0 = new GPS();
      gPS0.setY((-1932735281));
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-598));
      assertEquals("@LXcMqO)v0Z", encomenda0.getCodEntregador());
      assertEquals((-580.9142857142857), encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora();
      Utilizador utilizador0 = new Utilizador("3#K", "3#K", (-1612.463961), (-1612.463961));
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("3#K", "Transportadoras:\n[]", 1.2, linkedList0);
      Boolean boolean0 = new Boolean(true);
      encomenda0.setMedica(boolean0);
      GPS gPS0 = transportadora0.getGPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1.2);
      assertEquals("", encomenda1.getCodEntregador());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora();
      transportadoras0.addTransportadora(transportadora0);
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertNotSame(transportadoras0, transportadoras1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora("A\"I(_AbEDB= 90");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.classificaTransportadora("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.toString();
      assertEquals("Transportadoras:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.removeTransportadora("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "9?G@ae.G&F~p+^", 1036.3162117162642, 2283.174969536054, "kt4@1tk", 1036.3162117162642, 1036.3162117162642, false);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.addEncomendaTransportadora("%", "", 1324.91548);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      assertFalse(transportadoras1.equals((Object)transportadoras0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.decTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addEncomendaTransportadora("%", "", 1324.91548);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        transportadoras0.setEstaLivreTransportadora("", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }
}
