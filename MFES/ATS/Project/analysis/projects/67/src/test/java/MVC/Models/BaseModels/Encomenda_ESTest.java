/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:59:44 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, "", (String) null, 1650.840689982683, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "%.2f", (-4263.216494885761), list0);
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda0.setLinhas(list1);
      encomenda1.setDuracao(0.0);
      encomenda0.calculaValorTotal();
      encomenda1.setClassificacao((-1777));
      encomenda0.setDuracao(1.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn("%.2f", "", "%.2f").when(linhaEncomenda0).getCodigo();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.getPreco();
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.numeroTotalProdutos();
      encomenda1.setDuracao((-3557.51882759));
      Encomenda encomenda2 = encomenda0.clone();
      encomenda1.setDistancia(1.0);
      encomenda2.setDuracao((-500.88644084577));
      encomenda1.existeProdutoEncomenda("");
      encomenda1.existeProdutoEncomenda("%.2f");
      encomenda1.existeProdutoEncomenda("");
      encomenda0.getDuracao();
      encomenda2.getPreco();
      encomenda2.getCodUser();
      encomenda2.getCodEntregador();
      encomenda2.getDuracao();
      encomenda0.setLinhas(list0);
      encomenda2.numeroTotalProdutos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodUser();
      encomenda0.setClassificacao((-1));
      encomenda0.setCodEntregador("");
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn("*G[~ew>{rM~").when(linhaEncomenda0).getCodigo();
      doReturn((double)(-1)).when(linhaEncomenda0).getQuantidade();
      doReturn("").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.toString();
      encomenda0.getCodEnc();
      encomenda0.setCodEntregador("");
      encomenda0.setClassificacao(0);
      encomenda0.numeroTotalProdutos();
      encomenda0.getMedica();
      encomenda0.getDistancia();
      encomenda0.existeProdutoEncomenda(" , Produto: ");
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao((-1));
      encomenda0.setDistancia((-1));
      encomenda0.getCodLoja();
      encomenda0.getCodUser();
      encomenda0.getMedica();
      encomenda0.setCodEntregador("\nDuracao: ");
      encomenda0.setCodEntregador("h");
      encomenda0.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(60.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn("I").when(linhaEncomenda0).getCodigo();
      doReturn("`4$[/en{PpN?n`,dZ{", "I", (String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.setClassificacao(0);
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda0.getCodUser();
      encomenda1.toString();
      encomenda0.setMedica((Boolean) null);
      encomenda0.setLinhas(list0);
      encomenda0.toString();
      encomenda0.getLinhas();
      encomenda1.setDistancia(0.0);
      encomenda1.getPreco();
      encomenda0.equals("Encomenda{");
      encomenda1.setDistancia(0.0);
      encomenda1.setClassificacao(0);
      encomenda1.toString();
      encomenda1.toString();
      encomenda1.getPreco();
      encomenda1.calculaValorTotal();
      // Undeclared exception!
      try { 
        encomenda1.existeProdutoEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.numeroTotalProdutos();
      encomenda2.numeroTotalProdutos();
      encomenda1.getDistancia();
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda3 = encomenda2.clone();
      encomenda0.setLinhas(list0);
      encomenda1.toString();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda0.setDistancia(0.0);
      encomenda2.equals(encomenda3);
      encomenda2.setMedica(boolean0);
      encomenda1.getPeso();
      encomenda2.setDuracao(0.0);
      encomenda3.setClassificacao(0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0, linhaEncomenda1, linhaEncomenda0).when(linhaEncomenda2).clone();
      doReturn("h :").when(linhaEncomenda2).getCodigo();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda0.adicionaLinha(linhaEncomenda3);
      encomenda0.getMedica();
      encomenda2.calculaValorTotal();
      encomenda3.numeroTotalProdutos();
      encomenda2.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda2.toString();
      encomenda0.existeProdutoEncomenda("h :");
      encomenda3.getLinhas();
      encomenda0.getLinhas();
      encomenda1.setMedica((Boolean) null);
      encomenda1.getPreco();
      encomenda2.getCodUser();
      encomenda0.getLinhas();
      encomenda3.numeroTotalProdutos();
      encomenda1.getDistancia();
      encomenda0.getLinhas();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.toString();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.getDuracao();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n").when(linhaEncomenda1).getCodigo();
      doReturn(1.0).when(linhaEncomenda1).getQuantidade();
      doReturn("#/tJ%S").when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.setDuracao(1.0);
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      encomenda0.numeroTotalProdutos();
      encomenda1.setPreco(0.0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      LinhaEncomenda linhaEncomenda4 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda3).when(linhaEncomenda4).clone();
      encomenda1.adicionaLinha(linhaEncomenda4);
      encomenda0.setDistancia(0.0);
      encomenda0.getMedica();
      encomenda0.setDistancia(0.0);
      encomenda1.getMedica();
      encomenda1.setLinhas(list0);
      encomenda0.existeProdutoEncomenda("g6*A{qj=Z]37 69j>N.");
      encomenda1.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      LinhaEncomenda linhaEncomenda5 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda5).clone();
      encomenda0.adicionaLinha(linhaEncomenda5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda encomenda2 = new Encomenda(encomenda0);
      Encomenda encomenda3 = encomenda2.clone();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda2.setDistancia(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      Encomenda encomenda4 = encomenda0.clone();
      encomenda2.adicionaLinha(linhaEncomenda1);
      encomenda4.setMedica((Boolean) null);
      Encomenda encomenda5 = new Encomenda(encomenda4);
      encomenda2.getDuracao();
      encomenda3.getDistancia();
      encomenda4.setDistancia(398.63);
      encomenda1.equals(encomenda1);
      encomenda4.getDuracao();
      encomenda0.getClassificacao();
      encomenda4.calculaValorTotal();
      encomenda4.setClassificacao(0);
      encomenda0.getMedica();
      encomenda1.getCodUser();
      encomenda5.getClassificacao();
      encomenda1.getDistancia();
      Encomenda encomenda6 = new Encomenda(encomenda2);
      Boolean boolean1 = encomenda6.getMedica();
      encomenda1.setMedica(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 1663.27, list0);
      encomenda1.existeProdutoEncomenda("");
      encomenda1.setDistancia(1663.27);
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda1.getLinhas();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda0.setDuracao(1663.27);
      encomenda0.getCodEnc();
      encomenda1.getClassificacao();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      encomenda0.setClassificacao(0);
      encomenda1.setDuracao(0.0);
      encomenda0.setPreco(1335.132627791);
      encomenda0.equals(list1);
      encomenda0.getCodLoja();
      encomenda0.getPreco();
      encomenda1.setCodEntregador((String) null);
      encomenda1.getDuracao();
      encomenda0.setDuracao(1335.132627791);
      encomenda1.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreco(1.0);
      encomenda0.toString();
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("8;W[", "H*t%nQi8K<-1!@(g", "8;W[", 1.0, list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda2.adicionaLinha(linhaEncomenda1);
      encomenda2.getDistancia();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda1.setPreco(29.7266952823);
      encomenda2.calculaValorTotal();
      encomenda2.getLinhas();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.toString();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.getDuracao();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setDuracao(1.0);
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      encomenda0.numeroTotalProdutos();
      encomenda1.setPreco(0.0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      encomenda1.adicionaLinha(linhaEncomenda2);
      encomenda0.setDistancia(0.0);
      encomenda0.getMedica();
      encomenda0.setDistancia(0.0);
      encomenda1.setLinhas(list0);
      encomenda0.existeProdutoEncomenda("g6*A{qj=Z]37 69j>N.");
      // Undeclared exception!
      try { 
        encomenda1.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.getClassificacao();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("%.2f", "5KdQ>IfT.m", "5KdQ>IfT.m", 0, list0);
      encomenda0.equals(encomenda1);
      encomenda1.toString();
      encomenda0.setDistancia(0);
      encomenda0.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.existeProdutoEncomenda((String) null);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setPreco(0.0);
      encomenda0.setDistancia(1813.989);
      encomenda0.setDuracao(1813.989);
      encomenda0.setDuracao(0.0);
      encomenda0.getCodEntregador();
      encomenda0.getLinhas();
      encomenda0.numeroTotalProdutos();
      encomenda0.toString();
      encomenda0.setDuracao(278.52);
      encomenda0.existeProdutoEncomenda("Encomenda{");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setDistancia((-872.2083334068));
      Encomenda encomenda1 = new Encomenda("", "", "1s", (-872.2083334068), list0);
      encomenda1.setDistancia((-872.2083334068));
      encomenda1.getDistancia();
      encomenda0.setClassificacao(1359);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setDistancia(1821.27);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda((String) null, (String) null, "F]['wQ8/n", (-1408.33682), list0);
      encomenda2.setDuracao((-1408.33682));
      int int0 = 2414;
      encomenda1.getLinhas();
      encomenda0.setClassificacao(2414);
      encomenda2.setClassificacao(2414);
      encomenda2.getLinhas();
      encomenda1.getLinhas();
      encomenda0.getCodLoja();
      encomenda1.setDistancia(2414);
      encomenda1.toString();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda1.getCodLoja();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda1.getMedica();
      encomenda1.getMedica();
      encomenda2.getClassificacao();
      Boolean boolean1 = encomenda0.getMedica();
      encomenda1.setMedica(boolean1);
      encomenda2.getCodEnc();
      encomenda1.getLinhas();
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(1352.389466508);
      encomenda0.calculaValorTotal();
      encomenda0.calculaValorTotal();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setDistancia(1382.98601106);
      encomenda0.setDistancia(0.0);
      encomenda0.getPreco();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda0.toString();
      encomenda0.setPreco(0.0);
      encomenda0.getCodLoja();
      encomenda0.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreco(2734.711);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("3f", "3f", "IE", 2734.711, list0);
      encomenda2.numeroTotalProdutos();
      encomenda2.existeProdutoEncomenda("3f");
      encomenda2.setCodEntregador("IE");
      encomenda2.getMedica();
      Encomenda encomenda3 = encomenda1.clone();
      encomenda2.getDuracao();
      encomenda3.calculaValorTotal();
      encomenda1.numeroTotalProdutos();
      encomenda1.getDuracao();
      encomenda3.getDuracao();
      encomenda0.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setDuracao(1.0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.getMedica();
      encomenda2.clone();
      encomenda2.setPreco(0.0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda2.setLinhas(list0);
      encomenda2.numeroTotalProdutos();
      encomenda2.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("", "", "", (-130.998130599627), list0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda2.getPeso();
      encomenda2.setClassificacao((-2796));
      double double0 = 942.743728;
      Encomenda encomenda3 = new Encomenda((String) null, "", "", 942.743728, list0);
      // Undeclared exception!
      try { 
        encomenda1.equals(encomenda3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda0.setLinhas(list1);
      Encomenda encomenda1 = new Encomenda("\nClassificacao:", "\nClassificacao:", "MVC.Models.BaseModels.Encomenda", (-658.515322385), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda1.getCodEnc();
      encomenda3.getMedica();
      encomenda0.setDuracao((-658.515322385));
      encomenda0.calculaValorTotal();
      encomenda0.toString();
      encomenda0.equals("\nPreco: ");
      Boolean boolean0 = encomenda2.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda3.getClassificacao();
      encomenda1.calculaValorTotal();
      encomenda2.setPreco((-658.515322385));
      encomenda0.calculaValorTotal();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-1.0));
      encomenda0.clone();
      encomenda0.getDuracao();
      LinhaEncomenda linhaEncomenda0 = null;
      // Undeclared exception!
      try { 
        encomenda0.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 647.51765113644;
      List<LinhaEncomenda> list0 = null;
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((String) null, (String) null, (String) null, 647.51765113644, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.setDistancia((-1.0));
      encomenda0.getPeso();
      int int0 = 0;
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda0.setPreco(2668.06751621168);
      // Undeclared exception!
      try { 
        encomenda0.existeProdutoEncomenda(">Pp,+\u0004");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.calculaValorTotal();
      encomenda0.getPeso();
      encomenda0.getCodUser();
      encomenda0.getCodLoja();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.existeProdutoEncomenda("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda0.setDuracao(0.0);
      encomenda0.getCodEntregador();
      encomenda0.toString();
      encomenda0.getPreco();
      encomenda1.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.equals(encomenda1);
      encomenda0.getDuracao();
      encomenda0.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda1.setMedica(boolean0);
      encomenda1.setClassificacao(0);
      encomenda0.numeroTotalProdutos();
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda1.numeroTotalProdutos();
      encomenda0.getDistancia();
      encomenda1.getMedica();
      encomenda1.getDistancia();
      encomenda0.getCodEntregador();
      encomenda1.setDuracao(672.0);
      encomenda0.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.existeProdutoEncomenda("\nPreco: ");
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("7tOelfbB`!S", "7tOelfbB`!S", "7tOelfbB`!S", 0.0, list0);
      encomenda1.getLinhas();
      encomenda2.toString();
      encomenda0.setClassificacao(2404);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda2.setDistancia(0.0);
      encomenda2.getMedica();
      encomenda1.getLinhas();
      encomenda1.clone();
      encomenda0.numeroTotalProdutos();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.setDuracao(0.0);
      encomenda3.getCodEnc();
      encomenda2.calculaValorTotal();
      encomenda0.setLinhas(list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.adicionaLinha(linhaEncomenda0);
      encomenda0.toString();
      encomenda3.setPreco(0.0);
      encomenda1.getDuracao();
      // Undeclared exception!
      try { 
        encomenda1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-718));
      encomenda0.setDuracao(1316.711381277);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCodEntregador("!3jID{wO&M}C");
      encomenda1.setPreco(0.0);
      encomenda1.equals(encomenda0);
      encomenda0.getDuracao();
      encomenda0.getLinhas();
      encomenda1.getPeso();
      encomenda0.getDistancia();
      encomenda0.numeroTotalProdutos();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda1.setDistancia(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("", "!^klIQBpl|!*nPgS", "", 1746.16555801, list0);
      encomenda2.getPeso();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreco((-1292.54068));
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda1.setLinhas(list0);
      encomenda1.numeroTotalProdutos();
      encomenda0.existeProdutoEncomenda("{");
      encomenda0.setClassificacao(1);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.numeroTotalProdutos();
      encomenda1.setPreco((-1292.54068));
      encomenda1.clone();
      encomenda1.existeProdutoEncomenda("");
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setClassificacao(0);
      encomenda0.setCodEntregador("{");
      encomenda0.existeProdutoEncomenda("{");
      encomenda0.getPreco();
      encomenda1.getCodEntregador();
      encomenda0.setPreco(1);
      encomenda0.getPeso();
      encomenda2.setPreco(0.0);
      encomenda1.existeProdutoEncomenda("");
      encomenda1.setClassificacao((-1562));
      encomenda1.getCodUser();
      encomenda1.getPeso();
      encomenda0.getDistancia();
      encomenda2.getCodEnc();
      encomenda1.getCodEntregador();
      encomenda1.getPeso();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("I|7CG' ", "I|7CG' ", "j<", (-2699.1), list0);
      encomenda1.setPreco((-2699.1));
      encomenda1.calculaValorTotal();
      encomenda0.setPreco((-2699.1));
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda0.setPreco((-2699.1));
      encomenda2.setMedica((Boolean) null);
      encomenda2.getCodUser();
      encomenda0.toString();
      encomenda2.setDistancia((-2699.1));
      encomenda0.getCodLoja();
      encomenda2.equals((Object) null);
      encomenda0.existeProdutoEncomenda("^{");
      encomenda2.getCodLoja();
      encomenda1.getPreco();
      encomenda2.getMedica();
      encomenda2.toString();
      encomenda1.setMedica((Boolean) null);
      encomenda2.setClassificacao(0);
      encomenda0.setPreco((-2699.1));
      encomenda1.getCodEntregador();
      encomenda1.setCodEntregador("'l_35GpB");
      encomenda0.getCodEnc();
      encomenda0.getCodLoja();
      encomenda2.getCodEntregador();
      encomenda0.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 2017.0;
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda1 = new Encomenda("A) J0j^xQpuu", "A) J0j^xQpuu", " , Quantidade: ", 2017.0, list0);
      encomenda1.existeProdutoEncomenda(" , Quantidade: ");
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setPreco(2017.0);
      encomenda1.setLinhas(list0);
      encomenda2.getCodUser();
      encomenda1.toString();
      encomenda1.setLinhas(list0);
      encomenda2.getCodUser();
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setLinhas((List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.adicionaLinha(linhaEncomenda0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getDuracao();
      encomenda0.getDuracao();
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.toString();
      encomenda0.clone();
      encomenda0.setClassificacao(3504);
      encomenda0.getDuracao();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda0.setDuracao(1.0);
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(1382.701);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 3424.556699215917, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getCodUser();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.existeProdutoEncomenda("");
      Encomenda encomenda2 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda2.getLinhas();
      encomenda2.calculaValorTotal();
      encomenda1.setClassificacao(1);
      encomenda2.setLinhas(list0);
      encomenda2.numeroTotalProdutos();
      encomenda2.getCodUser();
      encomenda0.toString();
      encomenda1.getClassificacao();
      // Undeclared exception!
      try { 
        encomenda2.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("Codigo: ", "Codigo: ", "h :", 0.0, list0);
      encomenda1.getCodUser();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("`", "`", "`", 0.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getMedica();
      encomenda0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(1.0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("xj:s2", "xj:s2", "xj:s2", 1.0, list0);
      encomenda0.setPreco((-3594.794939));
      encomenda1.setClassificacao(0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.toString();
      encomenda1.setCodEntregador("xj:s2");
      encomenda1.setDuracao(0.0);
      encomenda1.getCodLoja();
      encomenda0.getPeso();
      encomenda1.numeroTotalProdutos();
      encomenda0.getMedica();
      encomenda1.setDuracao(0.0);
      encomenda1.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco((-1616.50099347));
      encomenda0.setDuracao((-1927.4865));
      encomenda0.getClassificacao();
      encomenda0.getCodUser();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.getCodEnc();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.equals("");
      encomenda0.setDuracao((-1616.50099347));
      encomenda0.toString();
      encomenda0.clone();
      encomenda0.setClassificacao((-2277));
      encomenda0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setClassificacao((-2128));
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.numeroTotalProdutos();
      encomenda0.getCodLoja();
      encomenda0.existeProdutoEncomenda("D>WgZ");
      encomenda1.toString();
      encomenda1.getCodLoja();
      encomenda1.setDistancia((-2128));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.setClassificacao(0);
      encomenda0.setDistancia(772.5874);
      Encomenda encomenda1 = encomenda0.clone();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda1.setMedica(boolean0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda1.setCodEntregador(">0|NZ^m-h+B");
      encomenda1.getCodEnc();
      encomenda0.numeroTotalProdutos();
      encomenda0.getMedica();
      encomenda0.setPreco((-3403.4776));
      encomenda1.getCodLoja();
      encomenda0.setLinhas(list0);
      encomenda0.getDuracao();
      encomenda0.setDistancia(0);
      encomenda1.numeroTotalProdutos();
      encomenda0.setMedica(boolean0);
      encomenda0.getPreco();
      encomenda1.existeProdutoEncomenda("y2@f y~0'S:u&^s.MmP");
      encomenda0.getCodEnc();
      encomenda1.setCodEntregador("");
      encomenda1.getCodEntregador();
      encomenda1.setDistancia(0);
      encomenda1.getPeso();
      Boolean boolean1 = encomenda1.getMedica();
      encomenda0.setMedica(boolean1);
      encomenda1.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("$]wXKC5@6K;K)", "\nClassificacao:", "\nClassificacao:", (-1108.477), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "c";
      String string1 = "~v;&bz*";
      String string2 = "7qo'oO1";
      double double0 = 0.0;
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.getLinhas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.existeProdutoEncomenda("To5b9x");
      encomenda0.setDuracao(458.895);
      double double0 = 3276.3631974;
      encomenda0.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.setDistancia(3276.3631974);
      encomenda0.getCodEntregador();
      encomenda0.getCodUser();
      encomenda0.getDistancia();
      encomenda0.numeroTotalProdutos();
      encomenda0.getDistancia();
      encomenda0.setCodEntregador("");
      encomenda0.getCodLoja();
      encomenda0.setDuracao(3276.3631974);
      encomenda0.existeProdutoEncomenda("Bi9=bTO");
      encomenda0.calculaValorTotal();
      encomenda0.getPeso();
      encomenda0.existeProdutoEncomenda("");
      Encomenda encomenda1 = null;
      try {
        encomenda1 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setClassificacao((-5116));
      encomenda0.setLinhas(list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda1 = null;
      try {
        encomenda1 = new Encomenda(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getMedica();
      encomenda0.setClassificacao(0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      encomenda0.existeProdutoEncomenda("~]A\"/% ANM(20VA2-");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getCodEnc();
      encomenda1.toString();
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda1.getClassificacao();
      encomenda1.getMedica();
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.setLinhas(list0);
      Encomenda encomenda3 = new Encomenda();
      encomenda0.equals(encomenda3);
      encomenda0.existeProdutoEncomenda(";");
      encomenda0.getPeso();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreco(0.0);
      encomenda1.getLinhas();
      encomenda0.getPeso();
      encomenda0.setClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda1.setLinhas(list0);
      encomenda1.setDistancia(4169.083);
      encomenda1.clone();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getCodLoja();
      encomenda1.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.getLinhas();
      encomenda0.toString();
      encomenda0.getPreco();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "", 1.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getDistancia();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda2 = new Encomenda("Encomenda{", "Encomenda{", "T1?pN", (-608.163146269173), list0);
      encomenda1.equals(encomenda2);
      encomenda2.getMedica();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.equals(list0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(1019.809);
      encomenda0.calculaValorTotal();
      encomenda0.existeProdutoEncomenda("%.2f");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.numeroTotalProdutos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.calculaValorTotal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getLinhas();
      encomenda0.getMedica();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(1.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao((-765.0543));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.setClassificacao((-1514));
      encomenda0.getCodUser();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-1356.5710263538665));
      // Undeclared exception!
      try { 
        encomenda0.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = new Encomenda(encomenda0);
      Encomenda encomenda3 = encomenda2.clone();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda2.setDistancia(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      Encomenda encomenda4 = encomenda0.clone();
      encomenda2.adicionaLinha(linhaEncomenda2);
      encomenda4.setMedica((Boolean) null);
      Encomenda encomenda5 = new Encomenda(encomenda4);
      encomenda2.getDuracao();
      encomenda3.getDistancia();
      encomenda4.setDistancia(398.63);
      encomenda1.equals(encomenda1);
      encomenda4.getDuracao();
      encomenda0.getClassificacao();
      encomenda4.calculaValorTotal();
      encomenda4.setClassificacao(0);
      encomenda0.getMedica();
      encomenda1.getCodUser();
      encomenda5.getClassificacao();
      encomenda1.getDistancia();
      Encomenda encomenda6 = new Encomenda(encomenda2);
      Boolean boolean1 = encomenda6.getMedica();
      encomenda1.setMedica(boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setDuracao((-1.0));
      encomenda0.setDuracao(1.0);
      encomenda0.setDuracao((-1.0));
      encomenda0.setPreco(1.0);
      encomenda0.setDuracao(1.0);
      encomenda0.setDuracao(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn((String) null, (String) null, (String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.setClassificacao(0);
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda0.getCodUser();
      encomenda1.toString();
      encomenda0.setMedica((Boolean) null);
      encomenda0.setLinhas(list0);
      encomenda0.toString();
      encomenda0.getLinhas();
      encomenda1.setDistancia(0.0);
      encomenda1.getPreco();
      encomenda0.equals("Encomenda{");
      encomenda1.setDistancia(0.0);
      encomenda1.setClassificacao(0);
      encomenda1.toString();
      encomenda1.toString();
      encomenda1.getPreco();
      encomenda1.calculaValorTotal();
      // Undeclared exception!
      try { 
        encomenda1.existeProdutoEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("yoIz{?&XJ.<S{P", "yoIz{?&XJ.<S{P", "yoIz{?&XJ.<S{P", 1771.128701, list0);
      encomenda0.calculaValorTotal();
      encomenda2.setClassificacao(890);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda2.getCodEnc();
      encomenda2.getPreco();
      encomenda2.numeroTotalProdutos();
      encomenda0.setDistancia(0);
      encomenda0.setCodEntregador("^(!P;");
      encomenda0.equals(encomenda2);
      encomenda0.toString();
      encomenda0.setLinhas(list0);
      encomenda2.getMedica();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", (String) null, 0.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", ".f", (-4263.216494885761), list0);
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda0.setLinhas(list1);
      encomenda1.setDuracao((-4263.216494885761));
      encomenda0.calculaValorTotal();
      encomenda1.setClassificacao((-1777));
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(".f", "", "").when(linhaEncomenda0).getCodigo();
      doReturn((-4263.216494885761)).when(linhaEncomenda0).getQuantidade();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.getPreco();
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.numeroTotalProdutos();
      encomenda1.setDuracao((-3557.51882759));
      Encomenda encomenda2 = encomenda0.clone();
      encomenda1.setDistancia(1.0);
      encomenda1.numeroTotalProdutos();
      encomenda1.existeProdutoEncomenda("");
      encomenda1.existeProdutoEncomenda(".f");
      encomenda1.existeProdutoEncomenda("");
      assertEquals((-3557.51882759), encomenda1.getDuracao(), 0.01);
      
      encomenda0.getDuracao();
      encomenda2.getPreco();
      encomenda2.getCodUser();
      encomenda2.getCodEntregador();
      encomenda2.getDuracao();
      encomenda0.setLinhas(list0);
      int int0 = encomenda2.numeroTotalProdutos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getDuracao();
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }
}
