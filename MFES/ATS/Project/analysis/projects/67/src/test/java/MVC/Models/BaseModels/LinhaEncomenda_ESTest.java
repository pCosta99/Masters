/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:08:31 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", (-1.0), (-1.0));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(1.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(":_p g.*t_N&", ":_p g.*t_N&", 2695.7734, (-1.0));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals((-2695.7734), linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals(2695.7734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", (-1.0), (-1.0));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-1.0), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-2774.6027018078303), (-2774.6027018078303));
      linhaEncomenda0.setNome((String) null);
      linhaEncomenda0.getNome();
      assertEquals(7698420.152879312, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(":_p g.*t_N&", ":_p g.*t_N&", 2695.7734, (-1.0));
      linhaEncomenda0.getNome();
      assertEquals((-2695.7734), linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-1455.477153), (-1455.477153));
      linhaEncomenda0.getCodigo();
      assertEquals(2118413.7429049853, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4s(!C+G|_Jw\"aG)R", "", 171.036207544729, 171.036207544729);
      String string0 = linhaEncomenda0.getCodigo();
      assertEquals("", linhaEncomenda0.getNome());
      assertEquals(29253.38429128361, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals("4s(!C+G|_Jw\"aG)R", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-2774.6027018078303), (-2774.6027018078303));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(7698420.152879312, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Up 3Z3)Cy:wy;xh.!tr", "Up 3Z3)Cy:wy;xh.!tr", 957.303025061632, (-365.1355846475817));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals((-349545.39974077756), linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-2832.7418486), (-2832.7418486));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(8024426.380809746, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("r$|Y6(iT#Y}t2PHI", (String) null, 2466.9459045, 2466.9459045);
      linhaEncomenda0.setQuantidade((-2357.7));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals((-2357.7), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-5816318.359039649), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-2774.6027018078303), (-2774.6027018078303));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(7698420.152879312, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals((-2774.6027018078303), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4s(!C+G|_Jw\"aG)R", "", 171.036207544729, 171.036207544729);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals("", linhaEncomenda0.getNome());
      assertEquals(171.036207544729, double0, 0.01);
      assertEquals(171.036207544729, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("4s(!C+G|_Jw\"aG)R", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4s(!C+G|_Jw\"aG)R", "", 171.036207544729, 171.036207544729);
      String string0 = linhaEncomenda0.getNome();
      assertEquals(29253.38429128361, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals("4s(!C+G|_Jw\"aG)R", linhaEncomenda0.getCodigo());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getCodigo();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco(0.0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("Codigo:  , Produto:  , Quantidade: 0.00 , Valor Unit\u00E1rio: 0.00\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("-(X)R.u+l6", "-(X)R.u+l6", 2063.86828234023, 2063.86828234023);
      linhaEncomenda0.setCodigo("-(X)R.u+l6");
      assertEquals(4259552.286850012, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("-(X)R.u+l6", "-(X)R.u+l6", 2063.86828234023, 2063.86828234023);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(4259552.286850012, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }
}
