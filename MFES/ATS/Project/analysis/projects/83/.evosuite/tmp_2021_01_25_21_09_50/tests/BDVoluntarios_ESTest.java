/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:13:46 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDVoluntarios_ESTest extends BDVoluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), (-20), false, (-20), (-20));
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja();
      voluntario2.setMinutosDeEspera((-20));
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.printVoluntario();
      System.setCurrentTimeMillis(0L);
      bDVoluntarios0.existeEnc("e#7}0V:'-1Jc=YRd- ---> e#7}0V:'-1Jc=YRd- || RATE --> -2020.0\n");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 4, false, 4, 4);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja();
      voluntario2.setMinutosDeEspera(4);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      System.setCurrentTimeMillis(0L);
      bDVoluntarios0.existeEnc("e#7}0V:'-1Jc=YRd-");
      Object object0 = new Object();
      bDVoluntarios0.equals(object0);
      bDVoluntarios0.toString();
      bDVoluntarios1.getVoluntarios();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      bDVoluntarios2.toString();
      BDVoluntarios bDVoluntarios3 = bDVoluntarios1.clone();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios3.updateVoluntario2(voluntario0);
      bDVoluntarios1.add(voluntario0);
      bDVoluntarios1.tryLogin("A6}nOfu6C", "iE}l?G{)['T`Far");
      bDVoluntarios1.existeEnc("y");
      bDVoluntarios3.clone();
      bDVoluntarios1.toString();
      bDVoluntarios2.existeEmail((String) null);
      bDVoluntarios2.equals((Object) null);
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      // Undeclared exception!
      try { 
        bDVoluntarios1.voluntariosDisponíveisMed(loja1, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.existeCodigo("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.printVoluntario();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.printVoluntario();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.setVoluntarios(map0);
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      String string0 = "e#7}0V:'-1Jc=YRd-";
      double double0 = (-1.0);
      long long0 = (-2020L);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", false, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      String string1 = "Ski.6^";
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      loja1.getEncomendas_recebidas();
      try { 
        voluntario1.getEncomenda("Ski.6^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.printVoluntario();
      Utilizador utilizador0 = new Utilizador("e#7}0V:'-1Jc=YRd-", "Ski.6^", "Login feito com sucesso", "e#7}0V:'-1Jc=YRd-", (-1.0), 813.8909051890051, arrayList0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      bDVoluntarios2.toString();
      BDVoluntarios bDVoluntarios3 = bDVoluntarios1.clone();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios3.updateVoluntario2(voluntario0);
      bDVoluntarios1.add(voluntario0);
      String string0 = "@Bv\"8DRa0YKS y4x";
      String string1 = "Efetuou encomendas em ";
      // Undeclared exception!
      try { 
        bDVoluntarios3.printVoluntarioLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", true, 2856.711395993652, 2856.711395993652, localDate0, 2856.711395993652, list0, (-2020L), 0, true, 0, 0);
      voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario2 = bDVoluntarios0.tryLogin("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-");
      bDVoluntarios0.getEmail("e#7}0Vo'-dJc=YRd-");
      bDVoluntarios0.equals(voluntario2);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "Ski.6^", "Ski.6^", 2856.711395993652, (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      bDVoluntarios0.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("lg(:*[/I.%&V", "lg(:*[/I.%&V", "lg(:*[/I.%&V", "lg(:*[/I.%&V", false, 1165.0, 0.0, localDate0, 0.0, linkedList0, (-124.92552), 5314, false, 1, 0);
      bDVoluntarios1.updateVoluntario2(voluntario0);
      bDVoluntarios0.voluntariosDisponíveis2((Loja) null, voluntario0);
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Utilizador utilizador0 = new Utilizador("G\"-:kh", "+", " || RATE --> ", "lg(:*[/I.%&V", 1165.0, (-124.92552), arrayList0);
      bDVoluntarios0.voluntariosDisponíveis((Loja) null, utilizador0);
      Voluntario voluntario1 = new Voluntario("lg(:*[/I.%&V", "lg(:*[/I.%&V", "lg(:*[/I.%&V", "lg(:*[/I.%&V", false, 0.0, 0.0, localDate0, 56.684249392545, linkedList0, 0.0, (-1164), true, 0, 5314);
      // Undeclared exception!
      try { 
        bDVoluntarios1.voluntariosDisponíveis2((Loja) null, voluntario1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario2 = bDVoluntarios0.tryLogin("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0Vo'-dJc=YRd-");
      bDVoluntarios0.equals(voluntario2);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario0.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      bDVoluntarios0.clone();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2636L);
      Loja loja0 = new Loja();
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      Loja loja1 = new Loja("", "iH(`|[Is<I&^d", (String) null, (String) null, 0.0, 0.0, 0.0, arrayList0, 100);
      ArrayList<Encomenda> arrayList1 = loja1.getEncomendas_recebidas();
      arrayList0.addAll((Collection<? extends Encomenda>) arrayList1);
      Voluntario voluntario0 = new Voluntario("", "", "", "", false, (-813.81835), 10.867325, localDate0, 0.0, arrayList1, 990.6098965, (-3053), false, 100, (-3053));
      bDVoluntarios1.updateVoluntario(voluntario0, 2636L);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      bDVoluntarios2.toString();
      bDVoluntarios2.printVoluntarioLoja(loja1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.add(voluntario0);
      bDVoluntarios0.existeEnc("LinhaEncomenda");
      bDVoluntarios0.tryLogin("LinhaEncomenda", " sr.");
      Loja loja0 = new Loja();
      voluntario0.removeEncomenda(" sr.");
      loja0.equals((Object) null);
      bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        bDVoluntarios0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("rckP6_,g{v):wLuP");
      bDVoluntarios0.setCodigos(linkedHashSet0);
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.setVoluntarios(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = ")-\\u!=:>7V/ ";
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      try { 
        bDVoluntarios0.getEmail(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      bDVoluntarios0.setVoluntarios(hashMap0);
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.updateVoluntario(voluntario0, 1.0);
      bDVoluntarios0.toString();
      Voluntario voluntario1 = new Voluntario();
      voluntario1.setTypeUser("2h+yWYvOH");
      bDVoluntarios0.existe(voluntario1);
      bDVoluntarios0.existeEmail("");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.tryLogin((String) null, (String) null);
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario((Voluntario) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.getCodigos();
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = "SETF@Sje";
      // Undeclared exception!
      try { 
        bDVoluntarios0.setVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios();
      bDVoluntarios1.equals(bDVoluntarios2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio_acao((-1854.1966452224));
      bDVoluntarios2.existe(voluntario0);
      bDVoluntarios1.existeCodigo("");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.setVoluntarios(map0);
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.equals((Object) null);
      bDVoluntarios0.getVoluntarios();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      // Undeclared exception!
      try { 
        bDVoluntarios1.setVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Object object0 = new Object();
      bDVoluntarios0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      bDVoluntarios0.setCodigos(set0);
      bDVoluntarios0.existeEnc("]x{?&m+4*");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.existeCodigo(" || RATE --> ");
      bDVoluntarios0.getCodigos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, linkedHashSet0);
      bDVoluntarios2.tryLogin("Data de emiss\u00E3o da encomenda: ", "");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((BDVoluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.toString();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      bDVoluntarios1.tryLogin("Total de Voluntarios: \n{}", "Total de Voluntarios: \n{}");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.existeEmail(" KMS: ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.existeEnc("Total de Voluntarios: ");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      HashMap<String, Voluntario> hashMap1 = new HashMap<String, Voluntario>(hashMap0);
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios(hashMap1, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      bDVoluntarios2.toString();
      try { 
        bDVoluntarios2.getEmail("Produtos: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      Loja loja0 = new Loja();
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      loja0.setEncomendas_recebidas(arrayList0);
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios1.voluntariosDisponíveis2(loja0, voluntario0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      voluntario0.setPassword("Total de Voluntarios: ");
      voluntario0.toString();
      BDVoluntarios bDVoluntarios3 = new BDVoluntarios(bDVoluntarios2);
      bDVoluntarios2.printVoluntario();
      bDVoluntarios3.toString();
      bDVoluntarios3.printVoluntarioLoja(loja0);
      bDVoluntarios1.add(voluntario0);
      bDVoluntarios2.printVoluntario();
      Voluntario voluntario1 = null;
      // Undeclared exception!
      try { 
        bDVoluntarios0.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      bDVoluntarios0.printVoluntarioLoja(loja1);
      String string0 = "RjZQ";
      try { 
        bDVoluntarios0.encontraEnc("RjZQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDisponíveisMed((Loja) null, utilizador0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, set0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios1.voluntariosDisponíveis(loja0, utilizador0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      try { 
        bDVoluntarios0.getEmail((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      bDVoluntarios1.voluntariosDisponíveis2(loja1, (Voluntario) null);
      bDVoluntarios0.getCodigos();
      bDVoluntarios1.getVoluntarios();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setNome("Efetuou encomendas em ");
      bDVoluntarios0.updateVoluntario(voluntario0, (-3632.392227));
      bDVoluntarios0.existe(voluntario0);
      bDVoluntarios0.printVoluntario();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      // Undeclared exception!
      try { 
        bDVoluntarios0.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Locale locale0 = Locale.FRENCH;
      String string0 = " ";
      Voluntario voluntario0 = new Voluntario();
      hashMap0.put(" ", voluntario0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.containsAll(set0);
      Locale.lookup(arrayList0, (Collection<Locale>) null);
      bDVoluntarios0.updateVoluntario(voluntario0, (-1830.39307));
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      bDVoluntarios1.tryLogin(" ", " ");
      String string1 = "&]|(zg5M[IDrA#";
      try { 
        bDVoluntarios1.getEmail("&]|(zg5M[IDrA#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      bDVoluntarios0.equals(voluntario3);
      bDVoluntarios0.getCodigos();
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      bDVoluntarios0.clone();
      Utilizador utilizador0 = new Utilizador("e#7}0V:'-1Jc=YRd-", "Ski.6^", "Login feito com sucesso", "e#7}0V:'-1Jc=YRd-", (-1.0), 813.8909051890051, arrayList0);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.toString();
      bDVoluntarios0.printVoluntario();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.existe(voluntario0);
      bDVoluntarios0.existeEmail("Total de Voluntarios: \n{}");
      bDVoluntarios0.existe(voluntario0);
      bDVoluntarios0.toString();
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.printEncomendasPorEntregar();
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador0.getEncomendas();
      utilizador0.printEncomendasRecebidas();
      utilizador1.setLongitude(2827.012911183817);
      arrayList0.iterator();
      Loja loja0 = new Loja("", "Total de Voluntarios: \n{}", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", 2392.0, 2392.0, 2392.0, arrayList0, (-75));
      bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      Loja loja1 = loja0.clone();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.existeEnc("Total de Voluntarios: \n{}");
      bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      utilizador1.setCodigo("Total de Voluntarios: \n{}");
      bDVoluntarios0.getCodigos();
      bDVoluntarios0.getCodigos();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.printVoluntarioLoja(loja0);
      utilizador1.toString();
      bDVoluntarios0.toString();
      bDVoluntarios0.tryLogin("~", "");
      bDVoluntarios0.printVoluntarioLoja(loja1);
      bDVoluntarios0.existeCodigo("N\u00E3o existem encomendas por entregar\n");
      bDVoluntarios0.existeEmail("Loja: ");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.toString();
      bDVoluntarios0.printVoluntario();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.existe(voluntario0);
      bDVoluntarios0.existeEmail("Total de Voluntarios: \n{}");
      bDVoluntarios0.existe(voluntario0);
      bDVoluntarios0.toString();
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.printEncomendasPorEntregar();
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador0.getEncomendas();
      utilizador0.printEncomendasRecebidas();
      utilizador1.setLongitude(2827.012911183817);
      arrayList0.iterator();
      Loja loja0 = new Loja("", "Total de Voluntarios: \n{}", "e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-", 2392.0, 2392.0, 2392.0, arrayList0, (-75));
      bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      Loja loja1 = loja0.clone();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.existeEnc("Total de Voluntarios: \n{}");
      bDVoluntarios0.voluntariosDisponíveis2(loja0, voluntario0);
      utilizador1.setCodigo("Total de Voluntarios: \n{}");
      bDVoluntarios0.getCodigos();
      bDVoluntarios0.getCodigos();
      bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.printVoluntario();
      utilizador1.toString();
      bDVoluntarios0.toString();
      bDVoluntarios0.tryLogin("~", "");
      bDVoluntarios0.printVoluntarioLoja(loja1);
      bDVoluntarios0.existeCodigo("N\u00E3o existem encomendas por entregar\n");
      bDVoluntarios0.existeEmail("Loja: ");
      System.setCurrentTimeMillis((-75));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.getCodigos();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Loja loja0 = new Loja("", (String) null, "E$h2Oe.9iZ3", (String) null, (-1.0), (-1.0), (-2128.6009), arrayList0, 2444);
      Loja loja1 = new Loja(loja0);
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      bDVoluntarios0.voluntariosDisponíveisMed(loja1, utilizador1);
      try { 
        bDVoluntarios0.getEmail("E$h2Oe.9iZ3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = bDVoluntarios2.toString();
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertNotNull(string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      BDVoluntarios bDVoluntarios3 = bDVoluntarios1.clone();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertNotNull(bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      Voluntario voluntario0 = new Voluntario();
      assertNotNull(voluntario0);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      
      bDVoluntarios3.updateVoluntario2(voluntario0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(linkedHashSet0.contains(string0));
      
      bDVoluntarios1.add(voluntario0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(linkedHashSet0.contains(string0));
      
      Loja loja0 = new Loja();
      assertNotNull(loja0);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      
      Loja loja1 = new Loja(loja0);
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(arrayList0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Loja loja2 = new Loja("Total de Voluntarios: \n{}", "Total de Voluntarios: \n{}", "@Bv\"8DRa0YKS y4x", "Efetuou encomendas em ", 0.0, 0.0, (-755.83398377992), arrayList0, (-2590));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertNotNull(loja2);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Loja", loja2.getTypeUser());
      assertEquals("@Bv\"8DRa0YKS y4x", loja2.getCodigo());
      assertEquals("Total de Voluntarios: \n{}", loja2.getPassword());
      assertEquals("Efetuou encomendas em ", loja2.getNome());
      assertEquals("Total de Voluntarios: \n{}", loja2.getEmail());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals((-2590), loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      
      String string1 = bDVoluntarios3.printVoluntarioLoja(loja2);
      assertEquals(" --->  RATE --> 0.0 KMS: 0.0\n", string1);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertTrue(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Loja", loja2.getTypeUser());
      assertEquals("@Bv\"8DRa0YKS y4x", loja2.getCodigo());
      assertEquals("Total de Voluntarios: \n{}", loja2.getPassword());
      assertEquals("Efetuou encomendas em ", loja2.getNome());
      assertEquals("Total de Voluntarios: \n{}", loja2.getEmail());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals((-2590), loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertFalse(linkedHashSet0.contains(string0));
      
      String string2 = bDVoluntarios1.printVoluntarioLoja(loja0);
      assertEquals(" --->  RATE --> 0.0 KMS: 0.0\n", string2);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertTrue(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertFalse(linkedHashSet0.contains(string0));
      
      try { 
        bDVoluntarios3.encontraEnc(" --->  RATE --> 0.0 KMS: 0.0\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotNull(bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = bDVoluntarios2.toString();
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotNull(string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      
      BDVoluntarios bDVoluntarios3 = bDVoluntarios1.clone();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      
      Voluntario voluntario0 = new Voluntario();
      assertNotNull(voluntario0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      
      bDVoluntarios3.updateVoluntario2(voluntario0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(linkedHashSet0.contains(string0));
      
      bDVoluntarios1.add(voluntario0);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(linkedHashSet0.contains(string0));
      
      Voluntario voluntario1 = bDVoluntarios1.tryLogin("A6}nOfu6C", "iE}l?G{)['T`Far");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertNull(voluntario1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      
      boolean boolean0 = bDVoluntarios1.existeEnc("y");
      assertFalse(boolean0);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      
      BDVoluntarios bDVoluntarios4 = bDVoluntarios3.clone();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios3.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios3.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios4.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios4.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios4.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios4.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios4);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios3, bDVoluntarios4);
      assertNotSame(bDVoluntarios3, bDVoluntarios0);
      assertNotSame(bDVoluntarios3, bDVoluntarios1);
      assertNotSame(bDVoluntarios3, bDVoluntarios2);
      assertNotSame(bDVoluntarios4, bDVoluntarios1);
      assertNotSame(bDVoluntarios4, bDVoluntarios2);
      assertNotSame(bDVoluntarios4, bDVoluntarios0);
      assertNotSame(bDVoluntarios4, bDVoluntarios3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      
      String string1 = bDVoluntarios1.toString();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios4));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios4));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string1));
      
      boolean boolean1 = bDVoluntarios2.existeEmail((String) null);
      assertFalse(boolean1);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios4));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios4));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios4));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios2, bDVoluntarios4);
      assertNotSame(bDVoluntarios2, bDVoluntarios3);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string1));
      
      boolean boolean2 = bDVoluntarios2.equals((Object) null);
      assertFalse(boolean2);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios4));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios4));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios4));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios3));
      assertFalse(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios4);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios3);
      assertNotSame(bDVoluntarios2, bDVoluntarios4);
      assertNotSame(bDVoluntarios2, bDVoluntarios3);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string1));
      
      try { 
        bDVoluntarios1.encontraEnc("#EhO!E,Q8{-tK/D!ck");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      Voluntario voluntario2 = voluntario1.clone();
      bDVoluntarios0.add(voluntario1);
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-");
      assertNotNull(voluntario3);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      bDVoluntarios0.getEmail("e#7}0V:'-1Jc=YRd-");
      boolean boolean0 = bDVoluntarios0.equals(voluntario3);
      Set<String> set1 = bDVoluntarios0.getCodigos();
      assertEquals(602, set1.size());
      
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      voluntario2.setMinutosDeEspera(0);
      ArrayList<Encomenda> arrayList0 = loja1.getEncomendas_recebidas();
      Loja loja2 = new Loja("e#7}0V:'-1Jc=YRd-", "e#7}0V:'-1Jc=YRd-", "Ski.6^", "Ski.6^", (-1.0), (-2020L), (-2020L), arrayList0, 875);
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDisponíveis2(loja2, voluntario0);
      assertFalse(list1.contains(voluntario3));
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      String string0 = bDVoluntarios1.printVoluntario();
      assertEquals("e#7}0V:'-1Jc=YRd- ---> e#7}0V:'-1Jc=YRd- || RATE --> -2020.0\n", string0);
      
      System.setCurrentTimeMillis(0L);
      bDVoluntarios0.existeEnc("e#7}0V:'-1Jc=YRd- ---> e#7}0V:'-1Jc=YRd- || RATE --> -2020.0\n");
      bDVoluntarios0.printVoluntarioLoja(loja1);
      String string1 = bDVoluntarios1.printVoluntarioLoja(loja0);
      assertEquals("", string1);
      
      boolean boolean1 = bDVoluntarios0.existeEnc("~cbnK~u)");
      assertTrue(boolean1 == boolean0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.getVoluntarios();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      String string0 = "C\u00F3digo do utilizador: ";
      // Undeclared exception!
      try { 
        Charset.isSupported("C\u00F3digo do utilizador: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // C\u00F3digo do utilizador: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, set0);
      String string0 = "t7t9h'M:";
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2020L));
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("t7t9h'M:", "t7t9h'M:", "e#7}0Vo'-dJc=YRd-", "", true, (-1.0), (-1.0), localDate0, (-1.0), list0, (-2020L), 0, false, 0, 0);
      bDVoluntarios0.add(voluntario1);
      bDVoluntarios0.tryLogin("e#7}0Vo'-dJc=YRd-", "e#7}0Vo'-dJc=YRd-");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      try { 
        bDVoluntarios0.getEmail("e#7}0Vo'-dJc=YRd-");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      String string0 = "*^@nrX%:<[p-Y";
      utilizador0.toString();
      bDVoluntarios0.existeCodigo(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n");
      utilizador0.setEmail("*^@nrX%:<[p-Y");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.clone();
      bDVoluntarios0.voluntariosDisponíveisMed((Loja) null, utilizador0);
      bDVoluntarios0.getVoluntarios();
      try { 
        bDVoluntarios0.encontraEnc("*^@nrX%:<[p-Y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }
}
