/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:14:48 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDProdutos_ESTest extends BDProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 50l", "Eyg~jG&ZbidtU{Zl|`5", (-1.0), (-1.0));
      hashMap0.put("Saco de lixo 50l", linhaEncomenda0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("L7gq+s1FX>E*@|T>", "4T2^^fP8vpoHYJv8|", 1.0, 1.0);
      hashMap0.clone();
      hashMap0.put("Saco de lixo 30l", (LinhaEncomenda) null);
      hashMap0.putIfAbsent("L7gq+s1FX>E*@|T>", linhaEncomenda1);
      // Undeclared exception!
      try { 
        bDProdutos0.getProdMedicos(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      bDProdutos0.getCodigos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Alcool", "Total de Produtos: ", 0.0, 0.0);
      linhaEncomenda0.setQuantidade(0.0);
      linhaEncomenda0.setDescricao("Alcool");
      hashMap0.put("Alcool", linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      bDProdutos0.toString();
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdMedicos(map0);
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.toString();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      BDProdutos bDProdutos2 = bDProdutos1.clone();
      bDProdutos1.getProdMedicos(map1);
      bDProdutos1.getProdutos();
      bDProdutos2.listProdutosMedicos();
      bDProdutos2.clone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getProdMedicos(hashMap0);
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      Set<String> set0 = bDProdutos1.getCodigos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      BDProdutos bDProdutos2 = new BDProdutos(hashMap0, set0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda((String) null, "Alcool", (-1101.153651578), (-1101.153651578));
      bDProdutos0.add(linhaEncomenda2);
      bDProdutos2.equals(map0);
      bDProdutos1.getCodigos();
      linhaEncomenda1.setQuantidade((-2246.618754363379));
      linhaEncomenda1.setDescricao(" ");
      linhaEncomenda1.setPreco(2321.251336447575);
      bDProdutos2.add(linhaEncomenda1);
      bDProdutos0.getCodigos();
      bDProdutos2.listProdutosNormais();
      bDProdutos1.setProdutos(map0);
      bDProdutos2.listProdutosMedicos();
      bDProdutos0.getProdutos();
      bDProdutos0.getCodigos();
      bDProdutos2.add(linhaEncomenda1);
      bDProdutos1.existe("LISTA DE PRODUTOS M\u00C9DICOS\n");
      bDProdutos2.getCodigos();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.listProdutosMedicos();
      try { 
        bDProdutos0.existeProd("_lji");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getCodigos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao(".");
      linhaEncomenda0.setDescricao(".");
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.getCodigos();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      Map<String, LinhaEncomenda> map0 = bDProdutos1.getProdutos();
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdMedicos(map0);
      BDProdutos bDProdutos2 = bDProdutos1.clone();
      bDProdutos2.setProdutos(map1);
      bDProdutos1.getProdMedicos(map1);
      bDProdutos1.getCodigos();
      bDProdutos1.getCodigos();
      bDProdutos1.listProdutosMedicos();
      bDProdutos0.existe(".");
      bDProdutos0.toString();
      bDProdutos1.clone();
      bDProdutos1.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos0.setProdutos(hashMap0);
      BDProdutos bDProdutos1 = new BDProdutos(hashMap0, set0);
      bDProdutos1.equals(bDProdutos0);
      bDProdutos1.setCodigos(set0);
      bDProdutos1.getProdutos();
      bDProdutos0.getCodigos();
      bDProdutos1.getProdMedicos(hashMap0);
      bDProdutos1.equals(bDProdutos1);
      BDProdutos bDProdutos2 = bDProdutos1.clone();
      bDProdutos2.clone();
      bDProdutos0.getProdutos();
      bDProdutos2.toString();
      try { 
        bDProdutos0.existeProd("Desinfetante");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      BiConsumer<Object, LinhaEncomenda> biConsumer0 = (BiConsumer<Object, LinhaEncomenda>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Set<String> set0 = bDProdutos1.getCodigos();
      BDProdutos bDProdutos2 = new BDProdutos(hashMap0, set0);
      bDProdutos1.getProdutos();
      bDProdutos2.toString();
      Map<String, LinhaEncomenda> map0 = bDProdutos2.getProdMedicos(hashMap0);
      BDProdutos bDProdutos3 = bDProdutos2.clone();
      bDProdutos1.getCodigos();
      bDProdutos2.toString();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao("Total de Produtos: \n{}");
      bDProdutos2.add(linhaEncomenda0);
      BDProdutos bDProdutos4 = bDProdutos2.clone();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      bDProdutos4.equals(linhaEncomenda1);
      bDProdutos1.setProdutos(map0);
      bDProdutos4.existe("Total de Produtos: \n{}");
      bDProdutos4.listProdutosMedicos();
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda();
      bDProdutos3.add(linhaEncomenda2);
      bDProdutos0.setCodigos(set0);
      bDProdutos3.getProdMedicos(map0);
      bDProdutos1.listProdutosMedicos();
      bDProdutos1.getProdutos();
      bDProdutos3.getCodigos();
      bDProdutos4.existe("TbX");
      bDProdutos2.listProdutosMedicos();
      bDProdutos4.getCodigos();
      bDProdutos1.listProdutosNormais();
      bDProdutos0.getProdutos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      BDProdutos bDProdutos1 = new BDProdutos(map0, linkedHashSet0);
      bDProdutos1.getProdutos();
      BDProdutos bDProdutos2 = new BDProdutos(bDProdutos1);
      bDProdutos2.getProdutos();
      bDProdutos2.setCodigos(linkedHashSet0);
      bDProdutos0.existe("LinhaEncomenda");
      bDProdutos1.getProdutos();
      bDProdutos0.setProdutos(map0);
      bDProdutos2.getCodigos();
      bDProdutos0.listProdutosMedicos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      bDProdutos0.getCodigos();
      linhaEncomenda0.setCodigo("Desinfetante");
      linhaEncomenda0.setQuantidade(1582.0);
      bDProdutos0.listProdutosNormais();
      bDProdutos0.add(linhaEncomenda0);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.put("Desinfetante", linhaEncomenda1);
      bDProdutos0.getProdMedicos(hashMap0);
      bDProdutos0.getProdutos();
      // Undeclared exception!
      try { 
        bDProdutos0.add((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 50l", "Eyg~jG&ZbidtU{Zl|`5", (-1.0), (-1.0));
      linhaEncomenda0.setPreco(1.0);
      hashMap0.put("Saco de lixo 50l", linhaEncomenda0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("L7gq+s1FX>E*@|T>", "4T2^^fP8vpoHYJv8|", 1.0, 1.0);
      hashMap0.clone();
      hashMap0.putIfAbsent("L7gq+s1FX>E*@|T>", linhaEncomenda1);
      bDProdutos0.getProdMedicos(hashMap0);
      bDProdutos0.clone();
      bDProdutos0.getCodigos();
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.getCodigos();
      bDProdutos0.listProdutosNormais();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getProdMedicos(hashMap0);
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      Set<String> set0 = bDProdutos1.getCodigos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      BDProdutos bDProdutos2 = new BDProdutos(hashMap0, set0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda((String) null, "Alcool", (-1101.153651578), (-1101.153651578));
      bDProdutos0.add(linhaEncomenda2);
      bDProdutos2.equals(map0);
      bDProdutos1.getCodigos();
      linhaEncomenda1.setQuantidade((-2246.618754363379));
      linhaEncomenda1.setDescricao(" ");
      linhaEncomenda1.setPreco(2321.251336447575);
      bDProdutos2.add(linhaEncomenda1);
      bDProdutos0.getCodigos();
      bDProdutos2.listProdutosNormais();
      bDProdutos1.setProdutos(map0);
      bDProdutos2.listProdutosMedicos();
      bDProdutos0.getProdutos();
      bDProdutos0.getCodigos();
      bDProdutos1.existe("LISTA DE PRODUTOS M\u00C9DICOS\n");
      bDProdutos2.getCodigos();
      bDProdutos0.listProdutosNormais();
      try { 
        bDProdutos0.existeProd("_lji");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.listProdutosNormais();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        bDProdutos1.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos0.setCodigos(set0);
      bDProdutos0.toString();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos1.setProdutos(map0);
      bDProdutos1.getProdMedicos(map0);
      bDProdutos1.setCodigos(set0);
      bDProdutos0.getCodigos();
      // Undeclared exception!
      try { 
        bDProdutos1.add((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getCodigos();
      String string0 = "Quantidade: ";
      bDProdutos0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Quantidade: ", "Quantidade: ", 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      bDProdutos0.equals(linhaEncomenda0);
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.existeProd("Quantidade: ");
      linhaEncomenda1.setDescricao("Quantidade: ");
      try { 
        bDProdutos0.existeProd("#[*mwrROY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "XFuG2bn\"gCI)QZ7vi.", 157.4410289, 157.4410289);
      linhaEncomenda0.setCodigo("");
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.equals("");
      bDProdutos0.listProdutosNormais();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.setProdutos(map0);
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.toString();
      bDProdutos0.equals((Object) null);
      bDProdutos0.equals("XFuG2bn\"gCI)QZ7vi.");
      bDProdutos0.getProdutos();
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.listProdutosMedicos();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      bDProdutos1.listProdutosNormais();
      bDProdutos1.listProdutosNormais();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos0.setCodigos(set0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      linkedHashSet0.add("Pre\u00E7o: ");
      bDProdutos0.setCodigos(linkedHashSet0);
      bDProdutos0.listProdutosMedicos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      bDProdutos1.clone();
      // Undeclared exception!
      try { 
        bDProdutos0.getProdMedicos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      bDProdutos1.equals(bDProdutos0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDProdutos bDProdutos0 = new BDProdutos(hashMap0, linkedHashSet0);
      bDProdutos0.setProdutos(hashMap0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>(1353, 1353);
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("!f\"^:Gb`:>[g*pDG", "!f\"^:Gb`:>[g*pDG", 1353, 1825.684269);
      linhaEncomenda0.setPreco(1825.684269);
      hashMap0.put("!f\"^:Gb`:>[g*pDG", linhaEncomenda0);
      BDProdutos bDProdutos1 = new BDProdutos(hashMap0, set0);
      BDProdutos bDProdutos2 = new BDProdutos(bDProdutos1);
      Map<String, LinhaEncomenda> map0 = bDProdutos2.getProdutos();
      bDProdutos1.getProdMedicos(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDProdutos bDProdutos0 = new BDProdutos(hashMap0, linkedHashSet0);
      Set<String> set0 = bDProdutos0.getCodigos();
      BDProdutos bDProdutos1 = new BDProdutos(hashMap0, set0);
      bDProdutos1.existe("?/;KG^`T)5j.uaF0X/");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(",");
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((Map<String, LinhaEncomenda>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getCodigos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("8;>jZ", "8;>jZ", 0.0, 0.0);
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.getCodigos();
      // Undeclared exception!
      try { 
        bDProdutos0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.listProdutosNormais();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.toString();
      bDProdutos0.equals("Total de Produtos: \n{}");
      bDProdutos0.getProdMedicos(map0);
      try { 
        bDProdutos0.existeProd("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((BDProdutos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Object object0 = new Object();
      bDProdutos0.toString();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("~~ZT[keA>=", "~~ZT[keA>=", 0.0, 0.0);
      linhaEncomenda0.clone();
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos0.equals(object0);
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos1.toString();
      bDProdutos0.listProdutosMedicos();
      bDProdutos1.listProdutosNormais();
      bDProdutos1.setCodigos(set0);
      bDProdutos1.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      hashMap0.put("", linhaEncomenda0);
      bDProdutos0.getProdMedicos(hashMap0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.existe("s[]yGuokUh");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      BDProdutos bDProdutos1 = new BDProdutos(map0, set0);
      BDProdutos bDProdutos2 = new BDProdutos(bDProdutos1);
      bDProdutos2.listProdutosMedicos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDProdutos bDProdutos0 = new BDProdutos(hashMap0, linkedHashSet0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      bDProdutos0.add(linhaEncomenda0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      try { 
        bDProdutos0.existeProd("%T$V%;4VKb`Kb|~W|6L");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Object object0 = new Object();
      bDProdutos0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.toString();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("~~ZT[keA>=", "~~ZT[keA>=", 0.0, 0.0);
      bDProdutos0.add(linhaEncomenda0);
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos1.toString();
      String string0 = bDProdutos1.listProdutosNormais();
      assertEquals("LISTA DE PRODUTOS\n--> ~~ZT[keA>=\n", string0);
      
      bDProdutos1.setCodigos(set0);
      String string1 = bDProdutos1.toString();
      assertEquals("Total de Produtos: \n{~~ZT[keA>==\nC\u00F3digo de produto: ~~ZT[keA>=\nProduto: ~~ZT[keA>=\nQuantidade: 0.0\nPre\u00E7o: 0.0\n}", string1);
      
      String string2 = bDProdutos1.listProdutosMedicos();
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.getProdMedicos(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((BDProdutos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("vabE!gr!l[ETC(oO", "LinhaEncomenda", 0.0, 652.1009);
      bDProdutos0.listProdutosNormais();
      linhaEncomenda0.clone();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      hashMap0.put("Saco de lixo 50l", linhaEncomenda1);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      Set<String> set0 = bDProdutos0.getCodigos();
      BDProdutos bDProdutos1 = new BDProdutos(map0, set0);
      BDProdutos bDProdutos2 = new BDProdutos(bDProdutos1);
      bDProdutos1.toString();
      bDProdutos2.setCodigos(set0);
      bDProdutos2.listProdutosNormais();
      bDProdutos1.getProdMedicos(hashMap0);
      bDProdutos2.toString();
      try { 
        bDProdutos2.existeProd("[$c");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Saco de lixo 50l", "Eyg~jG&ZbidtU{Zl|`5", (-1.0), (-1.0));
      hashMap0.put("Saco de lixo 50l", linhaEncomenda0);
      hashMap0.put("--> ", (LinhaEncomenda) null);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("L7gq+s1FX>E*@|T>", "4T2^^fP8vpoHYJv8|", 1.0, 1.0);
      hashMap0.clone();
      hashMap0.putIfAbsent("L7gq+s1FX>E*@|T>", linhaEncomenda1);
      bDProdutos0.getProdMedicos(hashMap0);
      bDProdutos0.getCodigos();
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.listProdutosNormais();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      bDProdutos0.equals(bDProdutos0);
      bDProdutos0.getProdMedicos(map0);
      try { 
        bDProdutos0.existeProd("Alcool");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos0.setProdutos(hashMap0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      bDProdutos0.add(linhaEncomenda0);
      BiFunction<String, Object, LinhaEncomenda> biFunction0 = (BiFunction<String, Object, LinhaEncomenda>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      BDProdutos bDProdutos1 = new BDProdutos(hashMap0, set0);
      bDProdutos1.setCodigos(set0);
      bDProdutos1.getProdMedicos(hashMap0);
      bDProdutos0.existe("|d?&(euxPB3[_>t");
      bDProdutos0.toString();
      try { 
        bDProdutos1.existeProd("|d?&(euxPB3[_>t");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.getProdMedicos(hashMap0);
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdMedicos(hashMap0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda((String) null, "Alcool", (-1101.153651578), (-1101.153651578));
      bDProdutos0.add(linhaEncomenda2);
      bDProdutos1.getCodigos();
      linhaEncomenda1.setQuantidade((-2246.618754363379));
      linhaEncomenda1.setDescricao(" ");
      linhaEncomenda1.setPreco(2321.251336447575);
      bDProdutos0.getCodigos();
      bDProdutos1.setProdutos(map0);
      bDProdutos0.getProdutos();
      bDProdutos0.getCodigos();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.listProdutosMedicos();
      try { 
        bDProdutos0.existeProd("_lji");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.listProdutosNormais();
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      bDProdutos1.getProdMedicos(map0);
      bDProdutos0.setProdutos(map0);
      bDProdutos0.existe("LISTA DE PRODUTOS\n");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      bDProdutos0.add(linhaEncomenda0);
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdMedicos(map0);
      bDProdutos0.existe("LISTA DE PRODUTOS\n");
      bDProdutos0.getCodigos();
      bDProdutos1.existe("LISTA DE PRODUTOS\n");
      bDProdutos1.equals("LISTA DE PRODUTOS\n");
      bDProdutos0.equals(map1);
      Map<String, LinhaEncomenda> map2 = bDProdutos1.getProdMedicos(map1);
      bDProdutos1.getCodigos();
      bDProdutos1.equals(map2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.listProdutosMedicos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      BDProdutos bDProdutos1 = new BDProdutos(map0, set0);
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdutos();
      bDProdutos1.getCodigos();
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdMedicos(map1);
      bDProdutos1.setCodigos(set0);
      BDProdutos bDProdutos2 = new BDProdutos(map2, set0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("k", "[Hu0<]J>'B09B)oe", 2186.64136, 2186.64136);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      bDProdutos1.add(linhaEncomenda1);
      BDProdutos bDProdutos3 = bDProdutos2.clone();
      bDProdutos2.listProdutosMedicos();
      bDProdutos2.listProdutosNormais();
      bDProdutos0.setCodigos(set0);
      bDProdutos2.getProdMedicos(map1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.parallelStream();
      bDProdutos3.clone();
      bDProdutos2.setCodigos(linkedHashSet0);
      linkedHashSet0.add("=1aY;7FbfV");
      boolean boolean0 = bDProdutos3.equals(bDProdutos0);
      assertTrue(boolean0);
      
      bDProdutos1.listProdutosNormais();
      bDProdutos2.setCodigos(linkedHashSet0);
      bDProdutos3.getProdutos();
      bDProdutos3.listProdutosNormais();
      BDProdutos bDProdutos4 = bDProdutos2.clone();
      bDProdutos3.getCodigos();
      bDProdutos0.clone();
      bDProdutos4.getProdutos();
      BDProdutos bDProdutos5 = bDProdutos3.clone();
      bDProdutos2.listProdutosNormais();
      bDProdutos1.toString();
      boolean boolean1 = bDProdutos5.existe("LISTA DE PRODUTOS\n");
      assertFalse(bDProdutos2.equals((Object)bDProdutos1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      bDProdutos1.clone();
      bDProdutos1.clone();
      bDProdutos0.equals((Object) null);
      bDProdutos0.equals(bDProdutos1);
      String string0 = null;
      try { 
        bDProdutos0.existeProd((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      bDProdutos0.getProdutos();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.getProdMedicos(hashMap0);
      bDProdutos0.listProdutosMedicos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("LISTA DE PRODUTOS M\u00C9DICOS\n", "{;<$eZ+Z?^O", 0.0, 0.0);
      bDProdutos0.add(linhaEncomenda0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linkedHashSet0.contains(linhaEncomenda1);
      linkedHashSet0.add("LISTA DE PRODUTOS M\u00C9DICOS\n");
      bDProdutos0.setCodigos(linkedHashSet0);
      hashMap0.put("lP9<,XBjv(3a", linhaEncomenda0);
      bDProdutos0.existe("{;<$eZ+Z?^O");
      bDProdutos0.existeProd("{;<$eZ+Z?^O");
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.add(linhaEncomenda0);
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.getProdMedicos(map0);
      HashMap<String, LinhaEncomenda> hashMap1 = new HashMap<String, LinhaEncomenda>();
      // Undeclared exception!
      try { 
        bDProdutos0.add((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      Map<String, LinhaEncomenda> map0 = bDProdutos1.getProdutos();
      bDProdutos0.equals(map0);
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdMedicos(map0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("3>", "3>", 0.0, 0.0);
      bDProdutos0.setProdutos(map1);
      linhaEncomenda0.clone();
      bDProdutos0.equals(linhaEncomenda0);
      Map<String, LinhaEncomenda> map2 = bDProdutos1.getProdutos();
      BDProdutos bDProdutos2 = new BDProdutos();
      bDProdutos2.getProdMedicos(map0);
      bDProdutos1.equals(map2);
      bDProdutos1.toString();
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      bDProdutos0.add(linhaEncomenda0);
      bDProdutos1.existe("");
      bDProdutos0.toString();
      bDProdutos0.getCodigos();
      bDProdutos0.listProdutosMedicos();
      bDProdutos1.listProdutosNormais();
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
  }
}
