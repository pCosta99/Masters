// Modelo do jantar dos filósofos

// As "coisas" à volta da mesa
abstract sig Coisa {
	prox : one Coisa
}

sig Filosofo extends Coisa {
	// Garfos que cada filósofo tem na mão
	var garfos : set Garfo
}

sig Garfo extends Coisa {}

fact Mesa {
	// A mesa é redonda, ou seja, as coisas formam um anel
	all c : Coisa | Coisa in c.^prox
	// Os garfos e os filósofos estão intercalados
	all c : Coisa | c in Filosofo iff c.prox in Garfo
	// Há sempre mais do que um garfo
	#Garfo > 1
}

// Especifique os seguintes eventos

// Um filosofo pode comer se já tiver os dois garfos junto a si
// e pousa os garfos depois
pred come [f : Filosofo] {
	some disj g1, g2 : Garfo | g1 + g2 in f.garfos
	garfos' = garfos - (f->Garfo)
}

// Um filósofo pode pegar num dos garfos que estejam
// pousados junto a si
pred pega [f : Filosofo] {
	some g : Garfo | {
		g in f.prox + prox.f
		g not in Filosofo.garfos
		garfos' = garfos + (f->g)
	}
}

// Para além de comer ou pegar em garfos os filósofos podem pensar
pred pensa [f : Filosofo] {
	garfos' = garfos
	prox' = prox
}

fact Comportamento {
	// No inicio os garfos estão todos pousados
	no garfos
	// Depois os filósfos só podem comer, pegar ou pensar
	always (some f : Filosofo | come[f] or pega[f] or pensa[f])
}

// Especifique as seguintes propriedades

assert GarfosNaMao {
	// O mesmo garfo nunca pode estar na mão de dois filósofos
	always (garfos.~garfos in iden)
}
check GarfosNaMao for 6

assert SempreQuePegaCome {
	// Qualquer filósofo que pega num garfo vai conseguir comer
	all f : Filosofo | eventually always pega[f] =>  always eventually come[f]
}
check SempreQuePegaCome for 6

assert SemBloqueio {
	// O sistema não pode bloquear numa situação em só é possível pensar
	always (all f : Filosofo | pensa[f] implies eventually come[f] or pega[f])
}
check SemBloqueio for 6

// Especifique um cenário com 4 filósofos onde todos conseguem comer
run Exemplo {
	all f : Filosofo | eventually come[f]
} for exactly 4 Filosofo, exactly 4 Garfo, exactly 12 steps
