/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:54:06 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparatorUser_ESTest extends ComparatorUser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComparatorUser comparatorUser0 = new ComparatorUser();
      Utilizador utilizador0 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      doReturn((-1768), 0).when(utilizador0).getNumEnc();
      Utilizador utilizador1 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(utilizador1).getNumEnc();
      int int0 = comparatorUser0.compare(utilizador0, utilizador1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComparatorUser comparatorUser0 = new ComparatorUser();
      // Undeclared exception!
      try { 
        comparatorUser0.compare((Utilizador) null, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ComparatorUser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComparatorUser comparatorUser0 = new ComparatorUser();
      Utilizador utilizador0 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      doReturn(1700, 1700).when(utilizador0).getNumEnc();
      int int0 = comparatorUser0.compare(utilizador0, utilizador0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ComparatorUser comparatorUser0 = new ComparatorUser();
      Utilizador utilizador0 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-3433), 0, 0).when(utilizador0).getNumEnc();
      int int0 = comparatorUser0.compare(utilizador0, utilizador0);
      assertEquals(0, int0);
  }
}
