/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 20:53:17 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataBase_ESTest extends DataBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Perfil: \n\n\n(0.0,0.0)\nTempo de espera: 0\nMorada: ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      
      Utilizador utilizador1 = utilizador0.clone();
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0, utilizador1.getNumEnc());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      
      String string0 = utilizador0.toString();
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador2.getNome());
      assertEquals(0, utilizador2.getNumEnc());
      assertEquals("", utilizador2.getPassword());
      assertEquals("", utilizador2.getEmail());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador0));
      
      dataBase0.add((Perfil) utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador2.getNome());
      assertEquals(0, utilizador2.getNumEnc());
      assertEquals("", utilizador2.getPassword());
      assertEquals("", utilizador2.getEmail());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      
      boolean boolean3 = dataBase0.existeUtilizador("e3482");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(utilizador1));
      
      try { 
        dataBase0.gravaEmObjStream("e3482");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("~Qi'nI??");
      assertNull(voluntario0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans(" ]6LsB2zw7B N2,");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      encomenda0.setEnc("j\"r2yljN");
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("j\"r2yljN", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      encomenda0.setEstado((-1));
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("j\"r2yljN", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      encomenda0.preparaEnc();
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("j\"r2yljN", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      encomenda0.setMedicamentos((-1932735281));
      assertEquals("j\"r2yljN", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1932735281), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      dataBase0.addEnc(encomenda0);
      assertEquals("j\"r2yljN", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals((-1932735281), encomenda0.getMedicamentos());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasLoja("");
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertFalse(set1.contains(encomenda0));
      assertNotSame(set1, set0);
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("");
      assertNotNull(set2);
      assertEquals(1, set2.size());
      assertFalse(set2.isEmpty());
      assertFalse(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertTrue(set2.contains(encomenda0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendas();
      assertNotNull(set3);
      assertEquals(5, set3.size());
      assertFalse(set3.isEmpty());
      assertFalse(set3.equals((Object)set2));
      assertFalse(set3.equals((Object)set1));
      assertFalse(set3.equals((Object)set0));
      assertTrue(set3.contains(encomenda0));
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      
      Set<Encomenda> set4 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set4);
      assertEquals(0, set4.size());
      assertTrue(set4.isEmpty());
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set0));
      assertFalse(set4.equals((Object)set3));
      assertFalse(set4.equals((Object)set2));
      assertFalse(set4.contains(encomenda0));
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotSame(set4, set2);
      assertNotSame(set4, set1);
      
      Set<Encomenda> set5 = dataBase0.getEncomendasLoja("");
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      assertTrue(set5.equals((Object)set4));
      assertFalse(set5.equals((Object)set2));
      assertFalse(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set1));
      assertFalse(set5.contains(encomenda0));
      assertNotSame(set5, set2);
      assertNotSame(set5, set0);
      assertNotSame(set5, set3);
      assertNotSame(set5, set4);
      assertNotSame(set5, set1);
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Set<Encomenda> set6 = dataBase0.getEncomendasUser("t9");
      assertNotNull(set6);
      assertTrue(set6.isEmpty());
      assertEquals(0, set6.size());
      assertTrue(set6.equals((Object)set0));
      assertTrue(set6.equals((Object)set5));
      assertTrue(set6.equals((Object)set4));
      assertFalse(set6.equals((Object)set2));
      assertFalse(set6.equals((Object)set3));
      assertTrue(set6.equals((Object)set1));
      assertFalse(set6.contains(encomenda0));
      assertNotSame(set6, set4);
      assertNotSame(set6, set0);
      assertNotSame(set6, set1);
      assertNotSame(set6, set5);
      assertNotSame(set6, set2);
      assertNotSame(set6, set3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("");
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Loja loja0 = dataBase0.getLoja("bqIdGWT b|NF1Gw.#");
      assertNull(loja0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("bqIdGWT b|NF1Gw.#");
      assertNull(utilizador0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("bqIdGWT b|NF1Gw.#");
      assertNull(voluntario0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("e3482");
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendasLoja("byS1jqgW:>rapCLy&");
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertTrue(set3.equals((Object)set1));
      assertFalse(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Set<Encomenda> set4 = dataBase0.getEncomendasTrans("bqIdGWT b|NF1Gw.#");
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      assertFalse(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set1));
      assertNotSame(set4, set0);
      assertNotSame(set4, set2);
      assertNotSame(set4, set3);
      assertNotSame(set4, set1);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      
      dataBase0.addEnc(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      
      dataBase0.addEncAceite("Encomenda nao existe");
      Set<Encomenda> set5 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set1));
      assertFalse(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set4));
      assertFalse(set5.contains(encomenda0));
      assertNotSame(set5, set3);
      assertNotSame(set5, set1);
      assertNotSame(set5, set4);
      assertNotSame(set5, set0);
      assertNotSame(set5, set2);
      
      String string0 = dataBase0.getEncomendaAceite(0);
      assertEquals("Encomenda nao existe", string0);
      assertNotNull(string0);
      
      Empresa empresa0 = dataBase0.getEmpresa("e3482");
      assertNull(empresa0);
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Set<Encomenda> set6 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set6);
      assertFalse(set6.isEmpty());
      assertEquals(1, set6.size());
      assertFalse(set6.equals((Object)set0));
      assertFalse(set6.equals((Object)set2));
      assertFalse(set6.equals((Object)set4));
      assertFalse(set6.equals((Object)set5));
      assertFalse(set6.equals((Object)set3));
      assertFalse(set6.equals((Object)set1));
      assertTrue(set6.contains(encomenda0));
      assertNotSame(set6, set0);
      assertNotSame(set6, set2);
      assertNotSame(set6, set4);
      assertNotSame(set6, set5);
      assertNotSame(set6, set3);
      assertNotSame(set6, set1);
      
      try { 
        dataBase0.getEncomenda("Encomenda nao existe");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("");
      assertNull(voluntario0);
      
      Loja loja0 = dataBase0.getLoja("Utilizador");
      assertNull(loja0);
      
      Empresa empresa1 = dataBase0.getEmpresa("}D37Cju@`+,wMiK_q%u");
      assertNull(empresa1);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      dataBase0.addEncAceite("");
      String string0 = dataBase0.getEncomendaAceite(0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("|JYxfHZfDT^UJUX_sL<");
      assertNull(voluntario0);
      
      Perfil perfil0 = dataBase0.getPerfil("pC'rX9)RZLK<s*GDgSG");
      assertNull(perfil0);
      
      dataBase0.addEncAceite("|%7I^");
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("?wXZMc^I");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasLoja("");
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      
      Ponto2D ponto2D0 = new Ponto2D((-2121.9569155075205), 0.0);
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-2121.9569155075205), ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-2121.9569155075205), ponto2D0.getX(), 0.01);
      assertEquals((-2121.9569155075205), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      
      utilizador0.setLocal(ponto2D1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-2121.9569155075205), ponto2D0.getX(), 0.01);
      assertEquals((-2121.9569155075205), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      
      dataBase0.add(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      
      boolean boolean0 = dataBase0.existeUtilizador("pC'rX9)RZLK<s*GDgSG");
      assertFalse(boolean0);
      
      Loja loja0 = dataBase0.getLoja("t9");
      assertNull(loja0);
      
      Perfil perfil1 = dataBase0.getPerfil("?wXZMc^I");
      assertNull(perfil1);
      
      String string0 = dataBase0.getEncomendaAceite(0);
      assertEquals("|%7I^", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D((-723.675828377807), 0.0);
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-723.675828377807), ponto2D0.getX(), 0.01);
      
      Empresa empresa0 = new Empresa("s", "s", "s", ponto2D0, 0.0, 995, 995, "s", (-994.34227869971), 0.0);
      assertNotNull(empresa0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-723.675828377807), ponto2D0.getX(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(995, empresa0.getVelmed());
      assertEquals("s", empresa0.getPassword());
      assertEquals("s", empresa0.getNif());
      assertEquals(995, empresa0.getLicMedicamentos());
      assertEquals("s", empresa0.getNome());
      assertEquals((-994.34227869971), empresa0.getCustokg(), 0.01);
      assertEquals("s", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      empresa0.setCustokg((-4153.094422267243));
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-723.675828377807), ponto2D0.getX(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(995, empresa0.getVelmed());
      assertEquals((-4153.094422267243), empresa0.getCustokg(), 0.01);
      assertEquals("s", empresa0.getPassword());
      assertEquals("s", empresa0.getNif());
      assertEquals(995, empresa0.getLicMedicamentos());
      assertEquals("s", empresa0.getNome());
      assertEquals("s", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      dataBase0.add(empresa0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals((-723.675828377807), ponto2D0.getX(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(995, empresa0.getVelmed());
      assertEquals((-4153.094422267243), empresa0.getCustokg(), 0.01);
      assertEquals("s", empresa0.getPassword());
      assertEquals("s", empresa0.getNif());
      assertEquals(995, empresa0.getLicMedicamentos());
      assertEquals("s", empresa0.getNome());
      assertEquals("s", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      boolean boolean0 = dataBase0.existeUtilizador("%]8Le");
      assertFalse(boolean0);
      
      Loja loja0 = new Loja();
      assertNotNull(loja0);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      
      Loja loja1 = new Loja(loja0);
      assertNotNull(loja1);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getMorada());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getEmail());
      assertTrue(loja1.equals((Object)loja0));
      
      ponto2D0.setX(2332.3147965);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(2332.3147965, ponto2D0.getX(), 0.01);
      
      Loja loja2 = loja1.clone();
      assertNotNull(loja2);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getMorada());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja2.getMorada());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getTempoEspera());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      loja2.setMorada("");
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getMorada());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja2.getMorada());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getTempoEspera());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      dataBase0.add(loja2);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getMorada());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja2.getMorada());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getTempoEspera());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("s");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Loja loja3 = dataBase0.getLoja("%]8Le");
      assertNull(loja3);
      
      boolean boolean1 = dataBase0.existeUtilizador("%]8Le");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      dataBase0.add((Perfil) loja1);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getMorada());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getMorada());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getEmail());
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      
      dataBase0.add((Perfil) empresa0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(2332.3147965, ponto2D0.getX(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(995, empresa0.getVelmed());
      assertEquals((-4153.094422267243), empresa0.getCustokg(), 0.01);
      assertEquals("s", empresa0.getPassword());
      assertEquals("s", empresa0.getNif());
      assertEquals(995, empresa0.getLicMedicamentos());
      assertEquals("s", empresa0.getNome());
      assertEquals("s", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      Empresa empresa1 = (Empresa)dataBase0.getPerfil("s");
      assertNotNull(empresa1);
      assertEquals("s", empresa1.getNome());
      assertEquals("s", empresa1.getNif());
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(995, empresa1.getVelmed());
      assertEquals("s", empresa1.getEmail());
      assertEquals("s", empresa1.getPassword());
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals((-4153.094422267243), empresa1.getCustokg(), 0.01);
      assertEquals(995, empresa1.getLicMedicamentos());
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa1, empresa0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "1CN-KMk9??k+2|}";
      Loja loja0 = dataBase0.getLoja("1CN-KMk9??k+2|}");
      assertNull(loja0);
      
      String string1 = "S\\>~X[2\\j9@?{`TFL";
      dataBase0.addEncAceite("S>~X[2j9@?{`TFL");
      Perfil perfil0 = dataBase0.getPerfil("RiG LMKDRPN Ed@,s");
      assertNull(perfil0);
      
      Ponto2D ponto2D0 = new Ponto2D((-1.0), (-1.0));
      assertNotNull(ponto2D0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      
      Empresa empresa0 = new Empresa((String) null, "jCf_}7FFojmfLk$cB", "Encomenda nao existe", ponto2D0, (-1.0), 0, 0, "", 1.0, (-1.0));
      assertNotNull(empresa0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      assertEquals("", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertNull(empresa0.getEmail());
      assertEquals("jCf_}7FFojmfLk$cB", empresa0.getNome());
      assertEquals((-1.0), empresa0.getCustokm(), 0.01);
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("Encomenda nao existe", empresa0.getPassword());
      
      dataBase0.add(empresa0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      assertEquals("", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertNull(empresa0.getEmail());
      assertEquals("jCf_}7FFojmfLk$cB", empresa0.getNome());
      assertEquals((-1.0), empresa0.getCustokm(), 0.01);
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("Encomenda nao existe", empresa0.getPassword());
      
      // Undeclared exception!
      try { 
        dataBase0.ordenarUsers((Comparator<Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D((-690.270819439), (-731.7));
      assertNotNull(ponto2D0);
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      ponto2D0.setX((-690.270819439));
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      
      String string0 = "k(";
      Voluntario voluntario0 = dataBase0.getVoluntario("k(");
      assertNull(voluntario0);
      
      Empresa empresa1 = new Empresa("", "", "", ponto2D0, (-340.674), 2273, (-917), "", (-917), 1742.474857833);
      assertNotNull(empresa1);
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      assertEquals((-917), empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNif());
      assertEquals(2273, empresa1.getVelmed());
      assertEquals((-340.674), empresa1.getRaio(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertEquals("", empresa1.getEmail());
      assertEquals((-917.0), empresa1.getCustokg(), 0.01);
      assertEquals(1742.474857833, empresa1.getCustokm(), 0.01);
      
      empresa1.setPassword("");
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      assertEquals((-917), empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNif());
      assertEquals(2273, empresa1.getVelmed());
      assertEquals((-340.674), empresa1.getRaio(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertEquals("", empresa1.getEmail());
      assertEquals((-917.0), empresa1.getCustokg(), 0.01);
      assertEquals(1742.474857833, empresa1.getCustokm(), 0.01);
      
      empresa1.setLocal(ponto2D0);
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      assertEquals((-917), empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNif());
      assertEquals(2273, empresa1.getVelmed());
      assertEquals((-340.674), empresa1.getRaio(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertEquals("", empresa1.getEmail());
      assertEquals((-917.0), empresa1.getCustokg(), 0.01);
      assertEquals(1742.474857833, empresa1.getCustokm(), 0.01);
      
      dataBase0.add(empresa1);
      assertEquals((-731.7), ponto2D0.getY(), 0.01);
      assertEquals((-690.270819439), ponto2D0.getX(), 0.01);
      assertEquals((-917), empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNif());
      assertEquals(2273, empresa1.getVelmed());
      assertEquals((-340.674), empresa1.getRaio(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertEquals("", empresa1.getEmail());
      assertEquals((-917.0), empresa1.getCustokg(), 0.01);
      assertEquals(1742.474857833, empresa1.getCustokm(), 0.01);
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(set2.equals((Object)set0));
      assertFalse(set2.equals((Object)set1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      
      Set<Encomenda> set3 = dataBase0.getEncomendasLoja("=#V_l$0");
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertTrue(set3.equals((Object)set2));
      assertFalse(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      
      // Undeclared exception!
      try { 
        dataBase0.getUtilizador("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Empresa cannot be cast to Utilizador
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Ponto2D ponto2D0 = new Ponto2D((-663.13568), 1977.660032740487);
      assertNotNull(ponto2D0);
      assertEquals((-663.13568), ponto2D0.getX(), 0.01);
      assertEquals(1977.660032740487, ponto2D0.getY(), 0.01);
      
      Ponto2D ponto2D1 = ponto2D0.clone();
      assertNotNull(ponto2D1);
      assertEquals((-663.13568), ponto2D0.getX(), 0.01);
      assertEquals(1977.660032740487, ponto2D0.getY(), 0.01);
      assertEquals(1977.660032740487, ponto2D1.getY(), 0.01);
      assertEquals((-663.13568), ponto2D1.getX(), 0.01);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      
      Utilizador utilizador0 = new Utilizador("", "", "", ponto2D1, (-2399));
      assertNotNull(utilizador0);
      assertEquals((-663.13568), ponto2D0.getX(), 0.01);
      assertEquals(1977.660032740487, ponto2D0.getY(), 0.01);
      assertEquals(1977.660032740487, ponto2D1.getY(), 0.01);
      assertEquals((-663.13568), ponto2D1.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      
      dataBase0.add(utilizador0);
      assertEquals((-663.13568), ponto2D0.getX(), 0.01);
      assertEquals(1977.660032740487, ponto2D0.getY(), 0.01);
      assertEquals(1977.660032740487, ponto2D1.getY(), 0.01);
      assertEquals((-663.13568), ponto2D1.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        dataBase0.getEmpresa("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Empresa
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      dataBase0.addEncAceite("vq$R=YK`n]3\"+z%F1");
      double double0 = dataBase0.totalFaturado("vq$R=YK`n]3\"+z%F1", (LocalDateTime) null);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      // Undeclared exception!
      try { 
        dataBase0.gravaEmObjStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Utilizador utilizador0 = new Utilizador("", "", "", ponto2D0, 0);
      assertNotNull(utilizador0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      
      String string0 = "=K9rHJ6fc5e'UOKMsJ";
      Voluntario voluntario0 = dataBase0.getVoluntario("=K9rHJ6fc5e'UOKMsJ");
      assertNull(voluntario0);
      
      Voluntario voluntario1 = dataBase0.getVoluntario("");
      assertNull(voluntario1);
      
      String string1 = null;
      utilizador0.setPassword((String) null);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertNull(utilizador0.getPassword());
      
      ponto2D0.setX(0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      utilizador0.setLocal(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertNull(utilizador0.getPassword());
      
      dataBase0.add((Perfil) utilizador0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertNull(utilizador0.getPassword());
      
      // Undeclared exception!
      try { 
        dataBase0.getVoluntario("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Voluntario
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "R4n9<$mMTa6hR";
      Empresa empresa0 = dataBase0.getEmpresa("R4n9<$mMTa6hR");
      assertNull(empresa0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("\nProdutos:\n");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        dataBase0.addEnc((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = new Voluntario();
      assertNotNull(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      
      String string0 = "";
      voluntario0.setPassword("");
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      
      dataBase0.add((Perfil) voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      
      dataBase0.add(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string1 = "vI<OG_CZ/\"D59>";
      dataBase0.addEncAceite("vI<OG_CZ/\"D59>");
      Utilizador utilizador0 = dataBase0.getUtilizador("vI<OG_CZ/\"D59>");
      assertNull(utilizador0);
      
      dataBase0.addEncAceite("Y");
      // Undeclared exception!
      try { 
        dataBase0.getLoja("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Voluntario cannot be cast to Loja
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertNotNull(set1);
      assertEquals(4, set1.size());
      assertFalse(set1.isEmpty());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      String string1 = "f  joOH@!ELU2c`^";
      Set<Encomenda> set2 = dataBase0.getEncomendasUser("");
      assertNotNull(set2);
      assertFalse(set2.isEmpty());
      assertEquals(4, set2.size());
      assertFalse(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Loja loja0 = dataBase0.getLoja("f  joOH@!ELU2c`^");
      assertNull(loja0);
      
      try { 
        dataBase0.gravaEmObjStream("f  joOH@!ELU2c`^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      DataBase dataBase1 = new DataBase();
      assertNotNull(dataBase1);
      assertFalse(dataBase1.equals((Object)dataBase0));
      
      Utilizador utilizador0 = dataBase1.getUtilizador("~");
      assertNull(utilizador0);
      assertFalse(dataBase1.equals((Object)dataBase0));
      assertNotSame(dataBase1, dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      double double0 = (-4827.915932);
      Ponto2D ponto2D1 = new Ponto2D((-4827.915932), 787.73);
      assertNotNull(ponto2D1);
      assertEquals((-4827.915932), ponto2D1.getX(), 0.01);
      assertEquals(787.73, ponto2D1.getY(), 0.01);
      assertFalse(ponto2D1.equals((Object)ponto2D0));
      
      double double1 = 5.0;
      // Undeclared exception!
      try { 
        dataBase1.add((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("");
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Loja loja0 = dataBase0.getLoja("bqIdGWT b|NF1Gw.#");
      assertNull(loja0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("bqIdGWT b|NF1Gw.#");
      assertNull(utilizador0);
      
      String string0 = "e3482";
      Voluntario voluntario0 = dataBase0.getVoluntario("bqIdGWT b|NF1Gw.#");
      assertNull(voluntario0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("e3482");
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendasLoja("byS1jqgW:>rapCLy&");
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set1));
      assertFalse(set3.equals((Object)set0));
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      
      boolean boolean0 = dataBase0.existeUtilizador("byS1jqgW:>rapCLy&");
      assertFalse(boolean0);
      
      Set<Encomenda> set4 = dataBase0.getEncomendasTrans("bqIdGWT b|NF1Gw.#");
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      assertFalse(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set1));
      assertNotSame(set4, set1);
      assertNotSame(set4, set2);
      assertNotSame(set4, set0);
      assertNotSame(set4, set3);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      dataBase0.addEnc(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      
      String string1 = "Encomenda nao existe";
      dataBase0.addEncAceite("Encomenda nao existe");
      try { 
        dataBase0.gravaEmObjStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      dataBase0.addEnc(encomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      String string0 = "Tempo de espera: ";
      Utilizador utilizador0 = dataBase0.getUtilizador("Tempo de espera: ");
      assertNull(utilizador0);
      
      String string1 = "O$SANkwHk1ajgS";
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("O$SANkwHk1ajgS");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(encomenda0));
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(5, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertTrue(set1.contains(encomenda0));
      assertNotSame(set1, set0);
      
      Empresa empresa1 = dataBase0.getEmpresa("3J=R2M");
      assertNull(empresa1);
      
      Set<Encomenda> set2 = dataBase0.getEncomendasUser("z@c");
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertFalse(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertFalse(set2.contains(encomenda0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 753, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("\nPeso: ");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Set<String> set2 = dataBase0.getPerfis();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertFalse(set2.contains("\nPeso: "));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      
      utilizador0.setNome("");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      
      Utilizador utilizador1 = utilizador0.clone();
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getNome());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      
      Utilizador utilizador2 = new Utilizador(utilizador0);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador2.getPassword());
      assertEquals(0, utilizador2.getNumEnc());
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador0));
      
      dataBase0.add(utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador2.getPassword());
      assertEquals(0, utilizador2.getNumEnc());
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertTrue(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      
      dataBase0.addEncAceite("");
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("\nTData: ");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      int int0 = 784;
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(784);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 784, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getNome());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      
      Empresa empresa1 = new Empresa(empresa0);
      assertNotNull(empresa1);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getNome());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getEmail());
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals(0, empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertTrue(empresa1.equals((Object)empresa0));
      
      dataBase0.add(empresa1);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getNome());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getEmail());
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals(0, empresa1.getLicMedicamentos());
      assertEquals("", empresa1.getNome());
      assertEquals("", empresa1.getPassword());
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setNum(1);
      assertEquals("", utilizador0.getNome());
      assertEquals(1, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      dataBase0.add(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(1, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      dataBase0.addEncAceite((String) null);
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Empresa empresa0 = dataBase0.getEmpresa("$+e");
      assertNull(empresa0);
      
      dataBase0.addEncAceite("$+e");
      Voluntario voluntario0 = new Voluntario();
      assertNotNull(voluntario0);
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getNome());
      
      voluntario0.setLicMedicamentos(1);
      assertFalse(voluntario0.estaDisponivel());
      assertEquals(1, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getNome());
      
      dataBase0.add(voluntario0);
      assertFalse(voluntario0.estaDisponivel());
      assertEquals(1, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getNome());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("DataBase");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "Encomenda nao existe";
      Voluntario voluntario0 = dataBase0.getVoluntario("Encomenda nao existe");
      assertNull(voluntario0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "l818vi2yu%)U!=7";
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      try { 
        dataBase0.gravaEmObjStream("l818vi2yu%)U!=7");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "y)^):Y:\\u";
      Utilizador utilizador0 = dataBase0.getUtilizador(string0);
      assertNull(utilizador0);
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("");
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("uuok[7Zr=AIyDE/7\"d");
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendas();
      assertNotNull(set3);
      assertEquals(4, set3.size());
      assertFalse(set3.isEmpty());
      assertFalse(set3.equals((Object)set2));
      assertFalse(set3.equals((Object)set1));
      assertFalse(set3.equals((Object)set0));
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      double double0 = dataBase0.totalFaturado("b#W|1(zo$aYpC(2E2", localDateTime0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "\nTransporte: ";
      dataBase0.addEncAceite("\nTransporte: ");
      try { 
        dataBase0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Loja loja0 = dataBase0.getLoja("K*Y']J$/b5");
      assertNull(loja0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("BR4}C$EB+Uic");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = "Custo por km: ";
      Set<Encomenda> set1 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Perfil perfil0 = dataBase0.getPerfil("Custo por km: ");
      assertNull(perfil0);
      
      Empresa empresa0 = dataBase0.getEmpresa("K*Y']J$/b5");
      assertNull(empresa0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Loja loja0 = dataBase0.getLoja("");
      assertNull(loja0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      try { 
        dataBase0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Perfil perfil0 = dataBase0.getPerfil("");
      assertNull(perfil0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Empresa empresa0 = dataBase0.getEmpresa("");
      assertNull(empresa0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("q");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("");
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Loja loja0 = dataBase0.getLoja("bqIdGWT b|NF1Gw.#");
      assertNull(loja0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("bqIdGWT b|NF1Gw.#");
      assertNull(utilizador0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("bqIdGWT b|NF1Gw.#");
      assertNull(voluntario0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("e3482");
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendasLoja("byS1jqgW:>rapCLy&");
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertFalse(set3.equals((Object)set0));
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Set<Encomenda> set4 = dataBase0.getEncomendasTrans("bqIdGWT b|NF1Gw.#");
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      assertFalse(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertNotSame(set4, set0);
      assertNotSame(set4, set3);
      assertNotSame(set4, set1);
      assertNotSame(set4, set2);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      dataBase0.addEnc(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      
      String string0 = "Encomenda nao existe";
      dataBase0.addEncAceite("Encomenda nao existe");
      Set<Encomenda> set5 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set2));
      assertFalse(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set4));
      assertFalse(set5.contains(encomenda0));
      assertNotSame(set5, set4);
      assertNotSame(set5, set1);
      assertNotSame(set5, set2);
      assertNotSame(set5, set0);
      assertNotSame(set5, set3);
      
      String string1 = dataBase0.getEncomendaAceite(0);
      assertEquals("Encomenda nao existe", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Empresa empresa0 = dataBase0.getEmpresa("e3482");
      assertNull(empresa0);
      
      try { 
        dataBase0.addEnc(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      dataBase0.addEncAceite("");
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("G>,");
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      Ponto2D ponto2D0 = new Ponto2D((-2312.355909333035), (-1473.94));
      assertNotNull(ponto2D0);
      assertEquals((-2312.355909333035), ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      
      ponto2D0.setX(1);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      
      Empresa empresa0 = new Empresa("VP]D)o4", "VP]D)o4", "VP]D)o4", ponto2D0, (-2312.355909333035), 2008, 1, "Perfil", 2255.18214130502, 2008);
      assertNotNull(empresa0);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      
      Set<Encomenda> set2 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Empresa empresa1 = new Empresa(empresa0);
      assertNotNull(empresa1);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertTrue(empresa1.equals((Object)empresa0));
      
      Ponto2D ponto2D1 = empresa1.getLocal();
      assertNotNull(ponto2D1);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals((-1473.94), ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      
      String string0 = ponto2D1.toString();
      assertEquals("(1.0,-1473.94)", string0);
      assertNotNull(string0);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals((-1473.94), ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      
      Ponto2D ponto2D2 = ponto2D1.clone();
      assertNotNull(ponto2D2);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals((-1473.94), ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertEquals(1.0, ponto2D2.getX(), 0.01);
      assertEquals((-1473.94), ponto2D2.getY(), 0.01);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertTrue(ponto2D2.equals((Object)ponto2D1));
      assertTrue(ponto2D2.equals((Object)ponto2D0));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      assertNotSame(ponto2D1, ponto2D2);
      assertNotSame(ponto2D2, ponto2D0);
      assertNotSame(ponto2D2, ponto2D1);
      
      empresa0.setNome("VP]D)o4");
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-1473.94), ponto2D0.getY(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertTrue(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      
      ponto2D1.setY(1);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals(1.0, ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertFalse(ponto2D1.equals((Object)ponto2D2));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      assertNotSame(ponto2D1, ponto2D2);
      
      empresa0.setPassword("VP]D)o4");
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      
      Loja loja0 = new Loja("", "G>,", "G>,", ponto2D2, 2008, "d}30U$f");
      assertNotNull(loja0);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals(1.0, ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertEquals(1.0, ponto2D2.getX(), 0.01);
      assertEquals((-1473.94), ponto2D2.getY(), 0.01);
      assertEquals("G>,", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("G>,", loja0.getPassword());
      assertEquals("d}30U$f", loja0.getMorada());
      assertEquals(2008, loja0.getTempoEspera());
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertFalse(ponto2D1.equals((Object)ponto2D2));
      assertFalse(ponto2D2.equals((Object)ponto2D0));
      assertFalse(ponto2D2.equals((Object)ponto2D1));
      
      String string1 = loja0.toString();
      assertEquals("Perfil: \nG>,\nG>,\n(1.0,-1473.94)\nTempo de espera: 2008\nMorada: d}30U$f", string1);
      assertNotNull(string1);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals(1.0, ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertEquals(1.0, ponto2D2.getX(), 0.01);
      assertEquals((-1473.94), ponto2D2.getY(), 0.01);
      assertEquals("G>,", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("G>,", loja0.getPassword());
      assertEquals("d}30U$f", loja0.getMorada());
      assertEquals(2008, loja0.getTempoEspera());
      assertFalse(string1.equals((Object)string0));
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertFalse(ponto2D1.equals((Object)ponto2D2));
      assertFalse(ponto2D2.equals((Object)ponto2D0));
      assertFalse(ponto2D2.equals((Object)ponto2D1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      assertNotSame(ponto2D1, ponto2D2);
      assertNotSame(ponto2D2, ponto2D0);
      assertNotSame(ponto2D2, ponto2D1);
      
      dataBase0.add(loja0);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertEquals((-2312.355909333035), empresa1.getRaio(), 0.01);
      assertEquals(1, empresa1.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa1.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa1.getPassword());
      assertEquals("Perfil", empresa1.getNif());
      assertEquals(2008, empresa1.getVelmed());
      assertEquals(2008.0, empresa1.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa1.getNome());
      assertEquals("VP]D)o4", empresa1.getEmail());
      assertEquals(1.0, ponto2D1.getY(), 0.01);
      assertEquals(1.0, ponto2D1.getX(), 0.01);
      assertEquals(1.0, ponto2D2.getX(), 0.01);
      assertEquals((-1473.94), ponto2D2.getY(), 0.01);
      assertEquals("G>,", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("G>,", loja0.getPassword());
      assertEquals("d}30U$f", loja0.getMorada());
      assertEquals(2008, loja0.getTempoEspera());
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertFalse(ponto2D1.equals((Object)ponto2D2));
      assertFalse(ponto2D2.equals((Object)ponto2D0));
      assertFalse(ponto2D2.equals((Object)ponto2D1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertSame(ponto2D1, ponto2D0);
      assertNotSame(ponto2D1, ponto2D2);
      assertNotSame(ponto2D2, ponto2D0);
      assertNotSame(ponto2D2, ponto2D1);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      dataBase0.add(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      Voluntario voluntario0 = dataBase0.getVoluntario("G>,");
      assertNull(voluntario0);
      
      Utilizador utilizador1 = dataBase0.getUtilizador("");
      assertNotNull(utilizador1);
      assertEquals("", utilizador1.getNome());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador1, utilizador0);
      
      dataBase0.addEncAceite("Perfil");
      dataBase0.add((Perfil) empresa0);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      
      boolean boolean0 = dataBase0.existeUtilizador("");
      assertTrue(boolean0);
      
      dataBase0.add((Perfil) empresa0);
      assertEquals(1.0, ponto2D0.getY(), 0.01);
      assertEquals(1.0, ponto2D0.getX(), 0.01);
      assertEquals((-2312.355909333035), empresa0.getRaio(), 0.01);
      assertEquals(1, empresa0.getLicMedicamentos());
      assertEquals(2255.18214130502, empresa0.getCustokg(), 0.01);
      assertEquals("VP]D)o4", empresa0.getPassword());
      assertEquals("Perfil", empresa0.getNif());
      assertEquals("VP]D)o4", empresa0.getEmail());
      assertEquals(2008, empresa0.getVelmed());
      assertEquals(2008.0, empresa0.getCustokm(), 0.01);
      assertEquals("VP]D)o4", empresa0.getNome());
      assertFalse(ponto2D0.equals((Object)ponto2D2));
      assertTrue(empresa0.equals((Object)empresa1));
      assertSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D0, ponto2D2);
      assertNotSame(empresa0, empresa1);
      
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite((-2680));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "1CN-KMk9??k+2|}";
      Loja loja0 = dataBase0.getLoja("1CN-KMk9??k+2|}");
      assertNull(loja0);
      
      String string1 = "S\\>~X[2\\j9@?{`TFL";
      dataBase0.addEncAceite("S>~X[2j9@?{`TFL");
      Perfil perfil0 = dataBase0.getPerfil("RiG LMKDRPN Ed@,s");
      assertNull(perfil0);
      
      Ponto2D ponto2D0 = new Ponto2D((-1.0), (-1.0));
      assertNotNull(ponto2D0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      
      Empresa empresa0 = new Empresa((String) null, "jCf_}7FFojmfLk$cB", "Encomenda nao existe", ponto2D0, (-1.0), 0, 0, "", 1.0, (-1.0));
      assertNotNull(empresa0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("Encomenda nao existe", empresa0.getPassword());
      assertEquals((-1.0), empresa0.getCustokm(), 0.01);
      assertNull(empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("jCf_}7FFojmfLk$cB", empresa0.getNome());
      assertEquals("", empresa0.getNif());
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      
      empresa0.setLocal(ponto2D0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("Encomenda nao existe", empresa0.getPassword());
      assertEquals((-1.0), empresa0.getCustokm(), 0.01);
      assertNull(empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("jCf_}7FFojmfLk$cB", empresa0.getNome());
      assertEquals("", empresa0.getNif());
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      
      dataBase0.add(empresa0);
      assertEquals((-1.0), ponto2D0.getY(), 0.01);
      assertEquals((-1.0), ponto2D0.getX(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("Encomenda nao existe", empresa0.getPassword());
      assertEquals((-1.0), empresa0.getCustokm(), 0.01);
      assertNull(empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("jCf_}7FFojmfLk$cB", empresa0.getNome());
      assertEquals("", empresa0.getNif());
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      
      // Undeclared exception!
      try { 
        dataBase0.ordenarUsers((Comparator<Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "";
      String string1 = "zj?K^[%iYNf-";
      String string2 = "";
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      
      double double0 = 1.0;
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Empresa empresa0 = new Empresa("", "zj?K^[%iYNf-", "%_o7nGdo|Ln<>Uza7-", ponto2D0, 0.0, 0, (-1), "", 517.0, 0.0);
      assertNotNull(empresa0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("zj?K^[%iYNf-", empresa0.getNome());
      assertEquals(517.0, empresa0.getCustokg(), 0.01);
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals("%_o7nGdo|Ln<>Uza7-", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      String string3 = empresa0.toString();
      assertEquals("Perfil: \nzj?K^[%iYNf-\n%_o7nGdo|Ln<>Uza7-\n(0.0,0.0)\nRaio de a\u00E7ao: 0.0\nVelocidade media: 0\nLicen\u00E7a de transporte de medicamentos: -1\nNif: \nCusto por km: 0.0\nCusto por quilo: 517.0\n", string3);
      assertNotNull(string3);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("zj?K^[%iYNf-", empresa0.getNome());
      assertEquals(517.0, empresa0.getCustokg(), 0.01);
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals("%_o7nGdo|Ln<>Uza7-", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Ponto2D ponto2D1 = empresa0.getLocal();
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("zj?K^[%iYNf-", empresa0.getNome());
      assertEquals(517.0, empresa0.getCustokg(), 0.01);
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals("%_o7nGdo|Ln<>Uza7-", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertSame(ponto2D0, ponto2D1);
      assertSame(ponto2D1, ponto2D0);
      
      ponto2D0.move(ponto2D1);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("zj?K^[%iYNf-", empresa0.getNome());
      assertEquals(517.0, empresa0.getCustokg(), 0.01);
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals("%_o7nGdo|Ln<>Uza7-", empresa0.getPassword());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertSame(ponto2D0, ponto2D1);
      assertSame(ponto2D1, ponto2D0);
      
      int int0 = (-3159);
      int int1 = 0;
      try { 
        dataBase0.gravaEmObjStream(">ra'/P,NR_(0H.:9");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("Ab,");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = dataBase0.existeUtilizador("");
      assertFalse(boolean0);
      
      dataBase0.addEncAceite("");
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      
      dataBase0.add(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getNome());
      
      boolean boolean1 = dataBase0.existeUtilizador("1&E+47;Z|)3];<");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = ponto2D0.clone();
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      
      Voluntario voluntario0 = new Voluntario("F-eYxEW=_WLi0:", "F-eYxEW=_WLi0:", "F-eYxEW=_WLi0:", ponto2D1, 10.0, (-1769), (-1769), false);
      assertNotNull(voluntario0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(10.0, voluntario0.getRaio(), 0.01);
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals((-1769), voluntario0.getLicMedicamentos());
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getEmail());
      assertEquals((-1769), voluntario0.getVelmed());
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getPassword());
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      
      dataBase0.add(voluntario0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(10.0, voluntario0.getRaio(), 0.01);
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals((-1769), voluntario0.getLicMedicamentos());
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getEmail());
      assertEquals((-1769), voluntario0.getVelmed());
      assertEquals("F-eYxEW=_WLi0:", voluntario0.getPassword());
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      Ponto2D ponto2D0 = new Ponto2D(2.0, 2.0);
      ponto2D0.toString();
      Ponto2D ponto2D1 = new Ponto2D(2.0, 2.0);
      dataBase0.getPerfis();
      dataBase0.getVoluntario("(");
      dataBase0.getPerfis();
      String string0 = "6DANp/=";
      // Undeclared exception!
      try { 
        dataBase0.add((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getLoja((String) null);
      Loja loja0 = new Loja();
      loja0.toString();
      dataBase0.add(loja0);
      try { 
        dataBase0.getEncomenda("Empresa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendasUser("\"5g=,F");
      Loja loja0 = new Loja();
      dataBase0.getLoja("");
      dataBase0.add((Perfil) loja0);
      String string0 = "";
      dataBase0.getEncomendasTrans("");
      int int0 = 1730;
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendas();
      dataBase0.getEncomendasTrans("");
      dataBase0.getLoja("bqIdGWT b|NF1Gw.#");
      dataBase0.getUtilizador("bqIdGWT b|NF1Gw.#");
      String string0 = "byS1jqgW:>rapCLy&";
      dataBase0.getVoluntario("bqIdGWT b|NF1Gw.#");
      dataBase0.getEncomendasTrans("e3482");
      dataBase0.getEncomendasLoja("byS1jqgW:>rapCLy&");
      dataBase0.getEncomendasTrans("bqIdGWT b|NF1Gw.#");
      Encomenda encomenda0 = new Encomenda();
      dataBase0.addEnc(encomenda0);
      dataBase0.addEncAceite("Encomenda nao existe");
      dataBase0.getEmpresa("e3482");
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      dataBase0.getEncomendaNaoAceitaCusto();
      try { 
        dataBase0.getEncomenda("Encomenda nao existe");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }
}
