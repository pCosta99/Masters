/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:07:46 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Classificacao;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Classificacao_ESTest extends Classificacao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota((-932));
      classificacao0.addNota(2621);
      double double0 = classificacao0.getNota();
      assertEquals(2, classificacao0.getNumNotas());
      assertEquals(844.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      Classificacao classificacao1 = new Classificacao(classificacao0);
      assertEquals(0, classificacao1.getNumNotas());
      assertEquals(0, classificacao1.getSomaNotas());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota(1);
      int int0 = classificacao0.getSomaNotas();
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota((-179));
      int int0 = classificacao0.getSomaNotas();
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals((-179), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota((-179));
      int int0 = classificacao0.getNumNotas();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota(2020);
      classificacao0.clone();
      assertEquals(1, classificacao0.getNumNotas());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota((-56));
      classificacao0.clone();
      assertEquals((-56), classificacao0.getSomaNotas());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      int int0 = classificacao0.getNumNotas();
      assertEquals(0, classificacao0.getSomaNotas());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      int int0 = classificacao0.getSomaNotas();
      assertEquals(0, classificacao0.getNumNotas());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      double double0 = classificacao0.getNota();
      assertEquals(0, classificacao0.getSomaNotas());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, classificacao0.getNumNotas());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      classificacao0.addNota((-664));
      double double0 = classificacao0.getNota();
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals((-664.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Classificacao classificacao0 = new Classificacao();
      Classificacao classificacao1 = classificacao0.clone();
      assertEquals(0, classificacao1.getSomaNotas());
      assertEquals(0, classificacao1.getNumNotas());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Classificacao classificacao0 = null;
      try {
        classificacao0 = new Classificacao((Classificacao) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Classificacao", e);
      }
  }
}
