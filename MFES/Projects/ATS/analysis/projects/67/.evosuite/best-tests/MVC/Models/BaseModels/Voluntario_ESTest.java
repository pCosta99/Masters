/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:09:06 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Voluntario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(0.0, double0, 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidadeMed((-2556.614778115985));
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals((-2556.614778115985), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario(":@'I2xQ?/EUb$1q=", "", 0.0, 3401.51935689, 3401.51935689);
      double double0 = voluntario0.getRaio();
      assertEquals(3401.51935689, double0, 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", (-563.1816511687), (-1.0), (-4394.327099));
      double double0 = voluntario0.getRaio();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals((-4394.327099), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario(2766);
      double double0 = voluntario0.getNota();
      assertEquals(2766.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario((-937));
      double double0 = voluntario0.getNota();
      assertEquals((-937.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      boolean boolean0 = voluntario0.getEstaLivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario(2766);
      voluntario0.getClassificacao();
      assertEquals(2766.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("Transporta Medicamentos: ", "Transporta Medicamentos: ", (-2223.511774712244), (-2223.511774712244), 4.0);
      voluntario0.classificaVoluntario((-729));
      voluntario0.getClassificacao();
      assertEquals((-729.0), voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidadeMed((-2556.614778115985));
      voluntario0.clone();
      assertEquals((-2556.614778115985), voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("*T$E3ijEd\"9U~?J-N", "*T$E3ijEd\"9U~?J-N", (-1.0), (-1.0), (-1.0));
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(5.0, voluntario1.getVelocidadeMed(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals((-1.0), voluntario1.getRaio(), 0.01);
      assertEquals((-1.0), voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario(1);
      voluntario0.clone();
      assertEquals(1.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario((-3812));
      voluntario0.clone();
      assertEquals((-3812.0), voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 3850.10205104, 0.0, 3850.10205104);
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(5.0, double0, 0.01);
      assertEquals(3850.10205104, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("*T$E3ijEd\"9U~?J-N", "*T$E3ijEd\"9U~?J-N", (-1.0), (-1.0), (-1.0));
      boolean boolean0 = voluntario0.getEstaLivre();
      assertEquals((-1.0), voluntario0.getRaio(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("*T$E3ijEd\"9U~?J-N", "*T$E3ijEd\"9U~?J-N", (-1.0), (-1.0), (-1.0));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals((-1.0), voluntario0.getRaio(), 0.01);
      assertEquals(5.0, voluntario1.getVelocidadeMed(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals((-1.0), voluntario1.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNota();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getClassificacao();
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getRaio();
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("MVC.Modols.BaseMNgels.UtilizaNor", "MVC.Modols.BaseMNgels.UtilizaNor", 1790.6418408736, 1790.6418408736, 1790.6418408736);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(5.0, voluntario1.getVelocidadeMed(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals(1790.6418408736, voluntario0.getRaio(), 0.01);
      assertEquals(1790.6418408736, voluntario1.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      voluntario0.clone();
      assertFalse(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("MVC.Modols.BaseMNgels.UtilizaNor", "MVC.Modols.BaseMNgels.UtilizaNor", 1790.6418408736, 1790.6418408736, 1790.6418408736);
      String string0 = voluntario0.toString();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals("Voluntario{\nC\u00F3digo: MVC.Modols.BaseMNgels.UtilizaNor\nNome: MVC.Modols.BaseMNgels.UtilizaNor\nGPS: (1790.6418408736,1790.6418408736)\nRaio: 1790.6418408736\nClassificacao:0.00\n}", string0);
  }
}
