/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:04:02 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.Catalogs.Encomendas;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomendas_ESTest extends Encomendas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Map<String, Encomenda> map0 = encomendas0.getEncomendas();
      Encomendas encomendas1 = new Encomendas(map0);
      assertFalse(encomendas1.equals((Object)encomendas0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.setEncomendas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.getListaEncomendas((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomendas encomendas0 = null;
      try {
        encomendas0 = new Encomendas((Encomendas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Map<String, Encomenda> map0 = encomendas0.getEncomendas();
      encomendas0.setEncomendas(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      boolean boolean0 = encomendas0.existsEncomenda("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomendas encomendas1 = encomendas0.clone();
      assertNotSame(encomendas1, encomendas0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.classificaEncomenda("", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      String string0 = encomendas0.toString();
      assertEquals("Encomendas:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = encomendas0.removeEncomenda("");
      assertNull(encomenda0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.getEncomenda("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomendas encomendas1 = new Encomendas(encomendas0);
      assertFalse(encomendas1.equals((Object)encomendas0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomendas encomendas0 = null;
      try {
        encomendas0 = new Encomendas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }
}
