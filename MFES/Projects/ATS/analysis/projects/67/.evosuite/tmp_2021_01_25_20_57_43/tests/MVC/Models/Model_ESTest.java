/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:02:09 GMT 2021
 */

package MVC.Models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Produto;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Model;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Model_ESTest extends Model_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja((String) null, (-805.032137297309), (-805.032137297309));
      assertEquals("l1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = model0.addProduto("l1", "l1", 0.0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja((String) null, (-806.0543571847938), (-806.0543571847938));
      assertEquals("l1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = model0.addProduto("l1", "({Ah", 1360.339, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("", 0.0, 1.2, "X.lsO#0,7zXh?z/`Fe", (-1.0), 0.0, 1955436887, true);
      assertEquals("t1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("X.lsO#0,7zXh?z/`Fe", 1151.4430388390033, 1151.4430388390033, 1.2, true);
      assertEquals("v1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("CX\u0004|075", (-1.0), 266.46661988, (-1250.76097), false);
      assertEquals("v1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      model0.setEstaLivreEntregador("x}lJjU", boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("yCJ.XUTGo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("\nPreco por quantidade: ", "0{mjJ~>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("Kf<o%jPJdV;", (-236.0), (-236.0));
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = model0.loginValido("u1", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("u1", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.utilizadorClassificaEncomenda("", "&LWZ33+FiQZ~uRh KS", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // &LWZ33+FiQZ~uRh KS
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja("u1", (-1.0), 1151.4430388390033);
      assertEquals("l1", string0);
      assertNotNull(string0);
      
      List<Loja> list0 = model0.getListaLojas();
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("Loja", 297.7290373361529, (-175));
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      List<Encomenda> list0 = model0.getListaEncomendasPorClassificar("u1");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("Loja", 297.7290373361529, (-175));
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      List<Encomenda> list0 = model0.getListaEncomendasPorAceitar("u1");
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("", (-1276.998), 60.0);
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      List<Encomenda> list0 = model0.getListaEncomendasClassificadas("u1");
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("", (Boolean) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.loginValido("", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.loginValido((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.gravaEstado("P");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "MVC.Models.Parse");
      assertTrue(boolean0);
      
      try { 
        model0.gravaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.criaLinha("{`:$x&$@#HI`i;ft}3", "\nLinhas: ", 266.46661988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados/a.dat");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "KkU8");
      assertTrue(boolean0);
      
      try { 
        model0.carregaEstado();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 4B6B5538
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados/a.dat");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "rj?d!W5D0`rRf");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        model0.carregaEstado();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.gravaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.carregaEstado("s#Gta/1LG;;i=b");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("n", 2996.350151390957, 2996.350151390957, 2996.350151390957, true);
      assertEquals("v1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = model0.existeEntregador("v1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.existeEntregador("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("'^Q", 1796.9625159, (-1774.4836917), "'^Q", 1796.9625159, 1796.9625159, (-149), false);
      assertEquals("t1", string0);
      assertNotNull(string0);
      
      double double0 = model0.getFaturacao("t1");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.addProduto("", "uD*@xN", (-1.0), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja("61a[Tcfb6+7$TGw2Z#", 0.0, 0.0);
      assertEquals("l1", string0);
      assertNotNull(string0);
      
      String string1 = model0.addLoja("61a[Tcfb6+7$TGw2Z#", 1.2, 1.2);
      assertEquals("l2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("\r{v", (-469.8), (-2254.0), "tv3WK Mzjyrg", 60.0, 60.0, 127, false);
      assertEquals("t1", string0);
      assertNotNull(string0);
      
      String string1 = model0.addTransportadora("l1", (-469.8), (-2254.0), ")", (-1.0), (-2254.0), 1644, false);
      assertEquals("t2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("l1", 0.5763173014280256, 0.5763173014280256, "~?9^o;UrW=Kv~C}J^", 60.0, 185.51931, 0, true);
      assertEquals("t1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("", 2996.8089983709933, 2996.8089983709933, 2996.8089983709933, true);
      assertEquals("v1", string0);
      assertNotNull(string0);
      
      String string1 = model0.addVoluntario("", 2996.8089983709933, (-1.0), (-1.0), false);
      assertEquals("v2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("\nPreco por quantidade: ", 0.0, 1.2, 0.0, true);
      assertEquals("v1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("v", (-2273.248), (-2273.248));
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      String string1 = model0.addUtilizador("", 1.0, 100.26204846205633);
      assertEquals("u2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("t", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("v", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      model0.setEstaLivreEntregador("Ma", boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja("u1", (-1.0), 1151.4430388390033);
      assertEquals("l1", string0);
      assertNotNull(string0);
      
      List<Produto> list0 = model0.getProdutosLoja("l1");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.getProdutosLoja("Rj,!\"7M_/wu");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Rj,!\"7M_/wu
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("HPYT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("l", "l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("v", "v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("", 1889.6, 1889.6);
      assertEquals("u1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = model0.loginValido("u1", "u1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("~?9^o;UrW=Kv~C}J^", "l1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.utilizadorAceitaEncomenda("e", "1[l1F", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 1[l1F
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addLoja("", 1962.5843, 1962.5843);
      assertEquals("l1", string0);
      
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      String string1 = model0.criaEncomenda("daX:$)68I2X3", "l1", linkedList0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Model model0 = new Model();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      // Undeclared exception!
      try { 
        model0.criaEncomenda("", "$cy8I#A4z ;o:S", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Model model0 = new Model();
      model0.addLoja("|]vo~[n,yq`Gq", 272.8089887, 272.8089887);
      try { 
        model0.criaLinha("l1", "", (-1.431430212845837));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // -1.431430212845837
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Model model0 = new Model();
      model0.addLoja("|]vo~[n,yq`Gq", 272.8089887, 272.8089887);
      try { 
        model0.criaLinha("l1", "", 0.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Model model0 = new Model();
      model0.carregaLog();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = model0.getUtilizador("\nLinhas: ");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorClassificar("P}he|fU4j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Model model0 = new Model();
      List<Utilizador> list0 = model0.getTop10Utilizadores();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Model model0 = new Model();
      List<Loja> list0 = model0.getListaLojas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Model model0 = new Model();
      List<Transportadora> list0 = model0.getTop10Transportadoras();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasClassificadas("\nPreco por quantidade: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorAceitar((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.gravaEstado();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.carregaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
