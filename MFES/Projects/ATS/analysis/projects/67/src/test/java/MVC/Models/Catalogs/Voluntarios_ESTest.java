/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:03:31 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import MVC.Models.Catalogs.Voluntarios;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntarios_ESTest extends Voluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 1590.1, 1590.1, 1590.1, true);
      voluntarios0.addVoluntario(voluntarioMed0);
      voluntarios0.classificaVoluntario((String) null, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setCod(" , Produto: ");
      voluntarios0.addVoluntario(voluntario0);
      voluntarios0.addEncomendaVoluntario(" , Produto: ", " , Produto: ");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 0.0, 0.0, 0.0, false);
      voluntarioMed0.setVelocidadeMed(0.0);
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario((String) null);
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 0.0, 2281.6321064362005, 2281.6321064362005, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario((String) null);
      assertNull(voluntario0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, (-1.0962058093067517), 2284.5669644595923, (-1.0962058093067517), false);
      voluntarios0.addVoluntario(voluntarioMed0);
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      voluntarios0.setEstaLivreVoluntario((String) null, boolean0);
      Voluntario voluntario0 = voluntarios0.getVoluntario((String) null);
      assertNotSame(voluntario0, voluntarioMed0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setPreco(4.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertEquals(4.0, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("m#WPl<YNNz&(n'55>c", "", "C\u00F3digo: ", 4.0, linkedList0);
      Voluntario voluntario0 = new Voluntario("", "m#WPl<YNNz&(n'55>c", 0.0, 608.0, 1.0);
      GPS gPS0 = voluntario0.getGPS();
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertEquals("", encomenda1.getCodEntregador());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, "0%f>", (-3256.56), list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, 0.0);
      assertNull(encomenda2.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setDuracao(3075.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-2151.80320144));
      assertEquals(3075.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setDistancia(4.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setDistancia((-3256.56));
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 1016.0);
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setClassificacao(4376);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.setDataVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      GPS gPS0 = new GPS(4494.5035009186, 0.0);
      // Undeclared exception!
      try { 
        voluntarios0.entregaEncomendaVoluntario((Encomenda) null, gPS0, (-2727.352));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.addVoluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Voluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntario voluntario0 = new Voluntario();
      voluntarios0.addVoluntario(voluntario0);
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      assertFalse(voluntarios1.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      voluntarios0.setDataVoluntarios(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 0.0, 2284.5669644595923, 0.0, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      boolean boolean0 = voluntarios0.existeVoluntario((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.existeVoluntario("u|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed((String) null, (String) null, 0.0, 2284.5669644595923, 0.0, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntarios voluntarios1 = voluntarios0.clone();
      assertFalse(voluntarios1.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        voluntarios0.setEstaLivreVoluntario(" qX]4K},ph##X", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.getVoluntario((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.removeVoluntario("':=ynX,D_&R{=[j+[");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.classificaVoluntario("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      assertFalse(voluntarios1.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.addEncomendaVoluntario("Encomenda{", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      String string0 = voluntarios0.toString();
      assertEquals("Volunt\u00E1rios: \n[]", string0);
  }
}
