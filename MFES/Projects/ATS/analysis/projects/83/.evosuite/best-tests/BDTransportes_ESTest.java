/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:13:05 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDTransportes_ESTest extends BDTransportes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("k.K^Kxj", "$B*SE)Dw;{Zke),bXk", "IKj8I#'iO$3L3f", "885Oi|i`Mqj_l}Q1vQ", (-1.0), 2352.67749, (-1953491235), arrayList0, (-1953491235));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("k.K^Kxj", loja1.getEmail());
      assertEquals("885Oi|i`Mqj_l}Q1vQ", loja1.getNome());
      assertEquals(2352.67749, loja1.getLatitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(2352.67749, loja1.getLongitude(), 0.01);
      assertEquals((-1.0), loja1.getTempo_espera(), 0.01);
      assertEquals("IKj8I#'iO$3L3f", loja1.getCodigo());
      assertEquals("$B*SE)Dw;{Zke),bXk", loja1.getPassword());
      assertEquals((-1953491235), loja1.getNrPessoasEmFila());
      assertNotNull(loja1);
      
      ArrayList<Encomenda> arrayList1 = loja1.getEncomendas_recebidas();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("k.K^Kxj", loja1.getEmail());
      assertEquals("885Oi|i`Mqj_l}Q1vQ", loja1.getNome());
      assertEquals(2352.67749, loja1.getLatitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(2352.67749, loja1.getLongitude(), 0.01);
      assertEquals((-1.0), loja1.getTempo_espera(), 0.01);
      assertEquals("IKj8I#'iO$3L3f", loja1.getCodigo());
      assertEquals("$B*SE)Dw;{Zke),bXk", loja1.getPassword());
      assertEquals((-1953491235), loja1.getNrPessoasEmFila());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes((String) null, (String) null, "FWJ[o", "IKj8I#'iO$3L3f", (-1953491235), (-1.0), (String) null, (-1.0), (-1953491235), 0.0, arrayList1, true, (-1953491235), (-2106965086), true, (-1), (-1));
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("k.K^Kxj", loja1.getEmail());
      assertEquals("885Oi|i`Mqj_l}Q1vQ", loja1.getNome());
      assertEquals(2352.67749, loja1.getLatitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(2352.67749, loja1.getLongitude(), 0.01);
      assertEquals((-1.0), loja1.getTempo_espera(), 0.01);
      assertEquals("IKj8I#'iO$3L3f", loja1.getCodigo());
      assertEquals("$B*SE)Dw;{Zke),bXk", loja1.getPassword());
      assertEquals((-1953491235), loja1.getNrPessoasEmFila());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(empresaTransportes0.isDisponivel());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertNull(empresaTransportes0.getEmail());
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-1.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-1.953491235E9), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("FWJ[o", empresaTransportes0.getCodigo());
      assertEquals((-1), empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1.953491235E9), empresaTransportes0.getLongitude(), 0.01);
      assertNull(empresaTransportes0.getLocal());
      assertEquals((-1953491235), empresaTransportes0.getNif());
      assertNull(empresaTransportes0.getPassword());
      assertEquals((-2106965086), empresaTransportes0.getAvaliacoes());
      assertEquals("IKj8I#'iO$3L3f", empresaTransportes0.getNome());
      assertEquals((-1), empresaTransportes0.getVelocidade());
      assertNotNull(empresaTransportes0);
      
      bDTransportes0.updateTransporte(empresaTransportes0, 2352.67749);
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("k.K^Kxj", loja1.getEmail());
      assertEquals("885Oi|i`Mqj_l}Q1vQ", loja1.getNome());
      assertEquals(2352.67749, loja1.getLatitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(2352.67749, loja1.getLongitude(), 0.01);
      assertEquals((-1.0), loja1.getTempo_espera(), 0.01);
      assertEquals("IKj8I#'iO$3L3f", loja1.getCodigo());
      assertEquals("$B*SE)Dw;{Zke),bXk", loja1.getPassword());
      assertEquals((-1953491235), loja1.getNrPessoasEmFila());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(empresaTransportes0.isDisponivel());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertNull(empresaTransportes0.getEmail());
      assertTrue(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-1.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-1.95349123592716E9), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("FWJ[o", empresaTransportes0.getCodigo());
      assertEquals((-1), empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1.953491235E9), empresaTransportes0.getLongitude(), 0.01);
      assertNull(empresaTransportes0.getLocal());
      assertEquals((-1953491235), empresaTransportes0.getNif());
      assertNull(empresaTransportes0.getPassword());
      assertEquals((-2106965085), empresaTransportes0.getAvaliacoes());
      assertEquals("IKj8I#'iO$3L3f", empresaTransportes0.getNome());
      assertEquals((-1), empresaTransportes0.getVelocidade());
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      
      // Undeclared exception!
      try { 
        bDTransportes0.tryLogin((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertNotNull(empresaTransportes0);
      
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja(";^", ";^", ";^", "", (-679.4542335), 220.44352863863, 220.44352863863, arrayList0, (-949));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(";^", loja0.getPassword());
      assertEquals((-679.4542335), loja0.getTempo_espera(), 0.01);
      assertEquals(";^", loja0.getEmail());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(220.44352863863, loja0.getLatitude(), 0.01);
      assertEquals(220.44352863863, loja0.getLongitude(), 0.01);
      assertEquals(";^", loja0.getCodigo());
      assertEquals((-949), loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertNotNull(loja0);
      
      String string0 = bDTransportes0.printEmpresas((Utilizador) null, loja0, 1940.22031115189);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(";^", loja0.getPassword());
      assertEquals((-679.4542335), loja0.getTempo_espera(), 0.01);
      assertEquals(";^", loja0.getEmail());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(220.44352863863, loja0.getLatitude(), 0.01);
      assertEquals(220.44352863863, loja0.getLongitude(), 0.01);
      assertEquals(";^", loja0.getCodigo());
      assertEquals((-949), loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertNotNull(string0);
      assertEquals("0", string0);
      
      Loja loja1 = new Loja();
      assertFalse(loja1.equals((Object)loja0));
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertNotNull(loja1);
      
      Loja loja2 = new Loja(loja1);
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertNotNull(loja2);
      
      String string1 = bDTransportes0.printEmpresasMed((Utilizador) null, loja2, 1.0);
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertNotNull(string1);
      assertEquals("0", string1);
      assertNotSame(loja1, loja2);
      assertNotSame(loja1, loja0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      bDTransportes0.updateTransportes2(empresaTransportes0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      
      boolean boolean0 = bDTransportes0.existeCodigo("0");
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("0");
      assertEquals("0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("0", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("0", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      
      Loja loja3 = loja2.clone();
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(loja3.equals((Object)loja1));
      assertTrue(loja3.equals((Object)loja2));
      assertFalse(loja3.equals((Object)loja0));
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals("", loja3.getCodigo());
      assertEquals("", loja3.getNome());
      assertEquals("", loja3.getEmail());
      assertEquals("", loja3.getPassword());
      assertEquals(0, loja3.getNrPessoasEmFila());
      assertEquals(0.0, loja3.getTempo_espera(), 0.01);
      assertEquals("", loja3.getTypeUser());
      assertEquals(0.0, loja3.getLongitude(), 0.01);
      assertEquals(0.0, loja3.getLatitude(), 0.01);
      assertNotNull(loja3);
      assertNotSame(loja1, loja2);
      assertNotSame(loja1, loja3);
      assertNotSame(loja1, loja0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja3);
      assertNotSame(loja2, loja1);
      assertNotSame(loja3, loja1);
      assertNotSame(loja3, loja2);
      assertNotSame(loja3, loja0);
      
      Set<Character> set1 = locale0.getExtensionKeys();
      assertEquals("0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("0", locale0.toString());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      
      bDTransportes0.setCodigos(set0);
      assertEquals("0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("0", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      
      bDTransportes0.setCodigos(set0);
      assertEquals("0", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("0", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      
      String string2 = bDTransportes0.getEmail("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Set<String> set2 = bDTransportes0.getCodigos();
      assertTrue(set2.equals((Object)set0));
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertNotNull(set2);
      assertFalse(set2.contains(string1));
      
      Set<String> set3 = bDTransportes0.getCodigos();
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      assertNotNull(set3);
      assertFalse(set3.contains(string1));
      assertNotSame(set3, set2);
      
      // Undeclared exception!
      try { 
        bDTransportes0.printEmpresas((Utilizador) null, loja1, (-949));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = bDTransportes0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "mYXt4lS?=:\\&";
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean2 = arrayList0.removeAll(arrayList1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(boolean2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", (-968), (-968), (String) null, (-968), (-968), (-968), arrayList0, false, (-968), (-2521), false, 11, (-968));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertNull(empresaTransportes0.getLocal());
      assertNotNull(empresaTransportes0);
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertNull(empresaTransportes0.getLocal());
      assertEquals("mYXt4lS?=:&", empresaTransportes1.getEmail());
      assertEquals("mYXt4lS?=:&", empresaTransportes1.getCodigo());
      assertEquals((-968.0), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-2521), empresaTransportes1.getAvaliacoes());
      assertEquals((-968.0), empresaTransportes1.getLatitude(), 0.01);
      assertEquals((-968.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals((-968.0), empresaTransportes1.getLongitude(), 0.01);
      assertEquals((-968), empresaTransportes1.getNif());
      assertEquals((-968.0), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals("mYXt4lS?=:&", empresaTransportes1.getPassword());
      assertEquals(11, empresaTransportes1.getMinutosDeEspera());
      assertNull(empresaTransportes1.getLocal());
      assertEquals((-968), empresaTransportes1.getVelocidade());
      assertEquals("mYXt4lS?=:&", empresaTransportes1.getNome());
      assertNotNull(empresaTransportes1);
      
      HashMap<String, EmpresaTransportes> hashMap1 = new HashMap<String, EmpresaTransportes>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      bDTransportes0.setTransportes(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      EmpresaTransportes empresaTransportes2 = bDTransportes0.tryLogin("m", "m");
      assertNull(empresaTransportes2);
      
      ArrayList<Encomenda> arrayList2 = new ArrayList<Encomenda>();
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      EmpresaTransportes empresaTransportes3 = new EmpresaTransportes("m", "^)", "m", "LISTA DE PRODUTOS\n", 0, 0, "m", 0, 0, 0, arrayList2, true, 0, 0, true, 0, (-199));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes1));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, empresaTransportes3.getNif());
      assertTrue(empresaTransportes3.aceitoTransporteMedicamentos());
      assertEquals("m", empresaTransportes3.getLocal());
      assertEquals("^)", empresaTransportes3.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes3.getNome());
      assertTrue(empresaTransportes3.isDisponivel());
      assertEquals(0.0, empresaTransportes3.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes3.getMinutosDeEspera());
      assertEquals(0, empresaTransportes3.getAvaliacoes());
      assertEquals(0.0, empresaTransportes3.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes3.getEmail());
      assertEquals("m", empresaTransportes3.getCodigo());
      assertEquals((-199), empresaTransportes3.getVelocidade());
      assertEquals(0.0, empresaTransportes3.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLatitude(), 0.01);
      assertEquals("Transportadora", empresaTransportes3.getTypeUser());
      assertNotNull(empresaTransportes3);
      
      empresaTransportes3.setEmail("m");
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes1));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, empresaTransportes3.getNif());
      assertTrue(empresaTransportes3.aceitoTransporteMedicamentos());
      assertEquals("m", empresaTransportes3.getLocal());
      assertEquals("^)", empresaTransportes3.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes3.getNome());
      assertTrue(empresaTransportes3.isDisponivel());
      assertEquals(0.0, empresaTransportes3.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes3.getMinutosDeEspera());
      assertEquals(0, empresaTransportes3.getAvaliacoes());
      assertEquals(0.0, empresaTransportes3.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes3.getEmail());
      assertEquals("m", empresaTransportes3.getCodigo());
      assertEquals((-199), empresaTransportes3.getVelocidade());
      assertEquals(0.0, empresaTransportes3.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLatitude(), 0.01);
      assertEquals("Transportadora", empresaTransportes3.getTypeUser());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes3, empresaTransportes0);
      assertNotSame(empresaTransportes3, empresaTransportes1);
      
      bDTransportes0.updateTransportes2(empresaTransportes3);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes0));
      assertFalse(empresaTransportes3.equals((Object)empresaTransportes1));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, empresaTransportes3.getNif());
      assertTrue(empresaTransportes3.aceitoTransporteMedicamentos());
      assertEquals("m", empresaTransportes3.getLocal());
      assertEquals("^)", empresaTransportes3.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes3.getNome());
      assertTrue(empresaTransportes3.isDisponivel());
      assertEquals(0.0, empresaTransportes3.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes3.getMinutosDeEspera());
      assertEquals(0, empresaTransportes3.getAvaliacoes());
      assertEquals(0.0, empresaTransportes3.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes3.getEmail());
      assertEquals("m", empresaTransportes3.getCodigo());
      assertEquals((-199), empresaTransportes3.getVelocidade());
      assertEquals(0.0, empresaTransportes3.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes3.getLatitude(), 0.01);
      assertEquals("Transportadora", empresaTransportes3.getTypeUser());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes3, empresaTransportes0);
      assertNotSame(empresaTransportes3, empresaTransportes1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertNotNull(utilizador0);
      
      BDLojas bDLojas0 = new BDLojas();
      assertNotNull(bDLojas0);
      
      Loja loja0 = bDLojas0.tryLogin((String) null, "^)");
      assertNull(loja0);
      
      // Undeclared exception!
      try { 
        bDTransportes0.printEmpresasMed(utilizador0, (Loja) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDLojas bDLojas0 = new BDLojas();
      assertNotNull(bDLojas0);
      
      BDLojas bDLojas1 = new BDLojas(bDLojas0);
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertNotNull(bDLojas1);
      
      Set<String> set0 = bDLojas1.getCodigos();
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDLojas0, bDLojas1);
      assertNotSame(bDLojas1, bDLojas0);
      
      BDTransportes bDTransportes2 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertNotNull(empresaTransportes0);
      
      bDTransportes2.updateTransportes2(empresaTransportes0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDLojas0, bDLojas1);
      assertNotSame(bDLojas1, bDLojas0);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      String string0 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("", "", "", "_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", 1827.17398751284, 1827.17398751284, arrayList0);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1827.17398751284, utilizador0.getLatitude(), 0.01);
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(1827.17398751284, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1827.17398751284, utilizador0.getLatitude(), 0.01);
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(1827.17398751284, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador1.getNome());
      assertEquals(1827.17398751284, utilizador1.getLongitude(), 0.01);
      assertEquals(1827.17398751284, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNotNull(utilizador1);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(loja0);
      
      String string1 = bDTransportes2.printEmpresasMed(utilizador1, loja0, 1827.17398751284);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1827.17398751284, utilizador0.getLatitude(), 0.01);
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(1827.17398751284, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador1.getNome());
      assertEquals(1827.17398751284, utilizador1.getLongitude(), 0.01);
      assertEquals(1827.17398751284, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(string1);
      assertEquals("0", string1);
      assertFalse(set0.contains(string0));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDLojas0, bDLojas1);
      assertNotSame(bDLojas1, bDLojas0);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      
      try { 
        bDTransportes1.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertNotNull(empresaTransportes1);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("P1", loja1.getPassword());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("P1", loja1.getPassword());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja2 = new Loja();
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(string1.equals((Object)string0));
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list1, list0);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      arrayList0.trimToSize();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      EmpresaTransportes empresaTransportes2 = bDTransportes0.tryLogin("", "U}poB");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertNull(empresaTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      boolean boolean3 = bDTransportes0.existeEmail("U}poB");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string2 = bDTransportes1.printEmpresasMed(utilizador0, loja1, 30);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("P1", loja1.getPassword());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(string2);
      assertEquals("0", string2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      
      boolean boolean4 = bDTransportes1.existeEmail("");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      List<EmpresaTransportes> list2 = bDTransportes1.transDisponiveisMedParse(loja0, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals("", empresaTransportes1.getEmail());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertNotNull(empresaTransportes1);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals("", empresaTransportes1.getEmail());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja2 = new Loja();
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveis(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(list1.equals((Object)list0));
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotSame(list1, list0);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      bDTransportes0.add(empresaTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals("", empresaTransportes1.getEmail());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list2 = bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      arrayList0.trimToSize();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      EmpresaTransportes empresaTransportes2 = bDTransportes0.tryLogin("", "U}poB");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertNull(empresaTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      boolean boolean3 = bDTransportes0.existeEmail("U}poB");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string2 = bDTransportes1.printEmpresasMed(utilizador0, loja1, 30);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(string2);
      assertEquals("0", string2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      String string3 = bDTransportes0.printEmpresasMed(utilizador0, loja2, 2626.6689874524077);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotNull(string3);
      assertEquals("0", string3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertNotNull(empresaTransportes1);
      
      int int0 = empresaTransportes1.porLevantar();
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, int0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getNif());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(loja0);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      List<EmpresaTransportes> list0 = bDTransportes1.transDisponiveis(loja0, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      utilizador0.setEmail("tr-?u`uWw");
      assertEquals("tr-?u`uWw", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      loja0.setTypeUser("Total de Empresas de transporte: \n{}");
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("Total de Empresas de transporte: \n{}", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("tr-?u`uWw", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(arrayList0);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveisMedParse(loja0, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("tr-?u`uWw", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("Total de Empresas de transporte: \n{}", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list1, list0);
      
      String string2 = "";
      String string3 = bDTransportes1.printEmpresas(utilizador0, loja0, (-3002));
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("tr-?u`uWw", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("Total de Empresas de transporte: \n{}", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(string3);
      assertEquals("0", string3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDTransportes bDTransportes2 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ARrmMuAs}+]$zo");
      assertFalse(boolean0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertNotNull(empresaTransportes0);
      
      bDTransportes2.add(empresaTransportes0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(set0.contains("ARrmMuAs}+]$zo"));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      boolean boolean1 = bDTransportes2.existe(empresaTransportes0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertTrue(boolean1);
      assertFalse(set0.contains("ARrmMuAs}+]$zo"));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      Utilizador utilizador0 = null;
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertNotNull(loja0);
      
      // Undeclared exception!
      try { 
        bDTransportes2.printEmpresas((Utilizador) null, loja0, 42.42640687119285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      String string0 = bDTransportes0.toString();
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes1.getPassword());
      assertNotNull(empresaTransportes1);
      
      bDTransportes0.updateTransporte(empresaTransportes1, 1857.33545296);
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes1.getPassword());
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = 30;
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes0.existeCodigo("tr-?u`uWw");
      assertFalse(boolean0);
      
      Loja loja2 = new Loja();
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      
      List<EmpresaTransportes> list1 = bDTransportes0.transDisponiveis(loja2, utilizador0);
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertTrue(list1.equals((Object)list0));
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotSame(list1, list0);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" --->  || RATE --> 1857.33545296\n", string1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<EmpresaTransportes> list2 = bDTransportes0.transDisponiveisMedParse(loja2, utilizador0);
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes1));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      String string2 = "";
      arrayList0.trimToSize();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getNif());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getNif());
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getPassword());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertNotNull(empresaTransportes1);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getPassword());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja();
      assertTrue(loja1.equals((Object)loja0));
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador("=1To&4z_-c..*~&Rb", "Total de Empresas de transporte: \n{}", "=1To&4z_-c..*~&Rb", "Total de Empresas de transporte: \n{}", 1857.33545296, 1857.33545296, arrayList0);
      assertTrue(loja0.equals((Object)loja1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes0));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja2 = new Loja();
      assertTrue(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveis(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes0));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotSame(list1, list0);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list2 = bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", utilizador0.getPassword());
      assertEquals(1857.33545296, utilizador0.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getCodigo());
      assertEquals("=1To&4z_-c..*~&Rb", utilizador0.getEmail());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes0));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      
      arrayList0.trimToSize();
      assertTrue(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(bDTransportes1);
      
      Set<String> set1 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertNotNull(set1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      try { 
        bDTransportes1.encontraEnc("Password incorreta");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getNome());
      assertNotNull(empresaTransportes1);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals("", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals("", empresaTransportes1.getNome());
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja2 = new Loja();
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveis(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(list1.equals((Object)list0));
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotSame(list1, list0);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list2 = bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getNome());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      arrayList0.trimToSize();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      EmpresaTransportes empresaTransportes2 = bDTransportes0.tryLogin("", "U}poB");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertNull(empresaTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      boolean boolean3 = bDTransportes0.existeEmail("U}poB");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string2 = bDTransportes1.printEmpresasMed(utilizador0, loja1, 30);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals("P1", loja1.getPassword());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertNotNull(string2);
      assertEquals("0", string2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDTransportes bDTransportes2 = new BDTransportes(hashMap0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setAvaliacoes((-317));
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-317), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      
      bDTransportes2.updateTransporte(empresaTransportes0, 1338.7844391094263);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes2, bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals(bDTransportes2);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes2, bDTransportes0);
      
      Set<String> set1 = bDTransportes1.getCodigos();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(set1, set0);
      
      BDTransportes bDTransportes3 = bDTransportes0.clone();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes3.equals((Object)bDTransportes2));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertNotNull(bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes3, bDTransportes2);
      assertNotSame(bDTransportes3, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes0);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = 868;
      Loja loja0 = new Loja("", "", "K*:`95;< /`-Y", "", 1338.7844391094263, 0.0, 0.0, arrayList0, 868);
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getNome());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertNotNull(loja0);
      
      loja0.setLongitude(868);
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getNome());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      
      Utilizador utilizador0 = null;
      List<EmpresaTransportes> list0 = bDTransportes1.transDisponiveisMedParse(loja0, (Utilizador) null);
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes3));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getNome());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes0));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes3);
      
      String string0 = bDTransportes1.printEmpresasMed((Utilizador) null, loja0, 868);
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes3));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getNome());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertNotNull(string0);
      assertEquals("0", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes3);
      
      // Undeclared exception!
      try { 
        bDTransportes2.transDisponiveis(loja0, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      String string0 = bDTransportes1.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setVelocidade((-3002));
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(0, empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getNome());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertNotNull(empresaTransportes1);
      
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals((-3002), empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals(0, empresaTransportes1.getNif());
      assertEquals(0.0, empresaTransportes1.getLongitude(), 0.01);
      assertEquals("", empresaTransportes1.getCodigo());
      assertEquals("", empresaTransportes1.getPassword());
      assertEquals("", empresaTransportes1.getTypeUser());
      assertEquals("", empresaTransportes1.getEmail());
      assertEquals((-3002), empresaTransportes1.getVelocidade());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals(0.0, empresaTransportes1.getCusto_km(), 0.01);
      assertEquals(0.0, empresaTransportes1.getLatitude(), 0.01);
      assertEquals(1857.33545296, empresaTransportes1.getClassificao(), 0.01);
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getNome());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(" ", empresaTransportes1.getLocal());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = 30;
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      assertFalse(loja1.equals((Object)loja0));
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals("P1", loja1.getPassword());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveis(loja1, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(30, loja1.getNrPessoasEmFila());
      assertEquals("=1To&4z_-c..*~&Rb", loja1.getNome());
      assertEquals("P1", loja1.getPassword());
      assertEquals(1857.33545296, loja1.getLatitude(), 0.01);
      assertEquals("tr-?u`uWw", loja1.getCodigo());
      assertEquals(1857.33545296, loja1.getTempo_espera(), 0.01);
      assertEquals("Total de Empresas de transporte: \n{}", loja1.getEmail());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(1857.33545296, loja1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      
      boolean boolean0 = bDTransportes1.existeCodigo("tr-?u`uWw");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja2 = new Loja();
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotNull(loja2);
      
      utilizador0.setNome("tr-?u`uWw");
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveis(loja2, utilizador0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes1));
      assertNotSame(list1, list0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      boolean boolean1 = bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertNotNull(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      loja2.setLatitude(30);
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(30.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(30.0, loja2.getLongitude(), 0.01);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      boolean boolean2 = bDTransportes0.existeEmail("k.K^Kxj");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      List<EmpresaTransportes> list2 = bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("tr-?u`uWw", utilizador0.getNome());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals("Total de Empresas de transporte: \n{}", loja2.getTypeUser());
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals(30.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals(30.0, loja2.getLongitude(), 0.01);
      assertNotNull(list2);
      assertFalse(list2.contains(empresaTransportes1));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      String string2 = "";
      arrayList0.trimToSize();
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = bDTransportes0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean2 = arrayList1.add((Object) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean2);
      
      boolean boolean3 = arrayList0.removeAll(arrayList1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(boolean3);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", (-968), (-968), (String) null, (-968), (-968), (-968), arrayList0, false, (-968), (-2521), false, 11, (-968));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertNull(empresaTransportes0.getLocal());
      assertNotNull(empresaTransportes0);
      
      EmpresaTransportes empresaTransportes1 = hashMap0.put("mYXt4lS?=:&", empresaTransportes0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertNull(empresaTransportes0.getLocal());
      assertNull(empresaTransportes1);
      
      HashMap<String, EmpresaTransportes> hashMap1 = new HashMap<String, EmpresaTransportes>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(hashMap1);
      
      bDTransportes0.setTransportes(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      ArrayList<Encomenda> arrayList2 = new ArrayList<Encomenda>();
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      EmpresaTransportes empresaTransportes2 = new EmpresaTransportes("m", "^)", "m", "LISTA DE PRODUTOS\n", 0, 0, "m", 0, 0, 0, arrayList2, false, 0, 0, true, 0, (-199));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertTrue(empresaTransportes2.isDisponivel());
      assertNotNull(empresaTransportes2);
      
      empresaTransportes2.setEmail("m");
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertTrue(empresaTransportes2.isDisponivel());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes2, empresaTransportes0);
      
      bDTransportes0.updateTransportes2(empresaTransportes2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertTrue(empresaTransportes2.isDisponivel());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes2, empresaTransportes0);
      
      try { 
        bDTransportes0.getEmail("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals(bDTransportes0);
      assertTrue(boolean0);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      bDTransportes0.setTransportes(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      boolean boolean1 = bDVoluntarios1.existeCodigo("Encomenda: ");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("Encomenda: "));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDVoluntarios2);
      assertFalse(set0.contains("Encomenda: "));
      
      Set<String> set1 = bDVoluntarios2.getCodigos();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertFalse(set0.contains("Encomenda: "));
      assertFalse(set1.contains("Encomenda: "));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(set1, set0);
      
      bDTransportes0.setCodigos(set1);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set0.contains("Encomenda: "));
      assertFalse(set1.contains("Encomenda: "));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertNotNull(empresaTransportes0);
      
      bDTransportes0.updateTransportes2(empresaTransportes0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertNotSame(bDTransportes0, bDTransportes1);
      
      String string0 = bDTransportes0.printTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertNotNull(string0);
      assertEquals(" --->  || RATE --> 0.0\n", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      try { 
        bDTransportes1.encontraEnc(" --->  || RATE --> 0.0\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("u$tND9A#O", "@S%##al(P&!BQ+&dg", "uFT~h,", "uFT~h,", (-92), (-92), "", (-1.0), (-1615.746327901624), (-1615.746327901624), arrayList0, false, (-92), (-92), false, 4560, 4560);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertNotNull(empresaTransportes0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("u$tND9A#O", empresaTransportes1.getEmail());
      assertEquals((-92.0), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLatitude(), 0.01);
      assertEquals((-1615.746327901624), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals((-92), empresaTransportes1.getAvaliacoes());
      assertEquals((-92), empresaTransportes1.getNif());
      assertEquals("uFT~h,", empresaTransportes1.getNome());
      assertEquals(4560, empresaTransportes1.getMinutosDeEspera());
      assertEquals(4560, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getLocal());
      assertEquals((-92.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("uFT~h,", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-1615.746327901624), empresaTransportes1.getLongitude(), 0.01);
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes1.getPassword());
      assertNotNull(empresaTransportes1);
      
      BDGeral bDGeral0 = new BDGeral();
      assertNotNull(bDGeral0);
      
      EncomendasAceites encomendasAceites0 = new EncomendasAceites();
      assertNotNull(encomendasAceites0);
      
      bDGeral0.setEncomendasAceites(encomendasAceites0);
      int int0 = empresaTransportes1.distanciaEntreLojas(arrayList0, bDGeral0);
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("u$tND9A#O", empresaTransportes1.getEmail());
      assertEquals((-92.0), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLatitude(), 0.01);
      assertEquals((-1615.746327901624), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals((-92), empresaTransportes1.getAvaliacoes());
      assertEquals((-92), empresaTransportes1.getNif());
      assertEquals("uFT~h,", empresaTransportes1.getNome());
      assertEquals(4560, empresaTransportes1.getMinutosDeEspera());
      assertEquals(4560, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getLocal());
      assertEquals((-92.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("uFT~h,", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-1615.746327901624), empresaTransportes1.getLongitude(), 0.01);
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes1.getPassword());
      assertEquals(0, int0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      boolean boolean0 = bDTransportes1.existe(empresaTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("u$tND9A#O", empresaTransportes1.getEmail());
      assertEquals((-92.0), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLatitude(), 0.01);
      assertEquals((-1615.746327901624), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals((-92), empresaTransportes1.getAvaliacoes());
      assertEquals((-92), empresaTransportes1.getNif());
      assertEquals("uFT~h,", empresaTransportes1.getNome());
      assertEquals(4560, empresaTransportes1.getMinutosDeEspera());
      assertEquals(4560, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getLocal());
      assertEquals((-92.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("uFT~h,", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-1615.746327901624), empresaTransportes1.getLongitude(), 0.01);
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes1.getPassword());
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      boolean boolean1 = bDTransportes1.existeCodigo("u$tND9A#O");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      String string0 = bDTransportes0.toString();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertNotNull(string0);
      assertEquals("Total de Empresas de transporte: \n{}", string0);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      boolean boolean2 = bDTransportes1.existe(empresaTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertTrue(empresaTransportes1.equals((Object)empresaTransportes0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("u$tND9A#O", empresaTransportes1.getEmail());
      assertEquals((-92.0), empresaTransportes1.getCusto_km(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLatitude(), 0.01);
      assertEquals((-1615.746327901624), empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals((-92), empresaTransportes1.getAvaliacoes());
      assertEquals((-92), empresaTransportes1.getNif());
      assertEquals("uFT~h,", empresaTransportes1.getNome());
      assertEquals(4560, empresaTransportes1.getMinutosDeEspera());
      assertEquals(4560, empresaTransportes1.getVelocidade());
      assertFalse(empresaTransportes1.isDisponivel());
      assertEquals("", empresaTransportes1.getLocal());
      assertEquals((-92.0), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("uFT~h,", empresaTransportes1.getCodigo());
      assertFalse(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals((-1615.746327901624), empresaTransportes1.getLongitude(), 0.01);
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes1.getPassword());
      assertFalse(boolean2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
      
      bDTransportes1.add(empresaTransportes0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(empresaTransportes0.equals((Object)empresaTransportes1));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getLocal());
      assertEquals((-92.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals((-92.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-92), empresaTransportes0.getAvaliacoes());
      assertEquals("uFT~h,", empresaTransportes0.getNome());
      assertEquals("@S%##al(P&!BQ+&dg", empresaTransportes0.getPassword());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals("u$tND9A#O", empresaTransportes0.getEmail());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("uFT~h,", empresaTransportes0.getCodigo());
      assertEquals((-92), empresaTransportes0.getNif());
      assertEquals(4560, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-1615.746327901624), empresaTransportes0.getLongitude(), 0.01);
      assertEquals(4560, empresaTransportes0.getVelocidade());
      assertEquals((-1615.746327901624), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      
      String string1 = bDTransportes0.toString();
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Total de Empresas de transporte: \n{}", string1);
      assertNotSame(bDTransportes0, bDTransportes1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("1SJ&Z1)s4yq:.");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(bDTransportes0);
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      
      BDTransportes bDTransportes1 = bDTransportes0.clone();
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(bDTransportes1);
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDTransportes bDTransportes2 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(bDTransportes2);
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      
      BDTransportes bDTransportes3 = new BDTransportes(bDTransportes2);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes2));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(bDTransportes3);
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertNotNull(empresaTransportes0);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes("nEn:VP", "i\"N_", "nEn:VP", "i\"N_", 1, (-214.4574852583582), "~}Jm{>@33Wt", (-214.4574852583582), (-1.0), 0.0, arrayList0, true, (-276.40791170103), 1, true, 0, 0);
      assertFalse(empresaTransportes1.equals((Object)empresaTransportes0));
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLongitude(), 0.01);
      assertTrue(empresaTransportes1.isDisponivel());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals("i\"N_", empresaTransportes1.getNome());
      assertEquals("nEn:VP", empresaTransportes1.getCodigo());
      assertEquals("~}Jm{>@33Wt", empresaTransportes1.getLocal());
      assertEquals(0, empresaTransportes1.getVelocidade());
      assertEquals("i\"N_", empresaTransportes1.getPassword());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals((-276.40791170103), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("nEn:VP", empresaTransportes1.getEmail());
      assertEquals((-214.4574852583582), empresaTransportes1.getLatitude(), 0.01);
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(1, empresaTransportes1.getNif());
      assertEquals((-214.4574852583582), empresaTransportes1.getCusto_km(), 0.01);
      assertNotNull(empresaTransportes1);
      
      boolean boolean1 = bDTransportes3.existe(empresaTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes3));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes2));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertFalse(empresaTransportes0.equals((Object)empresaTransportes1));
      assertFalse(empresaTransportes1.equals((Object)empresaTransportes0));
      assertFalse(boolean1 == boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, empresaTransportes1.getRaioDeAcao(), 0.01);
      assertEquals((-1.0), empresaTransportes1.getLongitude(), 0.01);
      assertTrue(empresaTransportes1.isDisponivel());
      assertEquals(1, empresaTransportes1.getAvaliacoes());
      assertEquals("Transportadora", empresaTransportes1.getTypeUser());
      assertEquals("i\"N_", empresaTransportes1.getNome());
      assertEquals("nEn:VP", empresaTransportes1.getCodigo());
      assertEquals("~}Jm{>@33Wt", empresaTransportes1.getLocal());
      assertEquals(0, empresaTransportes1.getVelocidade());
      assertEquals("i\"N_", empresaTransportes1.getPassword());
      assertEquals(0, empresaTransportes1.getMinutosDeEspera());
      assertEquals((-276.40791170103), empresaTransportes1.getClassificao(), 0.01);
      assertEquals("nEn:VP", empresaTransportes1.getEmail());
      assertEquals((-214.4574852583582), empresaTransportes1.getLatitude(), 0.01);
      assertTrue(empresaTransportes1.aceitoTransporteMedicamentos());
      assertEquals(1, empresaTransportes1.getNif());
      assertEquals((-214.4574852583582), empresaTransportes1.getCusto_km(), 0.01);
      assertFalse(boolean1);
      assertFalse(linkedHashSet0.contains("~}Jm{>@33Wt"));
      assertTrue(linkedHashSet0.contains("1SJ&Z1)s4yq:."));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes2, bDTransportes3);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes2);
      assertNotSame(bDTransportes3, bDTransportes0);
      assertNotSame(empresaTransportes0, empresaTransportes1);
      assertNotSame(empresaTransportes1, empresaTransportes0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "";
      EmpresaTransportes empresaTransportes0 = null;
      EmpresaTransportes empresaTransportes1 = hashMap0.put("", (EmpresaTransportes) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(empresaTransportes1);
      
      // Undeclared exception!
      try { 
        bDTransportes0.setTransportes(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Set<String> set0 = bDTransportes0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BDTransportes bDTransportes1 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes1);
      
      BDTransportes bDTransportes2 = new BDTransportes(bDTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertNotNull(empresaTransportes0);
      
      bDTransportes2.updateTransportes2(empresaTransportes0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      Map<String, EmpresaTransportes> map1 = bDTransportes2.getTransportes();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(map1.equals((Object)map0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNotNull(map1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map0, map1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(map1, map0);
      
      bDTransportes0.setTransportes(map0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(map0.equals((Object)map1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map0, map1);
      
      String string0 = "";
      EmpresaTransportes empresaTransportes1 = bDTransportes1.tryLogin("", "");
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(map0.equals((Object)map1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNull(empresaTransportes1);
      assertFalse(set0.contains(""));
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map0, map1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      
      String string1 = "";
      double double0 = 0.0;
      String string2 = "Vg)_*7~ nu(x{_Ngo";
      Encomenda encomenda0 = new Encomenda();
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getComprador());
      assertFalse(encomenda0.isEntregue());
      assertFalse(encomenda0.isLevantada());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertEquals(" ", encomenda0.getCodigo());
      assertNotNull(encomenda0);
      
      Map<String, LinhaEncomenda> map2 = encomenda0.getProdutos();
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getComprador());
      assertFalse(encomenda0.isEntregue());
      assertFalse(encomenda0.isLevantada());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertEquals(" ", encomenda0.getCodigo());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map2);
      
      BDProdutos bDProdutos0 = new BDProdutos(map2, set0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getComprador());
      assertFalse(encomenda0.isEntregue());
      assertFalse(encomenda0.isLevantada());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertEquals(" ", encomenda0.getCodigo());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(bDProdutos0);
      assertFalse(set0.contains(string1));
      
      Map<String, LinhaEncomenda> map3 = bDProdutos0.getProdutos();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(map3.equals((Object)map2));
      assertEquals(0, map3.size());
      assertTrue(map3.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getComprador());
      assertFalse(encomenda0.isEntregue());
      assertFalse(encomenda0.isLevantada());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertEquals(" ", encomenda0.getCodigo());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map3);
      assertFalse(set0.contains(string1));
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map3, map2);
      assertNotSame(map2, map3);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, 0, 1452, 1452, 0, 2649);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = bDTransportes0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean2 = arrayList0.removeAll(arrayList1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(boolean2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", (-968), (-968), (String) null, (-968), (-968), (-968), arrayList0, false, (-968), (-2521), false, 11, (-968));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertNull(empresaTransportes0.getLocal());
      assertNotNull(empresaTransportes0);
      
      EmpresaTransportes empresaTransportes1 = hashMap0.put("mYXt4lS?=:&", empresaTransportes0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals((-968.0), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(11, empresaTransportes0.getMinutosDeEspera());
      assertEquals("Transportadora", empresaTransportes0.getTypeUser());
      assertEquals((-968.0), empresaTransportes0.getCusto_km(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLongitude(), 0.01);
      assertEquals((-968.0), empresaTransportes0.getLatitude(), 0.01);
      assertEquals((-968), empresaTransportes0.getNif());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getCodigo());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getEmail());
      assertEquals((-2521), empresaTransportes0.getAvaliacoes());
      assertEquals("mYXt4lS?=:&", empresaTransportes0.getPassword());
      assertEquals((-968.0), empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals((-968), empresaTransportes0.getVelocidade());
      assertNull(empresaTransportes0.getLocal());
      assertNull(empresaTransportes1);
      
      HashMap<String, EmpresaTransportes> hashMap1 = new HashMap<String, EmpresaTransportes>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(hashMap1);
      
      bDTransportes0.setTransportes(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      ArrayList<Encomenda> arrayList2 = new ArrayList<Encomenda>();
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      EmpresaTransportes empresaTransportes2 = new EmpresaTransportes("m", "^)", "m", "LISTA DE PRODUTOS\n", 0, 0, "m", 0, 0, 0, arrayList2, false, 0, 0, true, 0, (-199));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertTrue(empresaTransportes2.isDisponivel());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertNotNull(empresaTransportes2);
      
      empresaTransportes2.setEmail("m");
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertTrue(empresaTransportes2.isDisponivel());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes2, empresaTransportes0);
      
      bDTransportes0.updateTransportes2(empresaTransportes2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertFalse(empresaTransportes2.equals((Object)empresaTransportes0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0.0, empresaTransportes2.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes2.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes2.getLatitude(), 0.01);
      assertEquals("^)", empresaTransportes2.getPassword());
      assertEquals("LISTA DE PRODUTOS\n", empresaTransportes2.getNome());
      assertEquals("m", empresaTransportes2.getLocal());
      assertEquals(0.0, empresaTransportes2.getClassificao(), 0.01);
      assertEquals("Transportadora", empresaTransportes2.getTypeUser());
      assertTrue(empresaTransportes2.isDisponivel());
      assertEquals(0.0, empresaTransportes2.getLongitude(), 0.01);
      assertEquals(0, empresaTransportes2.getMinutosDeEspera());
      assertEquals((-199), empresaTransportes2.getVelocidade());
      assertEquals(0.0, empresaTransportes2.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes2.getAvaliacoes());
      assertEquals(0, empresaTransportes2.getNif());
      assertEquals("m", empresaTransportes2.getEmail());
      assertEquals("m", empresaTransportes2.getCodigo());
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(empresaTransportes2, empresaTransportes0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDLojas bDLojas0 = new BDLojas();
      assertNotNull(bDLojas0);
      
      Map<String, Loja> map0 = bDLojas0.getLojas();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDLojas bDLojas1 = new BDLojas(map0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDLojas1);
      
      BDLojas bDLojas2 = new BDLojas(bDLojas1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertTrue(bDLojas2.equals((Object)bDLojas1));
      assertTrue(bDLojas2.equals((Object)bDLojas0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDLojas2);
      
      Loja loja0 = bDLojas2.tryLogin(" entre as datas ", " entre as datas ");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas0.equals((Object)bDLojas2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertTrue(bDLojas1.equals((Object)bDLojas2));
      assertTrue(bDLojas2.equals((Object)bDLojas1));
      assertTrue(bDLojas2.equals((Object)bDLojas0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNull(loja0);
      assertFalse(set0.contains(" entre as datas "));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDLojas0, bDLojas2);
      assertNotSame(bDLojas0, bDLojas1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDLojas1, bDLojas2);
      assertNotSame(bDLojas1, bDLojas0);
      assertNotSame(bDLojas2, bDLojas1);
      assertNotSame(bDLojas2, bDLojas0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      List<EmpresaTransportes> list0 = bDTransportes0.transDisponiveisMedParse((Loja) null, utilizador0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertNotNull(empresaTransportes0);
      
      bDTransportes0.add(empresaTransportes0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertNotSame(bDTransportes0, bDTransportes1);
      
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDUtilizador bDUtilizador0 = new BDUtilizador(hashMap0, set0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(bDUtilizador0);
      assertFalse(set0.contains(" entre as datas "));
      
      BDUtilizador bDUtilizador1 = new BDUtilizador(bDUtilizador0);
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDUtilizador1.equals((Object)bDUtilizador0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(bDUtilizador1);
      assertFalse(set0.contains(" entre as datas "));
      
      Utilizador utilizador1 = bDUtilizador1.tryLogin(" entre as datas ", " entre as datas ");
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDUtilizador0.equals((Object)bDUtilizador1));
      assertTrue(bDUtilizador1.equals((Object)bDUtilizador0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(utilizador1);
      assertFalse(set0.contains(" entre as datas "));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDUtilizador0, bDUtilizador1);
      assertNotSame(bDUtilizador1, bDUtilizador0);
      
      List<EmpresaTransportes> list1 = bDTransportes1.transDisponiveisMedParse((Loja) null, (Utilizador) null);
      assertTrue(list1.equals((Object)list0));
      assertFalse(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.contains(empresaTransportes0));
      assertNotSame(list1, list0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      String string0 = utilizador0.printEncomendasPorEntregar();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(string0);
      assertEquals("N\u00E3o existem encomendas por entregar\n", string0);
      
      bDTransportes1.updateTransporte(empresaTransportes0, 0.0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(1, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Loja loja1 = bDLojas0.tryLogin(" entre as datas ", "(Llry(/%j@.X");
      assertTrue(bDLojas0.equals((Object)bDLojas1));
      assertTrue(bDLojas0.equals((Object)bDLojas2));
      assertNull(loja1);
      assertNotSame(bDLojas0, bDLojas2);
      assertNotSame(bDLojas0, bDLojas1);
      
      // Undeclared exception!
      try { 
        bDTransportes0.transDisponiveisMedParse((Loja) null, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertNotNull(empresaTransportes0);
      
      bDTransportes0.updateTransportes2(empresaTransportes0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(empresaTransportes0.isDisponivel());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getVelocidade());
      
      bDTransportes0.setCodigos(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      String string0 = "";
      EmpresaTransportes empresaTransportes0 = bDTransportes0.tryLogin("", "OPJ&a");
      assertNull(empresaTransportes0);
      
      double double0 = 1658.9;
      // Undeclared exception!
      try { 
        bDTransportes0.updateTransporte((EmpresaTransportes) null, 1658.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "!22o,VTG/";
      Locale locale0 = new Locale("!22o,VTG/", "!22o,VTG/");
      assertEquals("!22O,VTG/", locale0.getCountry());
      assertEquals("!22o,vtg/_!22O,VTG/", locale0.toString());
      assertEquals("!22o,vtg/", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("!22O,VTG/", locale0.getCountry());
      assertEquals("!22o,vtg/_!22O,VTG/", locale0.toString());
      assertEquals("!22o,vtg/", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("!22o,VTG/"));
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("!22O,VTG/", locale0.getCountry());
      assertEquals("!22o,vtg/_!22O,VTG/", locale0.toString());
      assertEquals("!22o,vtg/", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("!22o,vtg/", locale1.getLanguage());
      assertEquals("!22o,vtg/_!22O,VTG/", locale1.toString());
      assertEquals("!22O,VTG/", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("!22O,VTG/", locale0.getCountry());
      assertEquals("!22o,vtg/_!22O,VTG/", locale0.toString());
      assertEquals("!22o,vtg/", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(bDTransportes0);
      assertFalse(set0.contains("!22o,VTG/"));
      
      String string1 = "t>\\";
      EmpresaTransportes empresaTransportes0 = bDTransportes0.tryLogin("t>", "VYepd=CW");
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("!22O,VTG/", locale0.getCountry());
      assertEquals("!22o,vtg/_!22O,VTG/", locale0.toString());
      assertEquals("!22o,vtg/", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(empresaTransportes0);
      assertFalse(set0.contains("t>"));
      assertNotSame(locale0, locale1);
      
      // Undeclared exception!
      try { 
        bDTransportes0.existe((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDTransportes bDTransportes2 = new BDTransportes(hashMap0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = bDTransportes0.tryLogin((String) null, (String) null);
      assertTrue(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertNull(empresaTransportes0);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      // Undeclared exception!
      try { 
        bDTransportes2.existe((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BDTransportes bDTransportes2 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes2);
      
      BDTransportes bDTransportes3 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertTrue(bDTransportes3.equals((Object)bDTransportes2));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes3);
      
      boolean boolean0 = bDTransportes2.equals(bDTransportes3);
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes3));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes2.equals((Object)bDTransportes3));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertTrue(bDTransportes3.equals((Object)bDTransportes2));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(boolean0);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes3);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes3);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes0);
      assertNotSame(bDTransportes3, bDTransportes2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDTransportes bDTransportes0 = null;
      try {
        bDTransportes0 = new BDTransportes((BDTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      BDTransportes bDTransportes1 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(bDTransportes1);
      
      bDTransportes1.setTransportes(map0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals(bDTransportes1);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(boolean0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      try { 
        bDTransportes1.getEmail("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BDUtilizador bDUtilizador0 = new BDUtilizador();
      assertNotNull(bDUtilizador0);
      
      Set<String> set0 = bDUtilizador0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = bDTransportes0.tryLogin(":KaZV*bhi6", " Pl_\"l?$?kQ {r ;");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(empresaTransportes0);
      assertFalse(set0.contains(":KaZV*bhi6"));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDTransportes bDTransportes0 = null;
      try {
        bDTransportes0 = new BDTransportes((Map<String, EmpresaTransportes>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      bDTransportes0.setTransportes(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      bDTransportes0.setTransportes(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      bDTransportes0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        bDTransportes0.add((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertNotNull(empresaTransportes0);
      
      bDTransportes0.add(empresaTransportes0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      
      try { 
        bDTransportes0.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Locale locale0 = new Locale("fx", "fx");
      assertEquals("fx", locale0.getLanguage());
      assertEquals("FX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fx_FX", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("fx", locale0.getLanguage());
      assertEquals("FX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fx_FX", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("fx"));
      
      BDTransportes bDTransportes1 = bDTransportes0.clone();
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      bDTransportes1.setCodigos(set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals("fx", locale0.getLanguage());
      assertEquals("FX", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fx_FX", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("fx"));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      bDTransportes1.setTransportes(map0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      Map<String, EmpresaTransportes> map1 = bDTransportes0.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDLojas bDLojas0 = new BDLojas(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDLojas0);
      
      Set<String> set0 = bDLojas0.getCodigos();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      BDTransportes bDTransportes1 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(bDTransportes1);
      
      Map<String, EmpresaTransportes> map1 = bDTransportes1.getTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(map1.equals((Object)map0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map0, map1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(map1, map0);
      
      bDTransportes0.setCodigos(set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(bDTransportes0, bDTransportes1);
      
      EmpresaTransportes empresaTransportes0 = null;
      EmpresaTransportes empresaTransportes1 = bDTransportes1.tryLogin("ae%ix:flf5t`/Bj%x", "ae%ix:flf5t`/Bj%x");
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(map0.equals((Object)map1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(empresaTransportes1);
      assertFalse(linkedHashSet0.contains("ae%ix:flf5t`/Bj%x"));
      assertFalse(set0.contains("ae%ix:flf5t`/Bj%x"));
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(map0, map1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      // Undeclared exception!
      try { 
        bDTransportes1.updateTransportes2((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertNotNull(empresaTransportes0);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Encomenda encomenda0 = new Encomenda();
      assertFalse(encomenda0.isEntregue());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertFalse(encomenda0.isLevantada());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getCodigo());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getComprador());
      assertNotNull(encomenda0);
      
      boolean boolean0 = arrayList0.add(encomenda0);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(encomenda0.isEntregue());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.isPreparada());
      assertEquals(" ", encomenda0.getCodigo_user());
      assertFalse(encomenda0.isLevantada());
      assertEquals(" ", encomenda0.getCodigo_loja());
      assertEquals(" ", encomenda0.getCodigo());
      assertTrue(encomenda0.isEncomendaMedica());
      assertEquals(" ", encomenda0.getVendedor());
      assertEquals(" ", encomenda0.getComprador());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(encomenda0));
      
      utilizador0.setEncomendas(arrayList0);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals("", empresaTransportes0.getCodigo());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(encomenda0));
      
      Loja loja0 = null;
      double double0 = (-1022.9155);
      String string0 = bDTransportes0.printEmpresas(utilizador0, (Loja) null, (-1022.9155));
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      Map<String, EmpresaTransportes> map0 = bDTransportes0.getTransportes();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertSame(charset0, charset1);
      
      BDTransportes bDTransportes1 = new BDTransportes(map0, set0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(bDTransportes1);
      assertFalse(set0.contains(string0));
      
      String string1 = "#mngZM=i#MVDV#i";
      try { 
        bDTransportes1.getEmail("#mngZM=i#MVDV#i");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      String string0 = "";
      String string1 = "";
      int int0 = 0;
      String string2 = "";
      double double0 = 1336.4760657;
      double double1 = 1358.7;
      try { 
        bDTransportes0.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDGeral bDGeral0 = new BDGeral();
      assertNotNull(bDGeral0);
      
      BDGeral bDGeral1 = null;
      try {
        bDGeral1 = new BDGeral(bDGeral0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      Set<String> set0 = bDTransportes0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BDTransportes bDTransportes1 = new BDTransportes(hashMap0, set0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(bDTransportes1);
      
      try { 
        bDTransportes1.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes();
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BDLojas bDLojas0 = new BDLojas();
      assertNotNull(bDLojas0);
      
      BDLojas bDLojas1 = new BDLojas(bDLojas0);
      assertTrue(bDLojas1.equals((Object)bDLojas0));
      assertNotNull(bDLojas1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDTransportes bDTransportes2 = new BDTransportes(hashMap0, linkedHashSet0);
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertNotNull(empresaTransportes0);
      
      bDTransportes2.updateTransportes2(empresaTransportes0);
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes2, bDTransportes0);
      
      String string0 = bDTransportes0.printTransportes();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRota();
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("", "", "", "_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", 1827.17398751284, 1827.17398751284, arrayList0);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals("", empresaTransportes0.getNome());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1827.17398751284, utilizador0.getLongitude(), 0.01);
      assertEquals(1827.17398751284, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals("_wp1|rC`V9rb --->  encomendas pelo volunt\u00E1rio  || RATE --> -1057.28663577676\n", utilizador0.getNome());
      assertNotNull(utilizador0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Utilizador utilizador1 = new Utilizador();
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertNotNull(utilizador1);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertNotNull(loja0);
      
      String string1 = bDTransportes2.printEmpresasMed(utilizador1, loja0, 1827.17398751284);
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertNotNull(string1);
      assertEquals("0", string1);
      assertFalse(linkedHashSet0.contains(string1));
      assertNotSame(bDTransportes2, bDTransportes1);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(utilizador1, utilizador0);
      
      try { 
        bDTransportes1.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Utilizador> hashMap1 = new HashMap<String, Utilizador>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      BDUtilizador bDUtilizador0 = new BDUtilizador(hashMap1, set0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(bDUtilizador0);
      
      Set<String> set1 = bDUtilizador0.getCodigos();
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(set1);
      
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set1);
      assertTrue(set0.equals((Object)set1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(bDTransportes0);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertNotNull(empresaTransportes0);
      
      boolean boolean0 = bDTransportes0.existe(empresaTransportes0);
      assertTrue(set0.equals((Object)set1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertFalse(boolean0);
      
      EmpresaTransportes empresaTransportes1 = bDTransportes0.tryLogin("U}poB", "");
      assertTrue(set0.equals((Object)set1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertNull(empresaTransportes1);
      assertFalse(set0.contains(""));
      assertFalse(set1.contains(""));
      
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("U}poB", "", "M 9F@;WEAcL9@VHKo5", "k.K^Kxj", 2626.6689874524077, 0.0, (-1574.191143609), arrayList0, 849);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("M 9F@;WEAcL9@VHKo5", loja0.getCodigo());
      assertEquals("k.K^Kxj", loja0.getNome());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("U}poB", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(2626.6689874524077, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(849, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertNotNull(loja0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertNotNull(bDTransportes1);
      
      Set<String> set0 = bDTransportes1.getCodigos();
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      
      BDTransportes bDTransportes2 = new BDTransportes(hashMap0, set0);
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes0));
      assertTrue(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(bDTransportes2);
      
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getAvaliacoes());
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertNotNull(empresaTransportes0);
      
      empresaTransportes0.setAvaliacoes((-317));
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals((-317), empresaTransportes0.getAvaliacoes());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals("", empresaTransportes0.getTypeUser());
      
      bDTransportes2.updateTransporte(empresaTransportes0, 1338.7844391094263);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      boolean boolean0 = bDTransportes0.equals(bDTransportes2);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes0));
      assertFalse(bDTransportes2.equals((Object)bDTransportes1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes2, bDTransportes0);
      assertNotSame(bDTransportes2, bDTransportes1);
      
      Set<String> set1 = bDTransportes1.getCodigos();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertTrue(set1.equals((Object)set0));
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(set1, set0);
      
      BDTransportes bDTransportes3 = bDTransportes0.clone();
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes3.equals((Object)bDTransportes0));
      assertTrue(bDTransportes3.equals((Object)bDTransportes1));
      assertFalse(bDTransportes3.equals((Object)bDTransportes2));
      assertNotNull(bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes0);
      assertNotSame(bDTransportes3, bDTransportes1);
      assertNotSame(bDTransportes3, bDTransportes2);
      
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("", "", "K*:`95;< /`-Y", "", 1338.7844391094263, 0.0, 0.0, arrayList0, 868);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertNotNull(loja0);
      
      loja0.setLongitude(868);
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      
      List<EmpresaTransportes> list0 = bDTransportes1.transDisponiveisMedParse(loja0, (Utilizador) null);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertTrue(bDTransportes1.equals((Object)bDTransportes3));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(empresaTransportes0));
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes3);
      
      String string0 = bDTransportes1.printEmpresasMed((Utilizador) null, loja0, 868);
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertTrue(bDTransportes1.equals((Object)bDTransportes3));
      assertFalse(bDTransportes1.equals((Object)bDTransportes2));
      assertTrue(bDTransportes1.equals((Object)bDTransportes0));
      assertEquals(0, empresaTransportes0.getNif());
      assertEquals("", empresaTransportes0.getCodigo());
      assertEquals(0, empresaTransportes0.getVelocidade());
      assertEquals((-4.236659617434894), empresaTransportes0.getClassificao(), 0.01);
      assertEquals(0.0, empresaTransportes0.getRaioDeAcao(), 0.01);
      assertFalse(empresaTransportes0.aceitoTransporteMedicamentos());
      assertEquals(0.0, empresaTransportes0.getLongitude(), 0.01);
      assertEquals("", empresaTransportes0.getPassword());
      assertFalse(empresaTransportes0.isDisponivel());
      assertEquals(0.0, empresaTransportes0.getLatitude(), 0.01);
      assertEquals("", empresaTransportes0.getEmail());
      assertEquals("", empresaTransportes0.getNome());
      assertEquals(" ", empresaTransportes0.getLocal());
      assertEquals(0.0, empresaTransportes0.getCusto_km(), 0.01);
      assertEquals(0, empresaTransportes0.getMinutosDeEspera());
      assertEquals((-316), empresaTransportes0.getAvaliacoes());
      assertEquals("", empresaTransportes0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(1338.7844391094263, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("K*:`95;< /`-Y", loja0.getCodigo());
      assertEquals(868, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertNotNull(string0);
      assertEquals("0", string0);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
      assertNotSame(bDTransportes1, bDTransportes0);
      assertNotSame(bDTransportes1, bDTransportes2);
      assertNotSame(bDTransportes1, bDTransportes3);
      
      String string1 = bDTransportes0.printTransportes();
      assertFalse(string1.equals((Object)string0));
      assertFalse(bDTransportes0.equals((Object)bDTransportes2));
      assertTrue(bDTransportes0.equals((Object)bDTransportes1));
      assertTrue(bDTransportes0.equals((Object)bDTransportes3));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(bDTransportes0, bDTransportes2);
      assertNotSame(bDTransportes0, bDTransportes3);
      assertNotSame(bDTransportes0, bDTransportes1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      assertNotNull(bDTransportes0);
      
      boolean boolean0 = bDTransportes0.equals("7Ux`WGSMh~b*I~{j<2|");
      assertFalse(boolean0);
      
      boolean boolean1 = bDTransportes0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertNotNull(voluntario0);
      
      Double double0 = new Double((-1849));
      assertNotNull(double0);
      assertEquals((-1849.0), (double)double0, 0.01);
      
      voluntario0.updateRate(double0);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals((-1849.0), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      
      voluntario0.setMinutosDeEspera((-1849));
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals((-1849), voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals((-1849.0), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      
      boolean boolean2 = bDTransportes0.equals(voluntario0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals((-1849), voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals((-1849.0), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(boolean2);
      
      BDGeral bDGeral0 = new BDGeral();
      assertNotNull(bDGeral0);
      
      try { 
        bDGeral0.loginLoja("7Ux`WGSMh~b*I~{j<2|", "7Ux`WGSMh~b*I~{j<2|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDGeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BDTransportes bDTransportes0 = new BDTransportes(hashMap0, set0);
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      Utilizador utilizador0 = null;
      HashMap<String, Loja> hashMap1 = new HashMap<String, Loja>();
      BDLojas bDLojas0 = new BDLojas(hashMap1, set0);
      bDLojas0.tryLogin("", "oTh+:LbkH*R;p");
      Object object0 = new Object();
      bDLojas0.equals(object0);
      double double0 = (-752.700041);
      bDTransportes1.printEmpresas((Utilizador) null, (Loja) null, (-752.700041));
      try { 
        bDTransportes0.getEmail("Af");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      bDTransportes0.toString();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      bDTransportes0.add(empresaTransportes0);
      bDTransportes0.existe(empresaTransportes0);
      try { 
        bDTransportes0.encontraEnc("C\u00F3digo do utilizador: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      bDTransportes0.equals((Object) null);
      HashMap<String, EmpresaTransportes> hashMap0 = new HashMap<String, EmpresaTransportes>();
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.removeAll(arrayList1);
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes("mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", "mYXt4lS?=:&", (-968), (-968), (String) null, (-968), (-968), (-968), arrayList0, false, (-968), (-2521), false, 11, (-968));
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      HashMap<String, EmpresaTransportes> hashMap1 = new HashMap<String, EmpresaTransportes>(hashMap0);
      bDTransportes0.setTransportes(hashMap1);
      ArrayList<Encomenda> arrayList2 = new ArrayList<Encomenda>();
      EmpresaTransportes empresaTransportes2 = new EmpresaTransportes("m", "^)", "m", "LISTA DE PRODUTOS\n", 0, 0, "m", 0, 0, 0, arrayList2, true, 0, 0, true, 0, (-199));
      empresaTransportes2.setEmail("m");
      bDTransportes0.updateTransportes2(empresaTransportes2);
      try { 
        bDTransportes0.encontraEnc("mYXt4lS?=:&");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      bDTransportes0.toString();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setVelocidade((-3002));
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      bDTransportes0.updateTransporte(empresaTransportes1, 1857.33545296);
      Loja loja0 = new Loja();
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      Utilizador utilizador0 = new Utilizador();
      bDTransportes0.transDisponiveis(loja1, utilizador0);
      bDTransportes0.existeCodigo("tr-?u`uWw");
      Loja loja2 = new Loja();
      bDTransportes0.transDisponiveis(loja2, utilizador0);
      bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      bDTransportes0.printTransportes();
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      utilizador0.getEncomendas();
      bDTransportes0.existeEmail("k.K^Kxj");
      bDTransportes0.transDisponiveisMedParse(loja2, utilizador0);
      arrayList0.trimToSize();
      bDTransportes0.tryLogin("", "U}poB");
      bDTransportes0.existeEmail("U}poB");
      bDTransportes0.printEmpresasMed(utilizador0, loja1, 30);
      bDTransportes0.getTransportes();
      bDTransportes0.printEmpresasMed(utilizador0, loja1, 0.0);
      bDTransportes0.printEmpresas(utilizador0, loja0, 0.0);
      bDTransportes0.transDisponiveisMedParse(loja1, utilizador0);
      try { 
        bDTransportes0.getEmail("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      BDTransportes bDTransportes1 = new BDTransportes(bDTransportes0);
      bDTransportes1.toString();
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      empresaTransportes0.setVelocidade((-3002));
      EmpresaTransportes empresaTransportes1 = new EmpresaTransportes(empresaTransportes0);
      bDTransportes1.updateTransporte(empresaTransportes1, 1857.33545296);
      Loja loja0 = new Loja();
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      int int0 = 30;
      Loja loja1 = new Loja("Total de Empresas de transporte: \n{}", "P1", "tr-?u`uWw", "=1To&4z_-c..*~&Rb", 1857.33545296, 1857.33545296, 1857.33545296, arrayList0, 30);
      Utilizador utilizador0 = new Utilizador();
      bDTransportes0.transDisponiveis(loja1, utilizador0);
      bDTransportes1.existeCodigo("tr-?u`uWw");
      Loja loja2 = new Loja();
      utilizador0.setNome("tr-?u`uWw");
      bDTransportes1.transDisponiveis(loja2, utilizador0);
      bDTransportes0.equals("Total de Empresas de transporte: \n{}");
      bDTransportes0.printTransportes();
      loja2.setTypeUser("Total de Empresas de transporte: \n{}");
      utilizador0.getEncomendas();
      bDTransportes0.existeEmail("k.K^Kxj");
      bDTransportes1.transDisponiveisMedParse(loja2, utilizador0);
      String string0 = "";
      arrayList0.trimToSize();
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BDTransportes bDTransportes0 = new BDTransportes();
      Utilizador utilizador0 = null;
      EmpresaTransportes empresaTransportes0 = new EmpresaTransportes();
      ArrayList<Encomenda> arrayList0 = empresaTransportes0.getRegistos();
      int int0 = (-949);
      Loja loja0 = new Loja(";^", ";^", ";^", "", (-679.4542335), 220.44352863863, 220.44352863863, arrayList0, (-949));
      bDTransportes0.printEmpresas((Utilizador) null, loja0, 1940.22031115189);
      Loja loja1 = new Loja();
      Loja loja2 = new Loja(loja1);
      bDTransportes0.printEmpresasMed((Utilizador) null, loja2, 1.0);
      String string0 = "";
      bDTransportes0.tryLogin("", "");
      // Undeclared exception!
      try { 
        bDTransportes0.updateTransportes2((EmpresaTransportes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDTransportes", e);
      }
  }
}
