/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 21:13:28 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setPreparada(false);
      encomenda0.setCodigo("Raio de a\u00E7\u00E3o: ");
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      Double double0 = new Double(0.0);
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.porEntregar();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("Im^\" =T!1Rr");
      voluntario0.calculaAtrasos();
      voluntario0.getRaio_acao();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setRaio_acao((-1.0));
      voluntario0.setLongitude(0.0);
      voluntario0.equals(voluntario1);
      voluntario1.getAvaliacoes();
      try { 
        voluntario1.getEncomenda("Im^\" =T!1Rr");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setMinutosDeEspera((-1));
      Voluntario voluntario1 = new Voluntario("]aCu", "]aCu", "]aCu", "|ZD\rHF", true, 0.0, (-2011.8295039), localDate0, 1268.55331507, list0, 0.0, 100, true, 100, 100);
      voluntario1.getNaoEntregue();
      Voluntario voluntario2 = voluntario1.clone();
      voluntario2.porLevantar();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2759L);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("w3u^", "}p8|.|wrY.Jv", "}p8|.|wrY.Jv", "}p8|.|wrY.Jv", true, 442.8068, 1.0, localDate0, 2759L, linkedList0, 0.0, (-360), true, (-360), 2652);
      voluntario0.getLongitude();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(1270);
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.existe("@RCg6$eU>]6{/sE");
      voluntario1.getHistorico();
      voluntario1.setPassword("@RCg6$eU>]6{/sE");
      voluntario0.porLevantar();
      voluntario0.equals(voluntario1);
      voluntario0.getLongitude();
      voluntario0.porEntregar();
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("@RCg6$eU>]6{/sE", "@RCg6$eU>]6{/sE", "5Ds5", 0.0, "5Ds5", (String) null, map0, true, localDateTime0, false, false, false);
      encomenda1.setEncomendaMedica(false);
      encomenda1.setCodigo("5Ds5");
      Encomenda encomenda2 = new Encomenda(encomenda1);
      voluntario0.updateEncomendaPreparada(encomenda2);
      voluntario1.calculaAtrasos();
      voluntario0.porLevantar();
      voluntario1.removeEncomenda((String) null);
      Object object0 = new Object();
      voluntario0.equals(object0);
      Voluntario voluntario2 = new Voluntario(voluntario0);
      // Undeclared exception!
      try { 
        voluntario0.equals(voluntario2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-164L));
      voluntario0.equals("");
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.equals(encomenda0);
      voluntario1.setNome(" |t;TGF");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      LinkedHashSet<Encomenda> linkedHashSet0 = new LinkedHashSet<Encomenda>();
      linkedList0.addAll((Collection<? extends Encomenda>) linkedHashSet0);
      voluntario1.setVelocidade(3579);
      voluntario1.porEntregar();
      voluntario0.aceitaMedicamentos(false);
      voluntario1.setHistorico(linkedList0);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario1.addEncomenda(encomenda0);
      voluntario1.setMinutosDeEspera(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getPreparadas();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario1.setNome("");
      voluntario0.getClassificacao();
      Double double0 = new Double((-855.20091413));
      voluntario1.updateRate(double0);
      voluntario1.porLevantar();
      voluntario0.getMinutosDeEspera();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1477);
      LocalDateTime localDateTime1 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.getRaio_acao();
      Voluntario voluntario1 = voluntario0.clone();
      Encomenda encomenda0 = new Encomenda();
      voluntario1.updateEncomendaLoja(encomenda0);
      voluntario0.setLongitude(0.0);
      voluntario0.equals(voluntario1);
      voluntario0.getPreparadas();
      long long0 = (-6828L);
      // Undeclared exception!
      try { 
        ZoneOffset.of("0");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 0
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-164L));
      voluntario0.equals("");
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.equals(encomenda0);
      voluntario1.setNome(" |t;TGF");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      LinkedHashSet<Encomenda> linkedHashSet0 = new LinkedHashSet<Encomenda>();
      linkedList0.addAll((Collection<? extends Encomenda>) linkedHashSet0);
      voluntario1.setVelocidade(3579);
      voluntario1.porEntregar();
      voluntario0.aceitaMedicamentos(false);
      voluntario1.setHistorico(linkedList0);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario1.addEncomenda(encomenda0);
      voluntario1.setMinutosDeEspera(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getPreparadas();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario1.setNome("");
      voluntario0.getClassificacao();
      Double double0 = new Double((-855.20091413));
      voluntario1.updateRate(double0);
      voluntario1.porLevantar();
      voluntario0.getMinutosDeEspera();
      voluntario0.removeEncomenda(" |t;TGF");
      voluntario0.getNaoEntregue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.getPreparadas();
      voluntario0.removeEncomenda(" encomendas pelo volunt\u00E1rio ");
      voluntario0.calculaAtrasos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.getEncomenda(" encomendas pelo volunt\u00E1rio ");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso(0);
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      encomenda0.clone();
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.existe("");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getEncomenda(" encomendas pelo volunt\u00E1rio ");
      try { 
        voluntario0.getEncomenda("nAgVfU1Rs1M<-obRQ_2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("Im\" =T!1Rr");
      voluntario0.calculaAtrasos();
      voluntario0.getRaio_acao();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setLongitude(0.0);
      voluntario1.setDisponibilidade(true);
      voluntario0.equals(voluntario1);
      voluntario1.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEntregue(true);
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("e&bsX5XH", "e&bsX5XH", "e&bsX5XH", "e&bsX5XH", true, 0.0, 0.0, (LocalDate) null, (-2334.37735127525), linkedList0, 226.08, 851, false, (-1244), 5376);
      voluntario0.getHistorico();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      voluntario0.setDisponibilidade(false);
      System.setCurrentTimeMillis(30);
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.setMinutosDeEspera((-1244));
      voluntario0.getPreparadas();
      System.setCurrentTimeMillis(3733L);
      try { 
        voluntario0.getEncomenda("7;DFJR@L>r");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("Im\" =T!1Rr");
      voluntario0.calculaAtrasos();
      voluntario0.setAvaliacoes((-465));
      voluntario0.getRaio_acao();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setLongitude(0.0);
      voluntario0.equals(voluntario1);
      voluntario1.getAvaliacoes();
      voluntario1.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.calculaAtrasos();
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 101.5488754984);
      Double.min((-1.0), 1565.793626);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo("Alcool");
      encomenda0.setVendedor("");
      encomenda0.setLevantada(true);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomenda(encomenda0);
      System.setCurrentTimeMillis(1128L);
      voluntario0.existe("Alcool");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 101.5488754984);
      voluntario0.setRaio_acao(4529.0);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      voluntario0.setDisponibilidade(true);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEntregue(true);
      encomenda0.setCodigo("Alcool");
      encomenda0.setVendedor("");
      encomenda0.setLevantada(true);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.calculaAtrasos();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = Period.of(1, 1, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (String) null, (String) null, false, (-1.0), 1.0, localDate0, 3530.291434929, linkedList0, 1167.095581840849, 1, false, 85, (-1970282723));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getCodigo();
      voluntario0.porLevantar();
      voluntario0.toString();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      voluntario0.updateEncomendaPreparada(encomenda0);
      Random.setNextRandom(0);
      voluntario1.getRaio_acao();
      voluntario0.getRaio_acao();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      double double0 = new Double(0.0);
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.porLevantar();
      voluntario0.updateEncomendaLoja(encomenda1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setNome((String) null);
      voluntario1.getAvaliacoes();
      voluntario1.porLevantar();
      voluntario0.calculaAtrasos();
      voluntario1.setDisponibilidade(false);
      voluntario1.getNome();
      voluntario1.getLatitude();
      voluntario0.setMinutosDeEspera(94);
      voluntario0.getDisponibilidade();
      Double double0 = new Double(0.0);
      voluntario0.updateRate(double0);
      voluntario0.getHistorico();
      voluntario0.getLongitude();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.updateEncomenda(encomenda1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.removeEncomenda((String) null);
      voluntario0.getNaoEntregue();
      voluntario0.setVelocidade(2150);
      voluntario0.getNome();
      voluntario0.calculaAtrasos();
      voluntario0.setLatitude(223.73);
      voluntario0.getVelocidade();
      voluntario0.setDisponibilidade(false);
      try { 
        voluntario0.getEncomenda("Encomenda: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("aH9XC", "aH9XC", "aH9XC", "aH9XC", true, 1.0, 0.0, (LocalDate) null, 0.0, linkedList0, (-604.47294385), 1954, true, 1954, 1954);
      voluntario0.getInicio_transporte();
      voluntario0.getNaoEntregue();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(" e ", " e ", "M+,c\"$J8pKU?Ry", 782.5086012372351, "", " e ", hashMap0, false, localDateTime0, false, false, false);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.updateEncomenda(encomenda1);
      voluntario0.getNome();
      voluntario0.getNaoEntregue();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 101.5488754984);
      Double.min((-1.0), 1565.793626);
      Double.min((-1695.6437367658468), 1.0);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo("Alcool");
      encomenda0.setVendedor("");
      encomenda0.setLevantada(true);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 4529);
      Double.min((-1.0), 1565.793626);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setVendedor("");
      encomenda0.setLevantada(true);
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getVelocidade();
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario(">~8~(k`", ">~8~(k`", "slm}+`C|6_xXWmSQ;:", "Saco de lixo de 50l", false, 0.0, (-1346.4939356502), (LocalDate) null, (-1718.8756669061), list0, 2221.878930378459, (-2136852538), false, 1674, 1674);
      voluntario1.setAvaliacoes(1674);
      voluntario1.getLongitude();
      voluntario0.setLatitude(0.0);
      System.setCurrentTimeMillis((-2136852538));
      voluntario1.calculaAtrasos();
      voluntario0.getRaio_acao();
      voluntario1.porEntregar();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.getRaio_acao();
      voluntario0.setLongitude(0.0);
      voluntario0.equals(voluntario0);
      voluntario0.getAvaliacoes();
      voluntario0.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 101.5488754984);
      Double.min((-1.0), 1565.793626);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("&");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo("Alcool");
      encomenda0.setVendedor("");
      voluntario0.setLatitude(594.9319935879846);
      encomenda0.setLevantada(true);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getLatitude();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setMinutosDeEspera(30);
      voluntario0.setVelocidade(30);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.porLevantar();
      voluntario0.getNaoEntregue();
      voluntario0.setEmail(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.toString();
      voluntario0.setMinutosDeEspera((-441));
      voluntario0.getCodigo();
      voluntario1.equals(voluntario0);
      voluntario1.setClassificacao(30);
      voluntario1.getNome();
      voluntario0.setLongitude(2636.81148);
      voluntario1.getClassificacao();
      voluntario0.getRaio_acao();
      voluntario0.setRaio_acao(0.0);
      voluntario0.getNaoEntregue();
      Voluntario voluntario2 = voluntario0.clone();
      voluntario0.getRaio_acao();
      voluntario1.getPreparadas();
      Voluntario voluntario3 = new Voluntario();
      List<Encomenda> list0 = voluntario3.getHistorico();
      voluntario3.toString();
      voluntario0.setHistorico(list0);
      voluntario1.getPreparadas();
      voluntario2.getCodigo();
      voluntario3.existe("");
      voluntario3.setDisponibilidade(false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.aceitaMedicamentos(true);
      voluntario0.setNome("lE3A");
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setNome("lE3A");
      voluntario0.getRaio_acao();
      voluntario0.setClassificacao((-492.0));
      voluntario0.getNaoEntregue();
      voluntario0.equals("0");
      voluntario0.getVelocidade();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      String string0 = "Raio de a\u00E7\u00E3o: ";
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      try { 
        voluntario0.getEncomenda(" encomendas pelo volunt\u00E1rio ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNaoEntregue();
      voluntario0.setLatitude((-1.0));
      voluntario0.getHistorico();
      voluntario0.aceitaMedicamentos(true);
      voluntario0.removeEncomenda("|_j=jmbKQ7)]4");
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setLongitude(1.0);
      voluntario1.existe("");
      voluntario1.porEntregar();
      voluntario0.setRaio_acao((-1984.4313281462));
      voluntario0.setCodigo("");
      voluntario0.setRaio_acao((-1.0));
      voluntario0.setNome("");
      voluntario0.getNaoEntregue();
      voluntario0.getRaio_acao();
      String string0 = "}p_<@fDuTWi";
      voluntario0.setNome("}p_<@fDuTWi");
      voluntario0.setMinutosDeEspera((-1741));
      voluntario0.setClassificacao((-2289.6251425898986));
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Period period0 = Period.of((-1825), (-1825), 0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1825));
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Rny!j0;'M", "Rny!j0;'M", "(", ",n \"1,BsZcsP[TaS", true, (-297.02555), 256.11543900387, localDate0, 1.0, linkedList0, 1.0, (-1825), false, (-985), (-1825));
      voluntario0.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.aceitaMedicamentos(true);
      voluntario0.setNome("lE3A");
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setNome("lE3A");
      voluntario0.toString();
      voluntario0.getRaio_acao();
      voluntario0.setTypeUser(" <--- O utilizador \u00E9: \n\n\nNome: lE3A\nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.setClassificacao((-492.0));
      voluntario0.getNaoEntregue();
      try { 
        voluntario0.getEncomenda("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.equals(voluntario1);
      voluntario0.setClassificacao((-3298.26378584139));
      Voluntario voluntario2 = new Voluntario(voluntario0);
      try { 
        voluntario2.getEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("/", "/", "Hora de registo: ", "/", false, (-290.399608393), (-290.399608393), localDate0, (-148.15787276), linkedList0, (-290.399608393), (-1170), true, 2926, 952);
      voluntario0.setNome("/");
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1170));
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Encomenda encomenda0 = new Encomenda("phS`L(+3mlW5c;/gc<", "", "phS`L(+3mlW5c;/gc<", 0.0, "Hora de registo: ", "Hora de registo: ", hashMap0, false, localDateTime0, false, false, true);
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.getLatitude();
      voluntario0.getClassificacao();
      voluntario0.porEntregar();
      voluntario0.getHistorico();
      voluntario0.getMinutosDeEspera();
      voluntario0.setLongitude((-1772.41));
      voluntario0.getCodigo();
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setMinutosDeEspera(30);
      voluntario0.setVelocidade(30);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.porLevantar();
      voluntario0.getNaoEntregue();
      voluntario0.setEmail(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.toString();
      voluntario0.setMinutosDeEspera((-441));
      voluntario0.getCodigo();
      voluntario1.equals(voluntario0);
      Encomenda encomenda0 = null;
      voluntario1.setClassificacao(30);
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1712L);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      linkedList0.iterator();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      encomenda0.setPeso(0.0);
      encomenda0.setLevantada(true);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (String) null, (String) null, false, 96.864963, 96.864963, localDate0, 492.4951554, linkedList0, 1712L, 3458, false, 3458, 216);
      voluntario0.setHistorico(linkedList0);
      voluntario0.equals((Object) null);
      // Undeclared exception!
      try { 
        voluntario0.removeEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade(1252);
      Double double0 = new Double(167.544);
      Double double1 = new Double(167.544);
      Double.max(167.544, (-2137.96099797521));
      voluntario0.updateRate(double1);
      Double.max(0.0, 167.544);
      voluntario0.updateRate(double0);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setAvaliacoes(0);
      voluntario0.getCodigo();
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo_loja("UW[fT.*@l30x{");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LinkedList<Encomenda> linkedList1 = new LinkedList<Encomenda>();
      linkedList0.addAll((Collection<? extends Encomenda>) linkedList1);
      linkedList0.add(encomenda1);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (String) null, "UW[fT.*@l30x{", false, 0.0, 0.0, localDate0, 0.0, linkedList0, (-2713.6398596), (-1084), false, (-306), (-1084));
      voluntario0.toString();
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getDisponibilidade();
      voluntario0.setNome("UW[fT.*@l30x{");
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setAvaliacoes((-1084));
      voluntario0.setHistorico(linkedList0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Double double0 = new Double(3936.44461);
      voluntario0.updateRate(double0);
      voluntario0.setLatitude(74.972134344137);
      voluntario0.setRaio_acao((-3763.03375517782));
      voluntario0.getDisponibilidade();
      voluntario0.toString();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getPreparadas();
      voluntario0.getDisponibilidade();
      Double double0 = new Double(501.0);
      Double.min(501.0, 501.0);
      Double.max(501.0, 1.0);
      voluntario0.removeEncomenda("");
      Double.max(0.0, 501.0);
      String string0 = "";
      voluntario0.setEmail("");
      Double.min((-1.0), (-281.024683703));
      voluntario0.setRaio_acao(987.74939);
      voluntario0.updateRate(double0);
      voluntario0.toString();
      voluntario0.setRaio_acao((-281.024683703));
      voluntario0.getAvaliacoes();
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("Im\" =T!1Rr");
      voluntario0.calculaAtrasos();
      voluntario0.getRaio_acao();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setLongitude(0.0);
      voluntario0.equals(voluntario1);
      voluntario1.getAvaliacoes();
      try { 
        voluntario1.getEncomenda("Im\" =T!1Rr");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getAvaliacoes();
      voluntario0.setMinutosDeEspera((-1));
      voluntario0.toString();
      voluntario0.porEntregar();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setHistorico(list0);
      voluntario0.setMinutosDeEspera(0);
      voluntario0.getLatitude();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getLatitude();
      voluntario0.setAvaliacoes(0);
      voluntario0.porLevantar();
      voluntario0.getMinutosDeEspera();
      voluntario0.setVelocidade((-1));
      voluntario0.getInicio_transporte();
      voluntario0.getLongitude();
      voluntario0.setCodigo(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1577.06006516);
      voluntario0.updateRate(double0);
      voluntario0.setLatitude(0);
      voluntario0.setLongitude(0.0);
      voluntario0.setHistorico(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setMinutosDeEspera(1764);
      voluntario0.setVelocidade(0);
      voluntario0.setDisponibilidade(false);
      // Undeclared exception!
      try { 
        voluntario0.setHistorico((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1773L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("F%R{cb4|", "F%R{cb4|", "F%R{cb4|", "bdze@h@Z", true, 0.0, 0.0, localDate0, 0.0, linkedList0, 425.0, (-544), true, (-2684), (-544));
      voluntario0.setLongitude((-2684));
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.equals(" ");
      encomenda0.setPeso(425.0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getClassificacao();
      voluntario0.existe("bdze@h@Z");
      voluntario0.getMinutosDeEspera();
      voluntario0.setNome((String) null);
      voluntario0.getPreparadas();
      voluntario0.equals(linkedList0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setDisponibilidade(true);
      voluntario0.setCodigo((String) null);
      voluntario1.setLongitude(1126.02409627334);
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = false;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("", (String) null, " ?h7&2OXS`)EAP", "", false, (-1525.50196131905), (-1366.472240230871), localDate0, 0L, linkedList0, 1.0, (-1), true, 1, (-1));
      voluntario0.removeEncomenda("W~13ip>_I2HZQ5");
      linkedList0.add((Encomenda) null);
      Voluntario voluntario1 = null;
      try {
        voluntario1 = new Voluntario("Ew", "W~13ip>_I2HZQ5", " ?h7&2OXS`)EAP", "", false, (-1525.50196131905), (-1525.50196131905), localDate0, 3477.9151708848613, linkedList0, 0L, (-596), true, 1, (-596));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      int int0 = 0;
      Voluntario voluntario1 = new Voluntario("", "", "", "", false, 1263.5, 0.0, localDate0, (-1.0), list0, 2639.0, 0, false, 0, 0);
      Voluntario voluntario2 = new Voluntario("zJ!!BL)Bqq=s", "", "", "zJ!!BL)Bqq=s", true, (-1.0), 0, localDate0, (-987.31358922), list0, (-1.0), 487, true, 487, 0);
      voluntario2.removeEncomenda("zJ!!BL)Bqq=s");
      // Undeclared exception!
      try { 
        voluntario1.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("Comprador: ", "", "IhlhEw[UXCF)[BWS%", "", false, 0.0, 0.0, localDate0, (-3979.999944113), list0, (-3979.999944113), 0, true, 630, 630);
      voluntario1.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getHistorico();
      voluntario0.toString();
      voluntario0.getAvaliacoes();
      voluntario0.setPassword(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.getPreparadas();
      Double double0 = new Double(1111.0);
      Double.sum(0.0, 0.0);
      voluntario0.updateRate(double0);
      voluntario0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        voluntario0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(4116.1575996206);
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.equals("");
      Double double0 = new Double((-691.27127));
      voluntario0.updateRate(double0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setAvaliacoes(1);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setMinutosDeEspera(0);
      voluntario0.getHistorico();
      voluntario0.setClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setPassword("");
      voluntario0.setAvaliacoes(1);
      voluntario0.toString();
      voluntario1.aceitaMedicamentos(false);
      voluntario0.getVelocidade();
      voluntario1.getDisponibilidade();
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.setTypeUser("");
      voluntario1.getLatitude();
      try { 
        voluntario0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setRaio_acao(0.0);
      voluntario0.setAvaliacoes(0);
      voluntario1.setDisponibilidade(false);
      voluntario1.getClassificacao();
      voluntario0.getHistorico();
      voluntario1.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.existe("0J8brB;N");
      Encomenda encomenda0 = new Encomenda();
      Voluntario voluntario2 = new Voluntario(voluntario0);
      encomenda0.equals(voluntario2);
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario0.setRaio_acao((-482.6384));
      voluntario1.updateEncomenda(encomenda0);
      voluntario1.setDisponibilidade(true);
      voluntario1.porEntregar();
      voluntario1.setLatitude((-1.0));
      voluntario1.getLongitude();
      voluntario1.getInicio_transporte();
      voluntario0.getDisponibilidade();
      List<Encomenda> list0 = voluntario2.getHistorico();
      encomenda0.setEncomendaMedica(true);
      voluntario0.setHistorico(list0);
      voluntario0.toString();
      voluntario0.setMinutosDeEspera(0);
      voluntario2.aceitaMedicamentos(true);
      voluntario2.updateEncomenda(encomenda0);
      voluntario2.addEncomenda(encomenda0);
      voluntario0.getMinutosDeEspera();
      voluntario0.removeEncomenda("y)|QNx6!]0(M");
      voluntario2.getAvaliacoes();
      voluntario2.setDisponibilidade(false);
      voluntario2.updateEncomenda(encomenda0);
      // Undeclared exception!
      try { 
        voluntario1.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.updateEncomenda(encomenda1);
      voluntario0.getNome();
      voluntario0.getAvaliacoes();
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.porLevantar();
      String string0 = "\n";
      String string1 = "n0";
      double double0 = 3619.646;
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, (-8), 0, 3382, 0, (-1333), 94);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -8
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      double double0 = 4651.4501;
      // Undeclared exception!
      try { 
        voluntario1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEncomendaMedica(true);
      voluntario0.addEncomenda(encomenda0);
      voluntario0.removeEncomenda("");
      voluntario0.equals("");
      voluntario0.getClassificacao();
      voluntario0.setCodigo("V");
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getHistorico();
      voluntario0.setRaio_acao((-239.77536));
      voluntario0.getHistorico();
      voluntario0.getHistorico();
      voluntario0.aceitoTransporteMedicamentos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setLatitude((-1.0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(false);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getHistorico();
      Period period0 = Period.ofDays((-1859));
      Period period1 = period0.minusDays((-1859));
      IsoChronology isoChronology0 = period1.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.aceitaMedicamentos(true);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setVelocidade(0);
      voluntario0.getDisponibilidade();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.getNome();
      voluntario0.removeEncomenda("");
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.removeEncomenda("Raio de a\u00E7\u00E3o: ");
      voluntario1.getRaio_acao();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getNome();
      voluntario0.setAvaliacoes((-5498));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.setVelocidade(0);
      String string0 = "Encomenda";
      try { 
        voluntario0.getEncomenda("Encomenda");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = voluntario0.clone();
      String string0 = "/";
      voluntario0.setNome("/");
      voluntario0.setMinutosDeEspera((-2143));
      voluntario0.porLevantar();
      voluntario0.porEntregar();
      // Undeclared exception!
      try { 
        voluntario1.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      try { 
        voluntario0.getEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.aceitoTransporteMedicamentos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.porLevantar();
      // Undeclared exception!
      try { 
        voluntario1.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword((String) null);
      voluntario0.setAvaliacoes((-3325));
      voluntario0.porEntregar();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_ORDINAL_DATE;
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.getHistorico();
      double double0 = (-2611.2627715313);
      voluntario0.removeEncomenda("Sov+P\"Ka4!iVnRv2");
      // Undeclared exception!
      try { 
        voluntario0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.aceitaMedicamentos(false);
      voluntario0.clone();
      voluntario0.existe("iQ");
      voluntario0.getNaoEntregue();
      voluntario0.setVelocidade((-1));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setMinutosDeEspera(1340);
      voluntario0.setLongitude((-1254.08280583));
      voluntario0.getNaoEntregue();
      voluntario0.getCodigo();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setNome("_tOE6^*m\" eTw_hD");
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getRaio_acao();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "lUT(gAKi";
      String string1 = "| m";
      String string2 = "%d6+V+ft[_";
      boolean boolean0 = false;
      double double0 = 1.0;
      int int0 = 2147483645;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(2147483645, 2147483645);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): 2147483645
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.equals(encomenda0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.existe(";*D|");
      voluntario1.equals((Object) null);
      voluntario1.porLevantar();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.updateEncomenda(encomenda1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setPreparada(false);
      encomenda0.setCodigo("Raio de a\u00E7\u00E3o: ");
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      Double double0 = new Double(0.0);
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.porEntregar();
      voluntario0.updateEncomendaPreparada(encomenda0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Random.setNextRandom(1270);
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.existe("@RCg6$eU>]6{/sE");
      voluntario1.getHistorico();
      voluntario1.setPassword("@RCg6$eU>]6{/sE");
      voluntario0.porLevantar();
      voluntario0.equals(voluntario1);
      voluntario1.getLongitude();
      voluntario0.porEntregar();
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("@RCg6$eU>]6{/sE", "@RCg6$eU>]6{/sE", "5Ds5", 0.0, "5Ds5", (String) null, map0, true, localDateTime0, true, false, false);
      encomenda1.setEncomendaMedica(false);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      voluntario0.updateEncomendaPreparada(encomenda2);
      voluntario1.calculaAtrasos();
      voluntario0.porLevantar();
      voluntario1.removeEncomenda((String) null);
      Object object0 = new Object();
      voluntario0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Period period0 = Period.ofWeeks(1372);
      period0.minusYears(1372);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("r~m?EZA#Pg", "ODQWh>R'?W:bSTI^1T", "r~m?EZA#Pg", "", true, 4671.947013711627, 4671.947013711627, localDate0, 0.0, linkedList0, 0.0, (-3908), true, 1372, 2920);
      voluntario0.getMinutosDeEspera();
      voluntario0.existe("ODQWh>R'?W:bSTI^1T");
      voluntario0.setVelocidade(2920);
      voluntario0.getNome();
      voluntario0.getDisponibilidade();
      voluntario0.setAvaliacoes(2920);
      voluntario0.getHistorico();
      voluntario0.toString();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3908));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setTypeUser("Alcool");
      voluntario0.setRaio_acao((-1983.5616));
      voluntario0.toString();
      voluntario0.getPreparadas();
      Random.setNextRandom(485);
      voluntario0.calculaAtrasos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.porEntregar();
      voluntario0.getNaoEntregue();
      try { 
        voluntario0.getEncomenda("Hora de registo: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setTypeUser("Alcool");
      voluntario0.setRaio_acao((-1983.5616));
      voluntario0.toString();
      Random.setNextRandom(485);
      voluntario0.calculaAtrasos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade((-1933805653));
      voluntario0.setAvaliacoes(0);
      voluntario0.setCodigo("Raio de a\u00E7\u00E3o: ");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1.0));
      encomenda0.setCodigo_loja("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      encomenda0.setVendedor("Raio de a\u00E7\u00E3o: ");
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setLatitude(0.0);
      voluntario0.porLevantar();
      encomenda0.setCodigo(" encomendas pelo volunt\u00E1rio ");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getCodigo();
      voluntario0.getRaio_acao();
      voluntario0.existe("Raio de a\u00E7\u00E3o: ");
      voluntario0.getRaio_acao();
      voluntario0.getPreparadas();
      voluntario0.getLongitude();
      voluntario0.getCodigo();
      voluntario0.getVelocidade();
      voluntario0.equals("Raio de a\u00E7\u00E3o: ");
      voluntario0.getLongitude();
      voluntario0.getPreparadas();
      voluntario0.porEntregar();
      try { 
        voluntario0.getEncomenda("VqZD4B'I<IK)oF3^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-164L));
      voluntario0.equals("");
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.equals(encomenda0);
      voluntario1.setNome("");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      LinkedHashSet<Encomenda> linkedHashSet0 = new LinkedHashSet<Encomenda>();
      linkedList0.addAll((Collection<? extends Encomenda>) linkedHashSet0);
      voluntario1.setVelocidade(3579);
      voluntario1.porEntregar();
      voluntario0.aceitaMedicamentos(false);
      voluntario1.setHistorico(linkedList0);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario1.addEncomenda(encomenda0);
      voluntario1.setMinutosDeEspera(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getPreparadas();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario1.setNome("");
      voluntario0.getClassificacao();
      Double double0 = new Double((-855.20091413));
      voluntario1.updateRate(double0);
      voluntario1.porLevantar();
      voluntario0.getMinutosDeEspera();
      voluntario0.removeEncomenda("");
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-164L));
      voluntario0.equals("");
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.equals(encomenda0);
      voluntario1.setNome(" |t;TGF");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      LinkedHashSet<Encomenda> linkedHashSet0 = new LinkedHashSet<Encomenda>();
      linkedList0.addAll((Collection<? extends Encomenda>) linkedHashSet0);
      voluntario1.setVelocidade(3579);
      voluntario0.aceitaMedicamentos(false);
      voluntario1.porEntregar();
      voluntario0.aceitaMedicamentos(false);
      voluntario1.setHistorico(linkedList0);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario1.addEncomenda(encomenda0);
      voluntario1.setMinutosDeEspera(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getPreparadas();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario1.setNome("");
      voluntario0.getClassificacao();
      Double double0 = new Double((-855.20091413));
      voluntario1.updateRate(double0);
      voluntario1.porLevantar();
      voluntario0.getMinutosDeEspera();
      voluntario0.removeEncomenda(" |t;TGF");
      voluntario0.getNaoEntregue();
      assertTrue(voluntario0.equals((Object)voluntario1));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = ";}}.\":(PN'";
      String string1 = "Alcool";
      String string2 = ";#Iv=|+WMM0`O+w_+jv";
      boolean boolean0 = false;
      double double0 = (-414.39729);
      double double1 = (-3751.3);
      int int0 = 2184;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(2184, 1014);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 1014
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      int int0 = voluntario0.calculaAtrasos();
      double double0 = voluntario0.getRaio_acao();
      assertEquals(0.0, double0, 0.01);
      
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setLongitude(0.0);
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertTrue(boolean0);
      
      int int1 = voluntario1.getAvaliacoes();
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneOffset.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.setAvaliacoes(4529);
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      Double double0 = new Double(1565.793626);
      Double.isFinite(4529);
      voluntario0.getNaoEntregue();
      Double.max(4529, 101.5488754984);
      Double.min((-1.0), 1565.793626);
      voluntario0.setAvaliacoes(4529);
      voluntario0.updateRate(double0);
      voluntario0.setCodigo("");
      voluntario0.setAvaliacoes(4529);
      voluntario0.setDisponibilidade(true);
      voluntario0.setClassificacao(2302.405661801);
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setVendedor("");
      encomenda0.setLevantada(true);
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.setPeso(0.0);
      voluntario0.updateEncomenda(encomenda0);
      encomenda0.getProdutos();
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getVelocidade();
      voluntario0.updateEncomenda(encomenda0);
      try { 
        voluntario0.getEncomenda("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }
}
