%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0
-module(protocol).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_SignupErrors/1, enum_value_by_symbol_SignupErrors/1]).
-export([enum_symbol_by_value_LoginErrors/1, enum_value_by_symbol_LoginErrors/1]).
-export([enum_symbol_by_value_AuthType/1, enum_value_by_symbol_AuthType/1]).
-export([enum_symbol_by_value_OperationType/1, enum_value_by_symbol_OperationType/1]).
-export([enum_symbol_by_value_LocationOperationType/1, enum_value_by_symbol_LocationOperationType/1]).
-export([enum_symbol_by_value_NotificationOperationType/1, enum_value_by_symbol_NotificationOperationType/1]).
-export([enum_symbol_by_value_OperationReplyType/1, enum_value_by_symbol_OperationReplyType/1]).
-export([enum_symbol_by_value_OperationErrors/1, enum_value_by_symbol_OperationErrors/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'SignupErrors'() :: 'USER_EXISTS'.
-type 'LoginErrors'() :: 'INVALID_USERNAME' | 'USER_ALREADY_LOGGED' | 'INVALID_PASSWORD'.
-type 'AuthType'() :: 'LOGIN' | 'SIGNUP'.
-type 'OperationType'() :: 'LOCATION' | 'FLIP_SICK' | 'SICK' | 'NOTIFICATION' | 'LOGOUT'.
-type 'LocationOperationType'() :: 'UPDATE' | 'GET'.
-type 'NotificationOperationType'() :: 'SUB' | 'UNSUB'.
-type 'OperationReplyType'() :: 'GET_LOCATION_REPLY' | 'INFECTED_CONTACTS' | 'ERROR'.
-type 'OperationErrors'() :: 'ERROR_DECODING' | 'USERNAME_REQUIRED'.
-export_type(['SignupErrors'/0, 'LoginErrors'/0, 'AuthType'/0, 'OperationType'/0, 'LocationOperationType'/0, 'NotificationOperationType'/0, 'OperationReplyType'/0, 'OperationErrors'/0]).

%% message types
-type 'User'() ::
      #{username                => iodata(),        % = 1, required
        password                => iodata(),        % = 2, required
        districtId              => integer(),       % = 3, optional, 32 bits
        location                => iodata()         % = 4, optional
       }.

-type 'Name_Size'() ::
      #{name                    => iodata(),        % = 1, optional
        size                    => integer()        % = 2, optional, 32 bits
       }.

-type 'EntryMessage'() ::
      #{districts               => #{integer() => 'Name_Size'()} % = 1
       }.

-type 'AuthMessage'() ::
      #{user                    => 'User'(),        % = 1, optional
        type                    => 'LOGIN' | 'SIGNUP' | integer() % = 2, optional, enum AuthType
       }.

-type 'SignupReply'() ::
      #{success                 => boolean() | 0 | 1, % = 1, optional
        error                   => 'USER_EXISTS' | integer() % = 2, optional, enum SignupErrors
       }.

-type 'LoginReply'() ::
      #{success                 => boolean() | 0 | 1, % = 1, optional
        error                   => 'INVALID_USERNAME' | 'USER_ALREADY_LOGGED' | 'INVALID_PASSWORD' | integer(), % = 2, optional, enum LoginErrors
        sick                    => boolean() | 0 | 1, % = 3, optional
        district                => integer(),       % = 4, optional, 32 bits
        subbed                  => 'Subbed'()       % = 5, optional
       }.

-type 'Subbed'() ::
      #{subs                    => #{iodata() => 'LocationTopic'()} % = 1
       }.

-type 'LocationTopic'() ::
      #{locmap                  => #{iodata() => 'TopicList'()} % = 1
       }.

-type 'TopicList'() ::
      #{topics                  => [iodata()]       % = 1, repeated
       }.

-type 'Operation'() ::
      #{type                    => 'LOCATION' | 'FLIP_SICK' | 'SICK' | 'NOTIFICATION' | 'LOGOUT' | integer(), % = 1, required, enum OperationType
        username                => iodata(),        % = 2, optional
        lop                     => 'LocationOperation'(), % = 3, optional
        nop                     => 'NotificationOperation'() % = 4, optional
       }.

-type 'LocationOperation'() ::
      #{location                => iodata(),        % = 1, required
        type                    => 'UPDATE' | 'GET' | integer() % = 2, required, enum LocationOperationType
       }.

-type 'NotificationOperation'() ::
      #{district                => iodata(),        % = 1, optional
        location                => iodata(),        % = 3, optional
        topic                   => iodata(),        % = 2, required
        type                    => 'SUB' | 'UNSUB' | integer() % = 4, required, enum NotificationOperationType
       }.

-type 'OperationReply'() ::
      #{type                    => 'GET_LOCATION_REPLY' | 'INFECTED_CONTACTS' | 'ERROR' | integer(), % = 1, required, enum OperationReplyType
        username                => iodata(),        % = 2, optional
        logr                    => 'LocationOperationGetReply'(), % = 3, optional
        contacts                => 'InfectedContacts'(), % = 4, optional
        errors                  => 'ERROR_DECODING' | 'USERNAME_REQUIRED' | integer() % = 5, optional, enum OperationErrors
       }.

-type 'LocationOperationGetReply'() ::
      #{number                  => integer()        % = 1, required, 32 bits
       }.

-type 'InfectedContacts'() ::
      #{usernames               => [iodata()]       % = 1, repeated
       }.

-export_type(['User'/0, 'Name_Size'/0, 'EntryMessage'/0, 'AuthMessage'/0, 'SignupReply'/0, 'LoginReply'/0, 'Subbed'/0, 'LocationTopic'/0, 'TopicList'/0, 'Operation'/0, 'LocationOperation'/0, 'NotificationOperation'/0, 'OperationReply'/0, 'LocationOperationGetReply'/0, 'InfectedContacts'/0]).

-spec encode_msg('User'() | 'Name_Size'() | 'EntryMessage'() | 'AuthMessage'() | 'SignupReply'() | 'LoginReply'() | 'Subbed'() | 'LocationTopic'() | 'TopicList'() | 'Operation'() | 'LocationOperation'() | 'NotificationOperation'() | 'OperationReply'() | 'LocationOperationGetReply'() | 'InfectedContacts'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('User'() | 'Name_Size'() | 'EntryMessage'() | 'AuthMessage'() | 'SignupReply'() | 'LoginReply'() | 'Subbed'() | 'LocationTopic'() | 'TopicList'() | 'Operation'() | 'LocationOperation'() | 'NotificationOperation'() | 'OperationReply'() | 'LocationOperationGetReply'() | 'InfectedContacts'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'User' -> encode_msg_User(id(Msg, TrUserData), TrUserData);
        'Name_Size' -> encode_msg_Name_Size(id(Msg, TrUserData), TrUserData);
        'EntryMessage' -> encode_msg_EntryMessage(id(Msg, TrUserData), TrUserData);
        'AuthMessage' -> encode_msg_AuthMessage(id(Msg, TrUserData), TrUserData);
        'SignupReply' -> encode_msg_SignupReply(id(Msg, TrUserData), TrUserData);
        'LoginReply' -> encode_msg_LoginReply(id(Msg, TrUserData), TrUserData);
        'Subbed' -> encode_msg_Subbed(id(Msg, TrUserData), TrUserData);
        'LocationTopic' -> encode_msg_LocationTopic(id(Msg, TrUserData), TrUserData);
        'TopicList' -> encode_msg_TopicList(id(Msg, TrUserData), TrUserData);
        'Operation' -> encode_msg_Operation(id(Msg, TrUserData), TrUserData);
        'LocationOperation' -> encode_msg_LocationOperation(id(Msg, TrUserData), TrUserData);
        'NotificationOperation' -> encode_msg_NotificationOperation(id(Msg, TrUserData), TrUserData);
        'OperationReply' -> encode_msg_OperationReply(id(Msg, TrUserData), TrUserData);
        'LocationOperationGetReply' -> encode_msg_LocationOperationGetReply(id(Msg, TrUserData), TrUserData);
        'InfectedContacts' -> encode_msg_InfectedContacts(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_User(Msg, TrUserData) -> encode_msg_User(Msg, <<>>, TrUserData).


encode_msg_User(#{username := F1, password := F2} = M, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    B3 = case M of
             #{districtId := F3} -> begin TrF3 = id(F3, TrUserData), e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData) end;
             _ -> B2
         end,
    case M of
        #{location := F4} -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end;
        _ -> B3
    end.

encode_msg_Name_Size(Msg, TrUserData) -> encode_msg_Name_Size(Msg, <<>>, TrUserData).


encode_msg_Name_Size(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end;
             _ -> Bin
         end,
    case M of
        #{size := F2} -> begin TrF2 = id(F2, TrUserData), e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData) end;
        _ -> B1
    end.

encode_msg_EntryMessage(Msg, TrUserData) -> encode_msg_EntryMessage(Msg, <<>>, TrUserData).


encode_msg_EntryMessage(#{} = M, Bin, TrUserData) ->
    case M of
        #{districts := F1} ->
            TrF1 = 'tr_encode_EntryMessage.districts'(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_EntryMessage_districts(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_AuthMessage(Msg, TrUserData) -> encode_msg_AuthMessage(Msg, <<>>, TrUserData).


encode_msg_AuthMessage(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{user := F1} -> begin TrF1 = id(F1, TrUserData), e_mfield_AuthMessage_user(TrF1, <<Bin/binary, 10>>, TrUserData) end;
             _ -> Bin
         end,
    case M of
        #{type := F2} -> begin TrF2 = id(F2, TrUserData), e_enum_AuthType(TrF2, <<B1/binary, 16>>, TrUserData) end;
        _ -> B1
    end.

encode_msg_SignupReply(Msg, TrUserData) -> encode_msg_SignupReply(Msg, <<>>, TrUserData).


encode_msg_SignupReply(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{success := F1} -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end;
             _ -> Bin
         end,
    case M of
        #{error := F2} -> begin TrF2 = id(F2, TrUserData), e_enum_SignupErrors(TrF2, <<B1/binary, 16>>, TrUserData) end;
        _ -> B1
    end.

encode_msg_LoginReply(Msg, TrUserData) -> encode_msg_LoginReply(Msg, <<>>, TrUserData).


encode_msg_LoginReply(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{success := F1} -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end;
             _ -> Bin
         end,
    B2 = case M of
             #{error := F2} -> begin TrF2 = id(F2, TrUserData), e_enum_LoginErrors(TrF2, <<B1/binary, 16>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{sick := F3} -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{district := F4} -> begin TrF4 = id(F4, TrUserData), e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData) end;
             _ -> B3
         end,
    case M of
        #{subbed := F5} -> begin TrF5 = id(F5, TrUserData), e_mfield_LoginReply_subbed(TrF5, <<B4/binary, 42>>, TrUserData) end;
        _ -> B4
    end.

encode_msg_Subbed(Msg, TrUserData) -> encode_msg_Subbed(Msg, <<>>, TrUserData).


encode_msg_Subbed(#{} = M, Bin, TrUserData) ->
    case M of
        #{subs := F1} ->
            TrF1 = 'tr_encode_Subbed.subs'(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_Subbed_subs(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_LocationTopic(Msg, TrUserData) -> encode_msg_LocationTopic(Msg, <<>>, TrUserData).


encode_msg_LocationTopic(#{} = M, Bin, TrUserData) ->
    case M of
        #{locmap := F1} ->
            TrF1 = 'tr_encode_LocationTopic.locmap'(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_LocationTopic_locmap(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_TopicList(Msg, TrUserData) -> encode_msg_TopicList(Msg, <<>>, TrUserData).


encode_msg_TopicList(#{} = M, Bin, TrUserData) ->
    case M of
        #{topics := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_TopicList_topics(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_Operation(Msg, TrUserData) -> encode_msg_Operation(Msg, <<>>, TrUserData).


encode_msg_Operation(#{type := F1} = M, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_OperationType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = case M of
             #{username := F2} -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{lop := F3} -> begin TrF3 = id(F3, TrUserData), e_mfield_Operation_lop(TrF3, <<B2/binary, 26>>, TrUserData) end;
             _ -> B2
         end,
    case M of
        #{nop := F4} -> begin TrF4 = id(F4, TrUserData), e_mfield_Operation_nop(TrF4, <<B3/binary, 34>>, TrUserData) end;
        _ -> B3
    end.

encode_msg_LocationOperation(Msg, TrUserData) -> encode_msg_LocationOperation(Msg, <<>>, TrUserData).


encode_msg_LocationOperation(#{location := F1, type := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_enum_LocationOperationType(TrF2, <<B1/binary, 16>>, TrUserData) end.

encode_msg_NotificationOperation(Msg, TrUserData) -> encode_msg_NotificationOperation(Msg, <<>>, TrUserData).


encode_msg_NotificationOperation(#{topic := F3, type := F4} = M, Bin, TrUserData) ->
    B1 = case M of
             #{district := F1} -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end;
             _ -> Bin
         end,
    B2 = case M of
             #{location := F2} -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 26>>, TrUserData) end;
             _ -> B1
         end,
    B3 = begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 18>>, TrUserData) end,
    begin TrF4 = id(F4, TrUserData), e_enum_NotificationOperationType(TrF4, <<B3/binary, 32>>, TrUserData) end.

encode_msg_OperationReply(Msg, TrUserData) -> encode_msg_OperationReply(Msg, <<>>, TrUserData).


encode_msg_OperationReply(#{type := F1} = M, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_OperationReplyType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = case M of
             #{username := F2} -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{logr := F3} -> begin TrF3 = id(F3, TrUserData), e_mfield_OperationReply_logr(TrF3, <<B2/binary, 26>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{contacts := F4} -> begin TrF4 = id(F4, TrUserData), e_mfield_OperationReply_contacts(TrF4, <<B3/binary, 34>>, TrUserData) end;
             _ -> B3
         end,
    case M of
        #{errors := F5} -> begin TrF5 = id(F5, TrUserData), e_enum_OperationErrors(TrF5, <<B4/binary, 40>>, TrUserData) end;
        _ -> B4
    end.

encode_msg_LocationOperationGetReply(Msg, TrUserData) -> encode_msg_LocationOperationGetReply(Msg, <<>>, TrUserData).


encode_msg_LocationOperationGetReply(#{number := F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_InfectedContacts(Msg, TrUserData) -> encode_msg_InfectedContacts(Msg, <<>>, TrUserData).


encode_msg_InfectedContacts(#{} = M, Bin, TrUserData) ->
    case M of
        #{usernames := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_InfectedContacts_usernames(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

e_mfield_EntryMessage_districts(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,Name_Size>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EntryMessage_districts([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_EntryMessage_districts('tr_encode_EntryMessage.districts[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_EntryMessage_districts(Rest, Bin3, TrUserData);
e_field_EntryMessage_districts([], Bin, _TrUserData) -> Bin.

e_mfield_AuthMessage_user(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_User(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_LoginReply_subbed(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Subbed(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Subbed_subs(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,LocationTopic>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Subbed_subs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Subbed_subs('tr_encode_Subbed.subs[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_Subbed_subs(Rest, Bin3, TrUserData);
e_field_Subbed_subs([], Bin, _TrUserData) -> Bin.

e_mfield_LocationTopic_locmap(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,TopicList>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LocationTopic_locmap([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_LocationTopic_locmap('tr_encode_LocationTopic.locmap[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_LocationTopic_locmap(Rest, Bin3, TrUserData);
e_field_LocationTopic_locmap([], Bin, _TrUserData) -> Bin.

e_field_TopicList_topics([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TopicList_topics(Rest, Bin3, TrUserData);
e_field_TopicList_topics([], Bin, _TrUserData) -> Bin.

e_mfield_Operation_lop(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LocationOperation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Operation_nop(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NotificationOperation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_OperationReply_logr(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LocationOperationGetReply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_OperationReply_contacts(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_InfectedContacts(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_InfectedContacts_usernames([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_InfectedContacts_usernames(Rest, Bin3, TrUserData);
e_field_InfectedContacts_usernames([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,TopicList>'(#{key := F1, value := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<string,TopicList>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<int32,Name_Size>'(#{key := F1, value := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<int32,Name_Size>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<string,LocationTopic>'(#{key := F1, value := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<string,LocationTopic>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'e_mfield_map<string,TopicList>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TopicList(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<int32,Name_Size>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Name_Size(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<string,LocationTopic>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LocationTopic(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_SignupErrors('USER_EXISTS', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_SignupErrors(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_LoginErrors('INVALID_USERNAME', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_LoginErrors('USER_ALREADY_LOGGED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_LoginErrors('INVALID_PASSWORD', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_LoginErrors(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_AuthType('LOGIN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_AuthType('SIGNUP', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_AuthType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_OperationType('LOCATION', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_OperationType('FLIP_SICK', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_OperationType('SICK', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_OperationType('NOTIFICATION', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_OperationType('LOGOUT', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_OperationType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_LocationOperationType('UPDATE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_LocationOperationType('GET', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_LocationOperationType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_NotificationOperationType('SUB', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_NotificationOperationType('UNSUB', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_NotificationOperationType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_OperationReplyType('GET_LOCATION_REPLY', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_OperationReplyType('INFECTED_CONTACTS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_OperationReplyType('ERROR', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_OperationReplyType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_OperationErrors('ERROR_DECODING', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_OperationErrors('USERNAME_REQUIRED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_OperationErrors(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('User', Bin, TrUserData) -> id(decode_msg_User(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Name_Size', Bin, TrUserData) -> id(decode_msg_Name_Size(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EntryMessage', Bin, TrUserData) -> id(decode_msg_EntryMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuthMessage', Bin, TrUserData) -> id(decode_msg_AuthMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SignupReply', Bin, TrUserData) -> id(decode_msg_SignupReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginReply', Bin, TrUserData) -> id(decode_msg_LoginReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Subbed', Bin, TrUserData) -> id(decode_msg_Subbed(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LocationTopic', Bin, TrUserData) -> id(decode_msg_LocationTopic(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TopicList', Bin, TrUserData) -> id(decode_msg_TopicList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Operation', Bin, TrUserData) -> id(decode_msg_Operation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LocationOperation', Bin, TrUserData) -> id(decode_msg_LocationOperation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NotificationOperation', Bin, TrUserData) -> id(decode_msg_NotificationOperation(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OperationReply', Bin, TrUserData) -> id(decode_msg_OperationReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LocationOperationGetReply', Bin, TrUserData) -> id(decode_msg_LocationOperationGetReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InfectedContacts', Bin, TrUserData) -> id(decode_msg_InfectedContacts(Bin, TrUserData), TrUserData).



decode_msg_User(Bin, TrUserData) -> dfp_read_field_def_User(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_User(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_User_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_User(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_User_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_User(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_User_districtId(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_User(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_User_location(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_User(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{username => F@_1, password => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
            true -> S1#{districtId => F@_3}
         end,
    if F@_4 == '$undef' -> S2;
       true -> S2#{location => F@_4}
    end;
dfp_read_field_def_User(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_User(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_User(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_User(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_User(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_User_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_User_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_User_districtId(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_User_location(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_User(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_User(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_User(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_User(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_User(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_User(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{username => F@_1, password => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
            true -> S1#{districtId => F@_3}
         end,
    if F@_4 == '$undef' -> S2;
       true -> S2#{location => F@_4}
    end.

d_field_User_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_User_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_User_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_User(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_User_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_User_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_User_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_User(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_User_districtId(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_User_districtId(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_User_districtId(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_User(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_User_location(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_User_location(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_User_location(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_User(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_User(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_User(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_User(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_User(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_User(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_User(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_User(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_User(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_User(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_User(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_User(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_User(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_User(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_User(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_Name_Size(Bin, TrUserData) -> dfp_read_field_def_Name_Size(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Name_Size(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Name_Size_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Name_Size(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Name_Size_size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Name_Size(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{name => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{size => F@_2}
    end;
dfp_read_field_def_Name_Size(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Name_Size(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Name_Size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Name_Size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Name_Size(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Name_Size_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_Name_Size_size(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Name_Size(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Name_Size(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Name_Size(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Name_Size(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Name_Size(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Name_Size(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{name => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{size => F@_2}
    end.

d_field_Name_Size_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Name_Size_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Name_Size_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Name_Size(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Name_Size_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Name_Size_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Name_Size_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Name_Size(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Name_Size(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Name_Size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Name_Size(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Name_Size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Name_Size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Name_Size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Name_Size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Name_Size(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Name_Size(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Name_Size(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Name_Size(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Name_Size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Name_Size(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Name_Size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_EntryMessage(Bin, TrUserData) -> dfp_read_field_def_EntryMessage(Bin, 0, 0, 0, 'tr_decode_init_default_EntryMessage.districts'([], TrUserData), TrUserData).

dfp_read_field_def_EntryMessage(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_EntryMessage_districts(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_EntryMessage(<<>>, 0, 0, _, R1, TrUserData) -> #{districts => 'tr_decode_repeated_finalize_EntryMessage.districts'(R1, TrUserData)};
dfp_read_field_def_EntryMessage(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_EntryMessage(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_EntryMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_EntryMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_EntryMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_EntryMessage_districts(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_EntryMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_EntryMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_EntryMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_EntryMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_EntryMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_EntryMessage(<<>>, 0, 0, _, R1, TrUserData) -> #{districts => 'tr_decode_repeated_finalize_EntryMessage.districts'(R1, TrUserData)}.

d_field_EntryMessage_districts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_EntryMessage_districts(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_EntryMessage_districts(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<int32,Name_Size>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_EntryMessage(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_EntryMessage.districts'(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_EntryMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_EntryMessage(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_EntryMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_EntryMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_EntryMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_EntryMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_EntryMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EntryMessage(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_EntryMessage(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EntryMessage(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_EntryMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_EntryMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_EntryMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_EntryMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_AuthMessage(Bin, TrUserData) -> dfp_read_field_def_AuthMessage(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AuthMessage(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_AuthMessage_user(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthMessage(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_AuthMessage_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthMessage(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{user => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{type => F@_2}
    end;
dfp_read_field_def_AuthMessage(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_AuthMessage(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_AuthMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_AuthMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_AuthMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_AuthMessage_user(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_AuthMessage_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AuthMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_AuthMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_AuthMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_AuthMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_AuthMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_AuthMessage(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{user => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{type => F@_2}
    end.

d_field_AuthMessage_user(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_AuthMessage_user(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_AuthMessage_user(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_User(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_AuthMessage(RestF,
                                   0,
                                   0,
                                   F,
                                   if Prev == '$undef' -> NewFValue;
                                      true -> merge_msg_User(Prev, NewFValue, TrUserData)
                                   end,
                                   F@_2,
                                   TrUserData).

d_field_AuthMessage_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_AuthMessage_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_AuthMessage_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_AuthType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_AuthMessage(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_AuthMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_AuthMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_AuthMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_AuthMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_AuthMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_AuthMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthMessage(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_AuthMessage(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthMessage(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_AuthMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_AuthMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_SignupReply(Bin, TrUserData) -> dfp_read_field_def_SignupReply(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_SignupReply(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SignupReply_success(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SignupReply(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SignupReply_error(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SignupReply(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{success => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{error => F@_2}
    end;
dfp_read_field_def_SignupReply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_SignupReply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_SignupReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_SignupReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_SignupReply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SignupReply_success(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_SignupReply_error(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SignupReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_SignupReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_SignupReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_SignupReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_SignupReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_SignupReply(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{success => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{error => F@_2}
    end.

d_field_SignupReply_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SignupReply_success(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SignupReply_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_SignupReply(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_SignupReply_error(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SignupReply_error(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SignupReply_error(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_SignupErrors(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_SignupReply(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_SignupReply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_SignupReply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_SignupReply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SignupReply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_SignupReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_SignupReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_SignupReply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SignupReply(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_SignupReply(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SignupReply(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_SignupReply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SignupReply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_SignupReply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SignupReply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_LoginReply(Bin, TrUserData) -> dfp_read_field_def_LoginReply(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_LoginReply(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_LoginReply_success(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReply(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_LoginReply_error(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReply(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_LoginReply_sick(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReply(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_LoginReply_district(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReply(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_LoginReply_subbed(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReply(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{success => F@_1}
         end,
    S3 = if F@_2 == '$undef' -> S2;
            true -> S2#{error => F@_2}
         end,
    S4 = if F@_3 == '$undef' -> S3;
            true -> S3#{sick => F@_3}
         end,
    S5 = if F@_4 == '$undef' -> S4;
            true -> S4#{district => F@_4}
         end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{subbed => F@_5}
    end;
dfp_read_field_def_LoginReply(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_LoginReply(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_LoginReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_LoginReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_LoginReply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_LoginReply_success(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_LoginReply_error(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_LoginReply_sick(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> d_field_LoginReply_district(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_LoginReply_subbed(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LoginReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_LoginReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_LoginReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_LoginReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_LoginReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_LoginReply(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{success => F@_1}
         end,
    S3 = if F@_2 == '$undef' -> S2;
            true -> S2#{error => F@_2}
         end,
    S4 = if F@_3 == '$undef' -> S3;
            true -> S3#{sick => F@_3}
         end,
    S5 = if F@_4 == '$undef' -> S4;
            true -> S4#{district => F@_4}
         end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{subbed => F@_5}
    end.

d_field_LoginReply_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_LoginReply_success(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReply_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_LoginReply(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_LoginReply_error(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_LoginReply_error(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReply_error(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_LoginErrors(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_LoginReply(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_LoginReply_sick(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_LoginReply_sick(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReply_sick(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_LoginReply(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_LoginReply_district(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_LoginReply_district(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReply_district(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_LoginReply(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_LoginReply_subbed(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_LoginReply_subbed(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReply_subbed(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Subbed(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_LoginReply(RestF,
                                  0,
                                  0,
                                  F,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  if Prev == '$undef' -> NewFValue;
                                     true -> merge_msg_Subbed(Prev, NewFValue, TrUserData)
                                  end,
                                  TrUserData).

skip_varint_LoginReply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_LoginReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_LoginReply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_LoginReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_LoginReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_LoginReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_LoginReply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReply(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_LoginReply(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginReply(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_LoginReply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_LoginReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_LoginReply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_LoginReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_Subbed(Bin, TrUserData) -> dfp_read_field_def_Subbed(Bin, 0, 0, 0, 'tr_decode_init_default_Subbed.subs'([], TrUserData), TrUserData).

dfp_read_field_def_Subbed(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_Subbed_subs(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_Subbed(<<>>, 0, 0, _, R1, TrUserData) -> #{subs => 'tr_decode_repeated_finalize_Subbed.subs'(R1, TrUserData)};
dfp_read_field_def_Subbed(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_Subbed(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_Subbed(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_Subbed(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_Subbed(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Subbed_subs(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Subbed(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_Subbed(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_Subbed(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_Subbed(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_Subbed(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_Subbed(<<>>, 0, 0, _, R1, TrUserData) -> #{subs => 'tr_decode_repeated_finalize_Subbed.subs'(R1, TrUserData)}.

d_field_Subbed_subs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_Subbed_subs(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_Subbed_subs(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,LocationTopic>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Subbed(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_Subbed.subs'(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Subbed(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_Subbed(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_Subbed(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Subbed(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_Subbed(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_Subbed(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_Subbed(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Subbed(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_Subbed(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Subbed(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_Subbed(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Subbed(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_Subbed(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Subbed(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_LocationTopic(Bin, TrUserData) -> dfp_read_field_def_LocationTopic(Bin, 0, 0, 0, 'tr_decode_init_default_LocationTopic.locmap'([], TrUserData), TrUserData).

dfp_read_field_def_LocationTopic(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_LocationTopic_locmap(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_LocationTopic(<<>>, 0, 0, _, R1, TrUserData) -> #{locmap => 'tr_decode_repeated_finalize_LocationTopic.locmap'(R1, TrUserData)};
dfp_read_field_def_LocationTopic(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_LocationTopic(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_LocationTopic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LocationTopic(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_LocationTopic(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LocationTopic_locmap(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LocationTopic(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_LocationTopic(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_LocationTopic(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_LocationTopic(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_LocationTopic(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LocationTopic(<<>>, 0, 0, _, R1, TrUserData) -> #{locmap => 'tr_decode_repeated_finalize_LocationTopic.locmap'(R1, TrUserData)}.

d_field_LocationTopic_locmap(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_LocationTopic_locmap(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_LocationTopic_locmap(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,TopicList>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_LocationTopic(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_LocationTopic.locmap'(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_LocationTopic(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_LocationTopic(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_LocationTopic(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationTopic(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_LocationTopic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LocationTopic(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_LocationTopic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LocationTopic(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_LocationTopic(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LocationTopic(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_LocationTopic(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationTopic(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_LocationTopic(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationTopic(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_TopicList(Bin, TrUserData) -> dfp_read_field_def_TopicList(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_TopicList(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TopicList_topics(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TopicList(<<>>, 0, 0, _, R1, TrUserData) -> #{topics => lists_reverse(R1, TrUserData)};
dfp_read_field_def_TopicList(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TopicList(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TopicList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TopicList(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TopicList(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TopicList_topics(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TopicList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TopicList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TopicList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TopicList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TopicList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TopicList(<<>>, 0, 0, _, R1, TrUserData) -> #{topics => lists_reverse(R1, TrUserData)}.

d_field_TopicList_topics(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TopicList_topics(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TopicList_topics(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_TopicList(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_TopicList(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TopicList(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TopicList(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TopicList(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TopicList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TopicList(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TopicList(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TopicList(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TopicList(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TopicList(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TopicList(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TopicList(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TopicList(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TopicList(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Operation(Bin, TrUserData) -> dfp_read_field_def_Operation(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Operation(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Operation_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Operation(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Operation_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Operation(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Operation_lop(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Operation(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Operation_nop(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Operation(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{username => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{lop => F@_3}
         end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{nop => F@_4}
    end;
dfp_read_field_def_Operation(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_Operation(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Operation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_Operation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Operation(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Operation_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_Operation_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_Operation_lop(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_Operation_nop(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Operation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_Operation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_Operation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_Operation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_Operation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_Operation(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{username => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{lop => F@_3}
         end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{nop => F@_4}
    end.

d_field_Operation_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Operation_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operation_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_OperationType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Operation(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_Operation_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Operation_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operation_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Operation(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_Operation_lop(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Operation_lop(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operation_lop(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LocationOperation(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Operation(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 if Prev == '$undef' -> NewFValue;
                                    true -> merge_msg_LocationOperation(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_4,
                                 TrUserData).

d_field_Operation_nop(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Operation_nop(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operation_nop(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NotificationOperation(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Operation(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 if Prev == '$undef' -> NewFValue;
                                    true -> merge_msg_NotificationOperation(Prev, NewFValue, TrUserData)
                                 end,
                                 TrUserData).

skip_varint_Operation(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_Operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_Operation(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Operation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_Operation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Operation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Operation(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_Operation(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Operation(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_Operation(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_Operation(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_LocationOperation(Bin, TrUserData) -> dfp_read_field_def_LocationOperation(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_LocationOperation(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_LocationOperation_location(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_LocationOperation(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_LocationOperation_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_LocationOperation(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{location => F@_1, type => F@_2};
dfp_read_field_def_LocationOperation(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_LocationOperation(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_LocationOperation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_LocationOperation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_LocationOperation(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LocationOperation_location(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_LocationOperation_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LocationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_LocationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_LocationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_LocationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_LocationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_LocationOperation(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{location => F@_1, type => F@_2}.

d_field_LocationOperation_location(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_LocationOperation_location(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_LocationOperation_location(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_LocationOperation(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_LocationOperation_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_LocationOperation_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_LocationOperation_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_LocationOperationType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_LocationOperation(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_LocationOperation(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_LocationOperation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_LocationOperation(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LocationOperation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_LocationOperation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_LocationOperation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_LocationOperation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LocationOperation(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_LocationOperation(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LocationOperation(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_LocationOperation(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LocationOperation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_LocationOperation(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LocationOperation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_NotificationOperation(Bin, TrUserData) -> dfp_read_field_def_NotificationOperation(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_NotificationOperation(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NotificationOperation_district(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificationOperation(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NotificationOperation_location(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificationOperation(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NotificationOperation_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificationOperation(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NotificationOperation_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificationOperation(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{topic => F@_3, type => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{district => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{location => F@_2}
    end;
dfp_read_field_def_NotificationOperation(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_NotificationOperation(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_NotificationOperation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_NotificationOperation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_NotificationOperation(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NotificationOperation_district(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_NotificationOperation_location(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_NotificationOperation_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_NotificationOperation_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NotificationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_NotificationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_NotificationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_NotificationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_NotificationOperation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_NotificationOperation(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{topic => F@_3, type => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{district => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{location => F@_2}
    end.

d_field_NotificationOperation_district(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NotificationOperation_district(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NotificationOperation_district(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_NotificationOperation(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_NotificationOperation_location(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NotificationOperation_location(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NotificationOperation_location(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_NotificationOperation(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_NotificationOperation_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NotificationOperation_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NotificationOperation_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_NotificationOperation(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_NotificationOperation_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NotificationOperation_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NotificationOperation_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_NotificationOperationType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_NotificationOperation(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_NotificationOperation(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_NotificationOperation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_NotificationOperation(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NotificationOperation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_NotificationOperation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_NotificationOperation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_NotificationOperation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotificationOperation(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_NotificationOperation(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotificationOperation(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_NotificationOperation(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NotificationOperation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_NotificationOperation(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NotificationOperation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_OperationReply(Bin, TrUserData) -> dfp_read_field_def_OperationReply(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_OperationReply(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_OperationReply_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_OperationReply(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_OperationReply_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_OperationReply(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_OperationReply_logr(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_OperationReply(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_OperationReply_contacts(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_OperationReply(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_OperationReply_errors(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_OperationReply(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{username => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{logr => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{contacts => F@_4}
         end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{errors => F@_5}
    end;
dfp_read_field_def_OperationReply(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_OperationReply(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_OperationReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_OperationReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_OperationReply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_OperationReply_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_OperationReply_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_OperationReply_logr(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_OperationReply_contacts(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_OperationReply_errors(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_OperationReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_OperationReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_OperationReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_OperationReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_OperationReply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_OperationReply(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{username => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{logr => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{contacts => F@_4}
         end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{errors => F@_5}
    end.

d_field_OperationReply_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_OperationReply_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OperationReply_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_OperationReplyType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_OperationReply(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_OperationReply_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_OperationReply_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OperationReply_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_OperationReply(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_OperationReply_logr(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_OperationReply_logr(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OperationReply_logr(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LocationOperationGetReply(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_OperationReply(RestF,
                                      0,
                                      0,
                                      F,
                                      F@_1,
                                      F@_2,
                                      if Prev == '$undef' -> NewFValue;
                                         true -> merge_msg_LocationOperationGetReply(Prev, NewFValue, TrUserData)
                                      end,
                                      F@_4,
                                      F@_5,
                                      TrUserData).

d_field_OperationReply_contacts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_OperationReply_contacts(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OperationReply_contacts(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_InfectedContacts(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_OperationReply(RestF,
                                      0,
                                      0,
                                      F,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      if Prev == '$undef' -> NewFValue;
                                         true -> merge_msg_InfectedContacts(Prev, NewFValue, TrUserData)
                                      end,
                                      F@_5,
                                      TrUserData).

d_field_OperationReply_errors(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_OperationReply_errors(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OperationReply_errors(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_OperationErrors(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_OperationReply(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_OperationReply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_OperationReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_OperationReply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_OperationReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_OperationReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_OperationReply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_OperationReply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperationReply(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_OperationReply(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OperationReply(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_OperationReply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_OperationReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_OperationReply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_OperationReply(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_LocationOperationGetReply(Bin, TrUserData) -> dfp_read_field_def_LocationOperationGetReply(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_LocationOperationGetReply(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_LocationOperationGetReply_number(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_LocationOperationGetReply(<<>>, 0, 0, _, F@_1, _) -> #{number => F@_1};
dfp_read_field_def_LocationOperationGetReply(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_LocationOperationGetReply(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_LocationOperationGetReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LocationOperationGetReply(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_LocationOperationGetReply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_LocationOperationGetReply_number(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LocationOperationGetReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_LocationOperationGetReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_LocationOperationGetReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_LocationOperationGetReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_LocationOperationGetReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LocationOperationGetReply(<<>>, 0, 0, _, F@_1, _) -> #{number => F@_1}.

d_field_LocationOperationGetReply_number(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_LocationOperationGetReply_number(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_LocationOperationGetReply_number(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_LocationOperationGetReply(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_LocationOperationGetReply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_LocationOperationGetReply(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_LocationOperationGetReply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationOperationGetReply(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_LocationOperationGetReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LocationOperationGetReply(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_LocationOperationGetReply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LocationOperationGetReply(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_LocationOperationGetReply(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LocationOperationGetReply(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_LocationOperationGetReply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationOperationGetReply(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_LocationOperationGetReply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_LocationOperationGetReply(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_InfectedContacts(Bin, TrUserData) -> dfp_read_field_def_InfectedContacts(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_InfectedContacts(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_InfectedContacts_usernames(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_InfectedContacts(<<>>, 0, 0, _, R1, TrUserData) -> #{usernames => lists_reverse(R1, TrUserData)};
dfp_read_field_def_InfectedContacts(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_InfectedContacts(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_InfectedContacts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_InfectedContacts(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_InfectedContacts(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_InfectedContacts_usernames(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_InfectedContacts(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_InfectedContacts(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_InfectedContacts(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_InfectedContacts(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_InfectedContacts(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_InfectedContacts(<<>>, 0, 0, _, R1, TrUserData) -> #{usernames => lists_reverse(R1, TrUserData)}.

d_field_InfectedContacts_usernames(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_InfectedContacts_usernames(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_InfectedContacts_usernames(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_InfectedContacts(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_InfectedContacts(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_InfectedContacts(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_InfectedContacts(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_InfectedContacts(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_InfectedContacts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_InfectedContacts(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_InfectedContacts(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InfectedContacts(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_InfectedContacts(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InfectedContacts(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_InfectedContacts(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_InfectedContacts(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_InfectedContacts(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_InfectedContacts(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_map<string,TopicList>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,TopicList>'(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_map<string,TopicList>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,TopicList>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,TopicList>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,TopicList>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,TopicList>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,TopicList>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,TopicList>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,TopicList>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,TopicList>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,TopicList>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,TopicList>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,TopicList>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,TopicList>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,TopicList>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,TopicList>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,TopicList>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,TopicList>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,TopicList>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,TopicList>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,TopicList>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,TopicList>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,TopicList>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,TopicList>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,TopicList>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,TopicList>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TopicList(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,TopicList>'(RestF,
                                               0,
                                               0,
                                               F,
                                               F@_1,
                                               if Prev == '$undef' -> NewFValue;
                                                  true -> merge_msg_TopicList(Prev, NewFValue, TrUserData)
                                               end,
                                               TrUserData).

'skip_varint_map<string,TopicList>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,TopicList>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,TopicList>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,TopicList>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,TopicList>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,TopicList>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,TopicList>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,TopicList>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,TopicList>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,TopicList>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,TopicList>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,TopicList>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,TopicList>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,TopicList>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<int32,Name_Size>'(Bin, TrUserData) -> 'dfp_read_field_def_map<int32,Name_Size>'(Bin, 0, 0, 0, id(0, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_map<int32,Name_Size>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<int32,Name_Size>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<int32,Name_Size>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<int32,Name_Size>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<int32,Name_Size>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<int32,Name_Size>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<int32,Name_Size>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,Name_Size>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<int32,Name_Size>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,Name_Size>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<int32,Name_Size>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<int32,Name_Size>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<int32,Name_Size>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<int32,Name_Size>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<int32,Name_Size>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<int32,Name_Size>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<int32,Name_Size>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<int32,Name_Size>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<int32,Name_Size>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<int32,Name_Size>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<int32,Name_Size>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_map<int32,Name_Size>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<int32,Name_Size>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<int32,Name_Size>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<int32,Name_Size>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Name_Size(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<int32,Name_Size>'(RestF,
                                              0,
                                              0,
                                              F,
                                              F@_1,
                                              if Prev == '$undef' -> NewFValue;
                                                 true -> merge_msg_Name_Size(Prev, NewFValue, TrUserData)
                                              end,
                                              TrUserData).

'skip_varint_map<int32,Name_Size>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<int32,Name_Size>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<int32,Name_Size>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<int32,Name_Size>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,Name_Size>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<int32,Name_Size>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<int32,Name_Size>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,Name_Size>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<int32,Name_Size>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,Name_Size>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<int32,Name_Size>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<int32,Name_Size>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<int32,Name_Size>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<int32,Name_Size>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,LocationTopic>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,LocationTopic>'(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), TrUserData).

'dfp_read_field_def_map<string,LocationTopic>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,LocationTopic>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,LocationTopic>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,LocationTopic>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,LocationTopic>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,LocationTopic>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,LocationTopic>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,LocationTopic>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,LocationTopic>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,LocationTopic>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,LocationTopic>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,LocationTopic>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,LocationTopic>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,LocationTopic>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,LocationTopic>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,LocationTopic>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,LocationTopic>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,LocationTopic>'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,LocationTopic>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,LocationTopic>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,LocationTopic>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,LocationTopic>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,LocationTopic>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,LocationTopic>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,LocationTopic>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LocationTopic(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,LocationTopic>'(RestF,
                                                   0,
                                                   0,
                                                   F,
                                                   F@_1,
                                                   if Prev == '$undef' -> NewFValue;
                                                      true -> merge_msg_LocationTopic(Prev, NewFValue, TrUserData)
                                                   end,
                                                   TrUserData).

'skip_varint_map<string,LocationTopic>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,LocationTopic>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,LocationTopic>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,LocationTopic>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,LocationTopic>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,LocationTopic>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,LocationTopic>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,LocationTopic>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,LocationTopic>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,LocationTopic>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,LocationTopic>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,LocationTopic>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,LocationTopic>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,LocationTopic>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_SignupErrors(0) -> 'USER_EXISTS';
d_enum_SignupErrors(V) -> V.

d_enum_LoginErrors(0) -> 'INVALID_USERNAME';
d_enum_LoginErrors(1) -> 'USER_ALREADY_LOGGED';
d_enum_LoginErrors(2) -> 'INVALID_PASSWORD';
d_enum_LoginErrors(V) -> V.

d_enum_AuthType(0) -> 'LOGIN';
d_enum_AuthType(1) -> 'SIGNUP';
d_enum_AuthType(V) -> V.

d_enum_OperationType(0) -> 'LOCATION';
d_enum_OperationType(1) -> 'FLIP_SICK';
d_enum_OperationType(2) -> 'SICK';
d_enum_OperationType(3) -> 'NOTIFICATION';
d_enum_OperationType(4) -> 'LOGOUT';
d_enum_OperationType(V) -> V.

d_enum_LocationOperationType(0) -> 'UPDATE';
d_enum_LocationOperationType(1) -> 'GET';
d_enum_LocationOperationType(V) -> V.

d_enum_NotificationOperationType(0) -> 'SUB';
d_enum_NotificationOperationType(1) -> 'UNSUB';
d_enum_NotificationOperationType(V) -> V.

d_enum_OperationReplyType(0) -> 'GET_LOCATION_REPLY';
d_enum_OperationReplyType(1) -> 'INFECTED_CONTACTS';
d_enum_OperationReplyType(2) -> 'ERROR';
d_enum_OperationReplyType(V) -> V.

d_enum_OperationErrors(0) -> 'ERROR_DECODING';
d_enum_OperationErrors(1) -> 'USERNAME_REQUIRED';
d_enum_OperationErrors(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'User' -> merge_msg_User(Prev, New, TrUserData);
        'Name_Size' -> merge_msg_Name_Size(Prev, New, TrUserData);
        'EntryMessage' -> merge_msg_EntryMessage(Prev, New, TrUserData);
        'AuthMessage' -> merge_msg_AuthMessage(Prev, New, TrUserData);
        'SignupReply' -> merge_msg_SignupReply(Prev, New, TrUserData);
        'LoginReply' -> merge_msg_LoginReply(Prev, New, TrUserData);
        'Subbed' -> merge_msg_Subbed(Prev, New, TrUserData);
        'LocationTopic' -> merge_msg_LocationTopic(Prev, New, TrUserData);
        'TopicList' -> merge_msg_TopicList(Prev, New, TrUserData);
        'Operation' -> merge_msg_Operation(Prev, New, TrUserData);
        'LocationOperation' -> merge_msg_LocationOperation(Prev, New, TrUserData);
        'NotificationOperation' -> merge_msg_NotificationOperation(Prev, New, TrUserData);
        'OperationReply' -> merge_msg_OperationReply(Prev, New, TrUserData);
        'LocationOperationGetReply' -> merge_msg_LocationOperationGetReply(Prev, New, TrUserData);
        'InfectedContacts' -> merge_msg_InfectedContacts(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_User/3}).
merge_msg_User(#{} = PMsg, #{username := NFusername, password := NFpassword} = NMsg, _) ->
    S1 = #{username => NFusername, password => NFpassword},
    S2 = case {PMsg, NMsg} of
             {_, #{districtId := NFdistrictId}} -> S1#{districtId => NFdistrictId};
             {#{districtId := PFdistrictId}, _} -> S1#{districtId => PFdistrictId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{location := NFlocation}} -> S2#{location => NFlocation};
        {#{location := PFlocation}, _} -> S2#{location => PFlocation};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Name_Size/3}).
merge_msg_Name_Size(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{size := NFsize}} -> S2#{size => NFsize};
        {#{size := PFsize}, _} -> S2#{size => PFsize};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_EntryMessage/3}).
merge_msg_EntryMessage(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{districts := PFdistricts}, #{districts := NFdistricts}} -> S1#{districts => 'tr_merge_EntryMessage.districts'(PFdistricts, NFdistricts, TrUserData)};
        {_, #{districts := NFdistricts}} -> S1#{districts => NFdistricts};
        {#{districts := PFdistricts}, _} -> S1#{districts => PFdistricts};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthMessage/3}).
merge_msg_AuthMessage(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{user := PFuser}, #{user := NFuser}} -> S1#{user => merge_msg_User(PFuser, NFuser, TrUserData)};
             {_, #{user := NFuser}} -> S1#{user => NFuser};
             {#{user := PFuser}, _} -> S1#{user => PFuser};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S2#{type => NFtype};
        {#{type := PFtype}, _} -> S2#{type => PFtype};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_SignupReply/3}).
merge_msg_SignupReply(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{success := NFsuccess}} -> S1#{success => NFsuccess};
             {#{success := PFsuccess}, _} -> S1#{success => PFsuccess};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{error := NFerror}} -> S2#{error => NFerror};
        {#{error := PFerror}, _} -> S2#{error => PFerror};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_LoginReply/3}).
merge_msg_LoginReply(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{success := NFsuccess}} -> S1#{success => NFsuccess};
             {#{success := PFsuccess}, _} -> S1#{success => PFsuccess};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{error := NFerror}} -> S2#{error => NFerror};
             {#{error := PFerror}, _} -> S2#{error => PFerror};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{sick := NFsick}} -> S3#{sick => NFsick};
             {#{sick := PFsick}, _} -> S3#{sick => PFsick};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{district := NFdistrict}} -> S4#{district => NFdistrict};
             {#{district := PFdistrict}, _} -> S4#{district => PFdistrict};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {#{subbed := PFsubbed}, #{subbed := NFsubbed}} -> S5#{subbed => merge_msg_Subbed(PFsubbed, NFsubbed, TrUserData)};
        {_, #{subbed := NFsubbed}} -> S5#{subbed => NFsubbed};
        {#{subbed := PFsubbed}, _} -> S5#{subbed => PFsubbed};
        {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_Subbed/3}).
merge_msg_Subbed(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{subs := PFsubs}, #{subs := NFsubs}} -> S1#{subs => 'tr_merge_Subbed.subs'(PFsubs, NFsubs, TrUserData)};
        {_, #{subs := NFsubs}} -> S1#{subs => NFsubs};
        {#{subs := PFsubs}, _} -> S1#{subs => PFsubs};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_LocationTopic/3}).
merge_msg_LocationTopic(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{locmap := PFlocmap}, #{locmap := NFlocmap}} -> S1#{locmap => 'tr_merge_LocationTopic.locmap'(PFlocmap, NFlocmap, TrUserData)};
        {_, #{locmap := NFlocmap}} -> S1#{locmap => NFlocmap};
        {#{locmap := PFlocmap}, _} -> S1#{locmap => PFlocmap};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_TopicList/3}).
merge_msg_TopicList(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{topics := PFtopics}, #{topics := NFtopics}} -> S1#{topics => 'erlang_++'(PFtopics, NFtopics, TrUserData)};
        {_, #{topics := NFtopics}} -> S1#{topics => NFtopics};
        {#{topics := PFtopics}, _} -> S1#{topics => PFtopics};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Operation/3}).
merge_msg_Operation(#{} = PMsg, #{type := NFtype} = NMsg, TrUserData) ->
    S1 = #{type => NFtype},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{lop := PFlop}, #{lop := NFlop}} -> S2#{lop => merge_msg_LocationOperation(PFlop, NFlop, TrUserData)};
             {_, #{lop := NFlop}} -> S2#{lop => NFlop};
             {#{lop := PFlop}, _} -> S2#{lop => PFlop};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {#{nop := PFnop}, #{nop := NFnop}} -> S3#{nop => merge_msg_NotificationOperation(PFnop, NFnop, TrUserData)};
        {_, #{nop := NFnop}} -> S3#{nop => NFnop};
        {#{nop := PFnop}, _} -> S3#{nop => PFnop};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_LocationOperation/3}).
merge_msg_LocationOperation(#{}, #{location := NFlocation, type := NFtype}, _) -> #{location => NFlocation, type => NFtype}.

-compile({nowarn_unused_function,merge_msg_NotificationOperation/3}).
merge_msg_NotificationOperation(#{} = PMsg, #{topic := NFtopic, type := NFtype} = NMsg, _) ->
    S1 = #{topic => NFtopic, type => NFtype},
    S2 = case {PMsg, NMsg} of
             {_, #{district := NFdistrict}} -> S1#{district => NFdistrict};
             {#{district := PFdistrict}, _} -> S1#{district => PFdistrict};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{location := NFlocation}} -> S2#{location => NFlocation};
        {#{location := PFlocation}, _} -> S2#{location => PFlocation};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_OperationReply/3}).
merge_msg_OperationReply(#{} = PMsg, #{type := NFtype} = NMsg, TrUserData) ->
    S1 = #{type => NFtype},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{logr := PFlogr}, #{logr := NFlogr}} -> S2#{logr => merge_msg_LocationOperationGetReply(PFlogr, NFlogr, TrUserData)};
             {_, #{logr := NFlogr}} -> S2#{logr => NFlogr};
             {#{logr := PFlogr}, _} -> S2#{logr => PFlogr};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{contacts := PFcontacts}, #{contacts := NFcontacts}} -> S3#{contacts => merge_msg_InfectedContacts(PFcontacts, NFcontacts, TrUserData)};
             {_, #{contacts := NFcontacts}} -> S3#{contacts => NFcontacts};
             {#{contacts := PFcontacts}, _} -> S3#{contacts => PFcontacts};
             {_, _} -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{errors := NFerrors}} -> S4#{errors => NFerrors};
        {#{errors := PFerrors}, _} -> S4#{errors => PFerrors};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_LocationOperationGetReply/3}).
merge_msg_LocationOperationGetReply(#{}, #{number := NFnumber}, _) -> #{number => NFnumber}.

-compile({nowarn_unused_function,merge_msg_InfectedContacts/3}).
merge_msg_InfectedContacts(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{usernames := PFusernames}, #{usernames := NFusernames}} -> S1#{usernames => 'erlang_++'(PFusernames, NFusernames, TrUserData)};
        {_, #{usernames := NFusernames}} -> S1#{usernames => NFusernames};
        {#{usernames := PFusernames}, _} -> S1#{usernames => PFusernames};
        {_, _} -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'User' -> v_msg_User(Msg, [MsgName], TrUserData);
        'Name_Size' -> v_msg_Name_Size(Msg, [MsgName], TrUserData);
        'EntryMessage' -> v_msg_EntryMessage(Msg, [MsgName], TrUserData);
        'AuthMessage' -> v_msg_AuthMessage(Msg, [MsgName], TrUserData);
        'SignupReply' -> v_msg_SignupReply(Msg, [MsgName], TrUserData);
        'LoginReply' -> v_msg_LoginReply(Msg, [MsgName], TrUserData);
        'Subbed' -> v_msg_Subbed(Msg, [MsgName], TrUserData);
        'LocationTopic' -> v_msg_LocationTopic(Msg, [MsgName], TrUserData);
        'TopicList' -> v_msg_TopicList(Msg, [MsgName], TrUserData);
        'Operation' -> v_msg_Operation(Msg, [MsgName], TrUserData);
        'LocationOperation' -> v_msg_LocationOperation(Msg, [MsgName], TrUserData);
        'NotificationOperation' -> v_msg_NotificationOperation(Msg, [MsgName], TrUserData);
        'OperationReply' -> v_msg_OperationReply(Msg, [MsgName], TrUserData);
        'LocationOperationGetReply' -> v_msg_LocationOperationGetReply(Msg, [MsgName], TrUserData);
        'InfectedContacts' -> v_msg_InfectedContacts(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_User/3}).
-dialyzer({nowarn_function,v_msg_User/3}).
v_msg_User(#{username := F1, password := F2} = M, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    case M of
        #{districtId := F3} -> v_type_int32(F3, [districtId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{location := F4} -> v_type_string(F4, [location | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (districtId) -> ok;
                      (location) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_User(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [username, password] -- maps:keys(M), 'User'}, M, Path);
v_msg_User(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'User'}, X, Path).

-compile({nowarn_unused_function,v_msg_Name_Size/3}).
-dialyzer({nowarn_function,v_msg_Name_Size/3}).
v_msg_Name_Size(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{size := F2} -> v_type_int32(F2, [size | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (size) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Name_Size(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Name_Size'}, M, Path);
v_msg_Name_Size(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Name_Size'}, X, Path).

-compile({nowarn_unused_function,v_msg_EntryMessage/3}).
-dialyzer({nowarn_function,v_msg_EntryMessage/3}).
v_msg_EntryMessage(#{} = M, Path, TrUserData) ->
    case M of
        #{districts := F1} -> 'v_map<int32,Name_Size>'(F1, [districts | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (districts) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_EntryMessage(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'EntryMessage'}, M, Path);
v_msg_EntryMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EntryMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuthMessage/3}).
-dialyzer({nowarn_function,v_msg_AuthMessage/3}).
v_msg_AuthMessage(#{} = M, Path, TrUserData) ->
    case M of
        #{user := F1} -> v_msg_User(F1, [user | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} -> v_enum_AuthType(F2, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (user) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AuthMessage(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AuthMessage'}, M, Path);
v_msg_AuthMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AuthMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_SignupReply/3}).
-dialyzer({nowarn_function,v_msg_SignupReply/3}).
v_msg_SignupReply(#{} = M, Path, TrUserData) ->
    case M of
        #{success := F1} -> v_type_bool(F1, [success | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{error := F2} -> v_enum_SignupErrors(F2, [error | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
                      (error) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SignupReply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SignupReply'}, M, Path);
v_msg_SignupReply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SignupReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginReply/3}).
-dialyzer({nowarn_function,v_msg_LoginReply/3}).
v_msg_LoginReply(#{} = M, Path, TrUserData) ->
    case M of
        #{success := F1} -> v_type_bool(F1, [success | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{error := F2} -> v_enum_LoginErrors(F2, [error | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sick := F3} -> v_type_bool(F3, [sick | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{district := F4} -> v_type_int32(F4, [district | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subbed := F5} -> v_msg_Subbed(F5, [subbed | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
                      (error) -> ok;
                      (sick) -> ok;
                      (district) -> ok;
                      (subbed) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_LoginReply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'LoginReply'}, M, Path);
v_msg_LoginReply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LoginReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_Subbed/3}).
-dialyzer({nowarn_function,v_msg_Subbed/3}).
v_msg_Subbed(#{} = M, Path, TrUserData) ->
    case M of
        #{subs := F1} -> 'v_map<string,LocationTopic>'(F1, [subs | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subs) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Subbed(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Subbed'}, M, Path);
v_msg_Subbed(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Subbed'}, X, Path).

-compile({nowarn_unused_function,v_msg_LocationTopic/3}).
-dialyzer({nowarn_function,v_msg_LocationTopic/3}).
v_msg_LocationTopic(#{} = M, Path, TrUserData) ->
    case M of
        #{locmap := F1} -> 'v_map<string,TopicList>'(F1, [locmap | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (locmap) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_LocationTopic(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'LocationTopic'}, M, Path);
v_msg_LocationTopic(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LocationTopic'}, X, Path).

-compile({nowarn_unused_function,v_msg_TopicList/3}).
-dialyzer({nowarn_function,v_msg_TopicList/3}).
v_msg_TopicList(#{} = M, Path, TrUserData) ->
    case M of
        #{topics := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [topics | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F1, [topics | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (topics) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_TopicList(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'TopicList'}, M, Path);
v_msg_TopicList(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TopicList'}, X, Path).

-compile({nowarn_unused_function,v_msg_Operation/3}).
-dialyzer({nowarn_function,v_msg_Operation/3}).
v_msg_Operation(#{type := F1} = M, Path, TrUserData) ->
    v_enum_OperationType(F1, [type | Path], TrUserData),
    case M of
        #{username := F2} -> v_type_string(F2, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{lop := F3} -> v_msg_LocationOperation(F3, [lop | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nop := F4} -> v_msg_NotificationOperation(F4, [nop | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (username) -> ok;
                      (lop) -> ok;
                      (nop) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Operation(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [type] -- maps:keys(M), 'Operation'}, M, Path);
v_msg_Operation(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Operation'}, X, Path).

-compile({nowarn_unused_function,v_msg_LocationOperation/3}).
-dialyzer({nowarn_function,v_msg_LocationOperation/3}).
v_msg_LocationOperation(#{location := F1, type := F2} = M, Path, TrUserData) ->
    v_type_string(F1, [location | Path], TrUserData),
    v_enum_LocationOperationType(F2, [type | Path], TrUserData),
    lists:foreach(fun (location) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_LocationOperation(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [location, type] -- maps:keys(M), 'LocationOperation'}, M, Path);
v_msg_LocationOperation(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LocationOperation'}, X, Path).

-compile({nowarn_unused_function,v_msg_NotificationOperation/3}).
-dialyzer({nowarn_function,v_msg_NotificationOperation/3}).
v_msg_NotificationOperation(#{topic := F3, type := F4} = M, Path, TrUserData) ->
    case M of
        #{district := F1} -> v_type_string(F1, [district | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{location := F2} -> v_type_string(F2, [location | Path], TrUserData);
        _ -> ok
    end,
    v_type_string(F3, [topic | Path], TrUserData),
    v_enum_NotificationOperationType(F4, [type | Path], TrUserData),
    lists:foreach(fun (district) -> ok;
                      (location) -> ok;
                      (topic) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_NotificationOperation(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [topic, type] -- maps:keys(M), 'NotificationOperation'}, M, Path);
v_msg_NotificationOperation(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NotificationOperation'}, X, Path).

-compile({nowarn_unused_function,v_msg_OperationReply/3}).
-dialyzer({nowarn_function,v_msg_OperationReply/3}).
v_msg_OperationReply(#{type := F1} = M, Path, TrUserData) ->
    v_enum_OperationReplyType(F1, [type | Path], TrUserData),
    case M of
        #{username := F2} -> v_type_string(F2, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{logr := F3} -> v_msg_LocationOperationGetReply(F3, [logr | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{contacts := F4} -> v_msg_InfectedContacts(F4, [contacts | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{errors := F5} -> v_enum_OperationErrors(F5, [errors | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (username) -> ok;
                      (logr) -> ok;
                      (contacts) -> ok;
                      (errors) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_OperationReply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [type] -- maps:keys(M), 'OperationReply'}, M, Path);
v_msg_OperationReply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'OperationReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_LocationOperationGetReply/3}).
-dialyzer({nowarn_function,v_msg_LocationOperationGetReply/3}).
v_msg_LocationOperationGetReply(#{number := F1} = M, Path, TrUserData) ->
    v_type_int32(F1, [number | Path], TrUserData),
    lists:foreach(fun (number) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_LocationOperationGetReply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [number] -- maps:keys(M), 'LocationOperationGetReply'}, M, Path);
v_msg_LocationOperationGetReply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LocationOperationGetReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_InfectedContacts/3}).
-dialyzer({nowarn_function,v_msg_InfectedContacts/3}).
v_msg_InfectedContacts(#{} = M, Path, TrUserData) ->
    case M of
        #{usernames := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [usernames | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F1, [usernames | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (usernames) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_InfectedContacts(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'InfectedContacts'}, M, Path);
v_msg_InfectedContacts(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'InfectedContacts'}, X, Path).

-compile({nowarn_unused_function,v_enum_SignupErrors/3}).
-dialyzer({nowarn_function,v_enum_SignupErrors/3}).
v_enum_SignupErrors('USER_EXISTS', _Path, _TrUserData) -> ok;
v_enum_SignupErrors(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_SignupErrors(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'SignupErrors'}, X, Path).

-compile({nowarn_unused_function,v_enum_LoginErrors/3}).
-dialyzer({nowarn_function,v_enum_LoginErrors/3}).
v_enum_LoginErrors('INVALID_USERNAME', _Path, _TrUserData) -> ok;
v_enum_LoginErrors('USER_ALREADY_LOGGED', _Path, _TrUserData) -> ok;
v_enum_LoginErrors('INVALID_PASSWORD', _Path, _TrUserData) -> ok;
v_enum_LoginErrors(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_LoginErrors(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'LoginErrors'}, X, Path).

-compile({nowarn_unused_function,v_enum_AuthType/3}).
-dialyzer({nowarn_function,v_enum_AuthType/3}).
v_enum_AuthType('LOGIN', _Path, _TrUserData) -> ok;
v_enum_AuthType('SIGNUP', _Path, _TrUserData) -> ok;
v_enum_AuthType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_AuthType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'AuthType'}, X, Path).

-compile({nowarn_unused_function,v_enum_OperationType/3}).
-dialyzer({nowarn_function,v_enum_OperationType/3}).
v_enum_OperationType('LOCATION', _Path, _TrUserData) -> ok;
v_enum_OperationType('FLIP_SICK', _Path, _TrUserData) -> ok;
v_enum_OperationType('SICK', _Path, _TrUserData) -> ok;
v_enum_OperationType('NOTIFICATION', _Path, _TrUserData) -> ok;
v_enum_OperationType('LOGOUT', _Path, _TrUserData) -> ok;
v_enum_OperationType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_OperationType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'OperationType'}, X, Path).

-compile({nowarn_unused_function,v_enum_LocationOperationType/3}).
-dialyzer({nowarn_function,v_enum_LocationOperationType/3}).
v_enum_LocationOperationType('UPDATE', _Path, _TrUserData) -> ok;
v_enum_LocationOperationType('GET', _Path, _TrUserData) -> ok;
v_enum_LocationOperationType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_LocationOperationType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'LocationOperationType'}, X, Path).

-compile({nowarn_unused_function,v_enum_NotificationOperationType/3}).
-dialyzer({nowarn_function,v_enum_NotificationOperationType/3}).
v_enum_NotificationOperationType('SUB', _Path, _TrUserData) -> ok;
v_enum_NotificationOperationType('UNSUB', _Path, _TrUserData) -> ok;
v_enum_NotificationOperationType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_NotificationOperationType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'NotificationOperationType'}, X, Path).

-compile({nowarn_unused_function,v_enum_OperationReplyType/3}).
-dialyzer({nowarn_function,v_enum_OperationReplyType/3}).
v_enum_OperationReplyType('GET_LOCATION_REPLY', _Path, _TrUserData) -> ok;
v_enum_OperationReplyType('INFECTED_CONTACTS', _Path, _TrUserData) -> ok;
v_enum_OperationReplyType('ERROR', _Path, _TrUserData) -> ok;
v_enum_OperationReplyType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_OperationReplyType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'OperationReplyType'}, X, Path).

-compile({nowarn_unused_function,v_enum_OperationErrors/3}).
-dialyzer({nowarn_function,v_enum_OperationErrors/3}).
v_enum_OperationErrors('ERROR_DECODING', _Path, _TrUserData) -> ok;
v_enum_OperationErrors('USERNAME_REQUIRED', _Path, _TrUserData) -> ok;
v_enum_OperationErrors(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_OperationErrors(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'OperationErrors'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,TopicList>'/3}).
-dialyzer({nowarn_function,'v_map<string,TopicList>'/3}).
'v_map<string,TopicList>'(M, Path, TrUserData) when is_map(M) ->
    [begin v_type_string(Key, [key | Path], TrUserData), v_msg_TopicList(Value, [value | Path], TrUserData) end || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,TopicList>'(X, Path, _TrUserData) -> mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,Name_Size>'/3}).
-dialyzer({nowarn_function,'v_map<int32,Name_Size>'/3}).
'v_map<int32,Name_Size>'(M, Path, TrUserData) when is_map(M) ->
    [begin v_type_int32(Key, [key | Path], TrUserData), v_msg_Name_Size(Value, [value | Path], TrUserData) end || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,Name_Size>'(X, Path, _TrUserData) -> mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,LocationTopic>'/3}).
-dialyzer({nowarn_function,'v_map<string,LocationTopic>'/3}).
'v_map<string,LocationTopic>'(M, Path, TrUserData) when is_map(M) ->
    [begin v_type_string(Key, [key | Path], TrUserData), v_msg_LocationTopic(Value, [value | Path], TrUserData) end || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,LocationTopic>'(X, Path, _TrUserData) -> mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_EntryMessage.districts'/2}).
'tr_decode_init_default_EntryMessage.districts'(_, _) -> mt_empty_map_m().

-compile({inline,'tr_merge_EntryMessage.districts'/3}).
'tr_merge_EntryMessage.districts'(X1, X2, _) -> mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_EntryMessage.districts'/2}).
'tr_decode_repeated_finalize_EntryMessage.districts'(L, TrUserData) -> id(L, TrUserData).

-compile({inline,'tr_encode_EntryMessage.districts'/2}).
'tr_encode_EntryMessage.districts'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_EntryMessage.districts'/3}).
'tr_decode_repeated_add_elem_EntryMessage.districts'(Elem, L, _) -> mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_Subbed.subs'/2}).
'tr_decode_init_default_Subbed.subs'(_, _) -> mt_empty_map_m().

-compile({inline,'tr_merge_Subbed.subs'/3}).
'tr_merge_Subbed.subs'(X1, X2, _) -> mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Subbed.subs'/2}).
'tr_decode_repeated_finalize_Subbed.subs'(L, TrUserData) -> id(L, TrUserData).

-compile({inline,'tr_encode_Subbed.subs'/2}).
'tr_encode_Subbed.subs'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_Subbed.subs'/3}).
'tr_decode_repeated_add_elem_Subbed.subs'(Elem, L, _) -> mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_LocationTopic.locmap[x]'/2}).
'tr_encode_LocationTopic.locmap[x]'(X, _) -> mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_LocationTopic.locmap'/2}).
'tr_decode_init_default_LocationTopic.locmap'(_, _) -> mt_empty_map_m().

-compile({inline,'tr_merge_LocationTopic.locmap'/3}).
'tr_merge_LocationTopic.locmap'(X1, X2, _) -> mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_LocationTopic.locmap'/2}).
'tr_decode_repeated_finalize_LocationTopic.locmap'(L, TrUserData) -> id(L, TrUserData).

-compile({inline,'tr_encode_LocationTopic.locmap'/2}).
'tr_encode_LocationTopic.locmap'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_LocationTopic.locmap'/3}).
'tr_decode_repeated_add_elem_LocationTopic.locmap'(Elem, L, _) -> mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_EntryMessage.districts[x]'/2}).
'tr_encode_EntryMessage.districts[x]'(X, _) -> mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_Subbed.subs[x]'/2}).
'tr_encode_Subbed.subs[x]'(X, _) -> mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) -> #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V}, M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).




get_msg_defs() ->
    [{{enum, 'SignupErrors'}, [{'USER_EXISTS', 0}]},
     {{enum, 'LoginErrors'}, [{'INVALID_USERNAME', 0}, {'USER_ALREADY_LOGGED', 1}, {'INVALID_PASSWORD', 2}]},
     {{enum, 'AuthType'}, [{'LOGIN', 0}, {'SIGNUP', 1}]},
     {{enum, 'OperationType'}, [{'LOCATION', 0}, {'FLIP_SICK', 1}, {'SICK', 2}, {'NOTIFICATION', 3}, {'LOGOUT', 4}]},
     {{enum, 'LocationOperationType'}, [{'UPDATE', 0}, {'GET', 1}]},
     {{enum, 'NotificationOperationType'}, [{'SUB', 0}, {'UNSUB', 1}]},
     {{enum, 'OperationReplyType'}, [{'GET_LOCATION_REPLY', 0}, {'INFECTED_CONTACTS', 1}, {'ERROR', 2}]},
     {{enum, 'OperationErrors'}, [{'ERROR_DECODING', 0}, {'USERNAME_REQUIRED', 1}]},
     {{msg, 'User'},
      [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []},
       #{name => districtId, fnum => 3, rnum => 4, type => int32, occurrence => optional, opts => []},
       #{name => location, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}]},
     {{msg, 'Name_Size'}, [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => size, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}]},
     {{msg, 'EntryMessage'}, [#{name => districts, fnum => 1, rnum => 2, type => {map, int32, {msg, 'Name_Size'}}, occurrence => repeated, opts => []}]},
     {{msg, 'AuthMessage'}, [#{name => user, fnum => 1, rnum => 2, type => {msg, 'User'}, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'AuthType'}, occurrence => optional, opts => []}]},
     {{msg, 'SignupReply'}, [#{name => success, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}, #{name => error, fnum => 2, rnum => 3, type => {enum, 'SignupErrors'}, occurrence => optional, opts => []}]},
     {{msg, 'LoginReply'},
      [#{name => success, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []},
       #{name => error, fnum => 2, rnum => 3, type => {enum, 'LoginErrors'}, occurrence => optional, opts => []},
       #{name => sick, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
       #{name => district, fnum => 4, rnum => 5, type => int32, occurrence => optional, opts => []},
       #{name => subbed, fnum => 5, rnum => 6, type => {msg, 'Subbed'}, occurrence => optional, opts => []}]},
     {{msg, 'Subbed'}, [#{name => subs, fnum => 1, rnum => 2, type => {map, string, {msg, 'LocationTopic'}}, occurrence => repeated, opts => []}]},
     {{msg, 'LocationTopic'}, [#{name => locmap, fnum => 1, rnum => 2, type => {map, string, {msg, 'TopicList'}}, occurrence => repeated, opts => []}]},
     {{msg, 'TopicList'}, [#{name => topics, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}]},
     {{msg, 'Operation'},
      [#{name => type, fnum => 1, rnum => 2, type => {enum, 'OperationType'}, occurrence => required, opts => []},
       #{name => username, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => lop, fnum => 3, rnum => 4, type => {msg, 'LocationOperation'}, occurrence => optional, opts => []},
       #{name => nop, fnum => 4, rnum => 5, type => {msg, 'NotificationOperation'}, occurrence => optional, opts => []}]},
     {{msg, 'LocationOperation'}, [#{name => location, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'LocationOperationType'}, occurrence => required, opts => []}]},
     {{msg, 'NotificationOperation'},
      [#{name => district, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => location, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 2, rnum => 4, type => string, occurrence => required, opts => []},
       #{name => type, fnum => 4, rnum => 5, type => {enum, 'NotificationOperationType'}, occurrence => required, opts => []}]},
     {{msg, 'OperationReply'},
      [#{name => type, fnum => 1, rnum => 2, type => {enum, 'OperationReplyType'}, occurrence => required, opts => []},
       #{name => username, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => logr, fnum => 3, rnum => 4, type => {msg, 'LocationOperationGetReply'}, occurrence => optional, opts => []},
       #{name => contacts, fnum => 4, rnum => 5, type => {msg, 'InfectedContacts'}, occurrence => optional, opts => []},
       #{name => errors, fnum => 5, rnum => 6, type => {enum, 'OperationErrors'}, occurrence => optional, opts => []}]},
     {{msg, 'LocationOperationGetReply'}, [#{name => number, fnum => 1, rnum => 2, type => int32, occurrence => required, opts => []}]},
     {{msg, 'InfectedContacts'}, [#{name => usernames, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}]}].


get_msg_names() ->
    ['User', 'Name_Size', 'EntryMessage', 'AuthMessage', 'SignupReply', 'LoginReply', 'Subbed', 'LocationTopic', 'TopicList', 'Operation', 'LocationOperation', 'NotificationOperation', 'OperationReply', 'LocationOperationGetReply', 'InfectedContacts'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['User', 'Name_Size', 'EntryMessage', 'AuthMessage', 'SignupReply', 'LoginReply', 'Subbed', 'LocationTopic', 'TopicList', 'Operation', 'LocationOperation', 'NotificationOperation', 'OperationReply', 'LocationOperationGetReply', 'InfectedContacts'].


get_enum_names() -> ['SignupErrors', 'LoginErrors', 'AuthType', 'OperationType', 'LocationOperationType', 'NotificationOperationType', 'OperationReplyType', 'OperationErrors'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('User') ->
    [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []},
     #{name => districtId, fnum => 3, rnum => 4, type => int32, occurrence => optional, opts => []},
     #{name => location, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}];
find_msg_def('Name_Size') -> [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => size, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}];
find_msg_def('EntryMessage') -> [#{name => districts, fnum => 1, rnum => 2, type => {map, int32, {msg, 'Name_Size'}}, occurrence => repeated, opts => []}];
find_msg_def('AuthMessage') -> [#{name => user, fnum => 1, rnum => 2, type => {msg, 'User'}, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'AuthType'}, occurrence => optional, opts => []}];
find_msg_def('SignupReply') -> [#{name => success, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}, #{name => error, fnum => 2, rnum => 3, type => {enum, 'SignupErrors'}, occurrence => optional, opts => []}];
find_msg_def('LoginReply') ->
    [#{name => success, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []},
     #{name => error, fnum => 2, rnum => 3, type => {enum, 'LoginErrors'}, occurrence => optional, opts => []},
     #{name => sick, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
     #{name => district, fnum => 4, rnum => 5, type => int32, occurrence => optional, opts => []},
     #{name => subbed, fnum => 5, rnum => 6, type => {msg, 'Subbed'}, occurrence => optional, opts => []}];
find_msg_def('Subbed') -> [#{name => subs, fnum => 1, rnum => 2, type => {map, string, {msg, 'LocationTopic'}}, occurrence => repeated, opts => []}];
find_msg_def('LocationTopic') -> [#{name => locmap, fnum => 1, rnum => 2, type => {map, string, {msg, 'TopicList'}}, occurrence => repeated, opts => []}];
find_msg_def('TopicList') -> [#{name => topics, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}];
find_msg_def('Operation') ->
    [#{name => type, fnum => 1, rnum => 2, type => {enum, 'OperationType'}, occurrence => required, opts => []},
     #{name => username, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => lop, fnum => 3, rnum => 4, type => {msg, 'LocationOperation'}, occurrence => optional, opts => []},
     #{name => nop, fnum => 4, rnum => 5, type => {msg, 'NotificationOperation'}, occurrence => optional, opts => []}];
find_msg_def('LocationOperation') -> [#{name => location, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'LocationOperationType'}, occurrence => required, opts => []}];
find_msg_def('NotificationOperation') ->
    [#{name => district, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => location, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 2, rnum => 4, type => string, occurrence => required, opts => []},
     #{name => type, fnum => 4, rnum => 5, type => {enum, 'NotificationOperationType'}, occurrence => required, opts => []}];
find_msg_def('OperationReply') ->
    [#{name => type, fnum => 1, rnum => 2, type => {enum, 'OperationReplyType'}, occurrence => required, opts => []},
     #{name => username, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => logr, fnum => 3, rnum => 4, type => {msg, 'LocationOperationGetReply'}, occurrence => optional, opts => []},
     #{name => contacts, fnum => 4, rnum => 5, type => {msg, 'InfectedContacts'}, occurrence => optional, opts => []},
     #{name => errors, fnum => 5, rnum => 6, type => {enum, 'OperationErrors'}, occurrence => optional, opts => []}];
find_msg_def('LocationOperationGetReply') -> [#{name => number, fnum => 1, rnum => 2, type => int32, occurrence => required, opts => []}];
find_msg_def('InfectedContacts') -> [#{name => usernames, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}];
find_msg_def(_) -> error.


find_enum_def('SignupErrors') -> [{'USER_EXISTS', 0}];
find_enum_def('LoginErrors') -> [{'INVALID_USERNAME', 0}, {'USER_ALREADY_LOGGED', 1}, {'INVALID_PASSWORD', 2}];
find_enum_def('AuthType') -> [{'LOGIN', 0}, {'SIGNUP', 1}];
find_enum_def('OperationType') -> [{'LOCATION', 0}, {'FLIP_SICK', 1}, {'SICK', 2}, {'NOTIFICATION', 3}, {'LOGOUT', 4}];
find_enum_def('LocationOperationType') -> [{'UPDATE', 0}, {'GET', 1}];
find_enum_def('NotificationOperationType') -> [{'SUB', 0}, {'UNSUB', 1}];
find_enum_def('OperationReplyType') -> [{'GET_LOCATION_REPLY', 0}, {'INFECTED_CONTACTS', 1}, {'ERROR', 2}];
find_enum_def('OperationErrors') -> [{'ERROR_DECODING', 0}, {'USERNAME_REQUIRED', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('SignupErrors', Value) -> enum_symbol_by_value_SignupErrors(Value);
enum_symbol_by_value('LoginErrors', Value) -> enum_symbol_by_value_LoginErrors(Value);
enum_symbol_by_value('AuthType', Value) -> enum_symbol_by_value_AuthType(Value);
enum_symbol_by_value('OperationType', Value) -> enum_symbol_by_value_OperationType(Value);
enum_symbol_by_value('LocationOperationType', Value) -> enum_symbol_by_value_LocationOperationType(Value);
enum_symbol_by_value('NotificationOperationType', Value) -> enum_symbol_by_value_NotificationOperationType(Value);
enum_symbol_by_value('OperationReplyType', Value) -> enum_symbol_by_value_OperationReplyType(Value);
enum_symbol_by_value('OperationErrors', Value) -> enum_symbol_by_value_OperationErrors(Value).


enum_value_by_symbol('SignupErrors', Sym) -> enum_value_by_symbol_SignupErrors(Sym);
enum_value_by_symbol('LoginErrors', Sym) -> enum_value_by_symbol_LoginErrors(Sym);
enum_value_by_symbol('AuthType', Sym) -> enum_value_by_symbol_AuthType(Sym);
enum_value_by_symbol('OperationType', Sym) -> enum_value_by_symbol_OperationType(Sym);
enum_value_by_symbol('LocationOperationType', Sym) -> enum_value_by_symbol_LocationOperationType(Sym);
enum_value_by_symbol('NotificationOperationType', Sym) -> enum_value_by_symbol_NotificationOperationType(Sym);
enum_value_by_symbol('OperationReplyType', Sym) -> enum_value_by_symbol_OperationReplyType(Sym);
enum_value_by_symbol('OperationErrors', Sym) -> enum_value_by_symbol_OperationErrors(Sym).


enum_symbol_by_value_SignupErrors(0) -> 'USER_EXISTS'.


enum_value_by_symbol_SignupErrors('USER_EXISTS') -> 0.

enum_symbol_by_value_LoginErrors(0) -> 'INVALID_USERNAME';
enum_symbol_by_value_LoginErrors(1) -> 'USER_ALREADY_LOGGED';
enum_symbol_by_value_LoginErrors(2) -> 'INVALID_PASSWORD'.


enum_value_by_symbol_LoginErrors('INVALID_USERNAME') -> 0;
enum_value_by_symbol_LoginErrors('USER_ALREADY_LOGGED') -> 1;
enum_value_by_symbol_LoginErrors('INVALID_PASSWORD') -> 2.

enum_symbol_by_value_AuthType(0) -> 'LOGIN';
enum_symbol_by_value_AuthType(1) -> 'SIGNUP'.


enum_value_by_symbol_AuthType('LOGIN') -> 0;
enum_value_by_symbol_AuthType('SIGNUP') -> 1.

enum_symbol_by_value_OperationType(0) -> 'LOCATION';
enum_symbol_by_value_OperationType(1) -> 'FLIP_SICK';
enum_symbol_by_value_OperationType(2) -> 'SICK';
enum_symbol_by_value_OperationType(3) -> 'NOTIFICATION';
enum_symbol_by_value_OperationType(4) -> 'LOGOUT'.


enum_value_by_symbol_OperationType('LOCATION') -> 0;
enum_value_by_symbol_OperationType('FLIP_SICK') -> 1;
enum_value_by_symbol_OperationType('SICK') -> 2;
enum_value_by_symbol_OperationType('NOTIFICATION') -> 3;
enum_value_by_symbol_OperationType('LOGOUT') -> 4.

enum_symbol_by_value_LocationOperationType(0) -> 'UPDATE';
enum_symbol_by_value_LocationOperationType(1) -> 'GET'.


enum_value_by_symbol_LocationOperationType('UPDATE') -> 0;
enum_value_by_symbol_LocationOperationType('GET') -> 1.

enum_symbol_by_value_NotificationOperationType(0) -> 'SUB';
enum_symbol_by_value_NotificationOperationType(1) -> 'UNSUB'.


enum_value_by_symbol_NotificationOperationType('SUB') -> 0;
enum_value_by_symbol_NotificationOperationType('UNSUB') -> 1.

enum_symbol_by_value_OperationReplyType(0) -> 'GET_LOCATION_REPLY';
enum_symbol_by_value_OperationReplyType(1) -> 'INFECTED_CONTACTS';
enum_symbol_by_value_OperationReplyType(2) -> 'ERROR'.


enum_value_by_symbol_OperationReplyType('GET_LOCATION_REPLY') -> 0;
enum_value_by_symbol_OperationReplyType('INFECTED_CONTACTS') -> 1;
enum_value_by_symbol_OperationReplyType('ERROR') -> 2.

enum_symbol_by_value_OperationErrors(0) -> 'ERROR_DECODING';
enum_symbol_by_value_OperationErrors(1) -> 'USERNAME_REQUIRED'.


enum_value_by_symbol_OperationErrors('ERROR_DECODING') -> 0;
enum_value_by_symbol_OperationErrors('USERNAME_REQUIRED') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"User">>) -> 'User';
fqbin_to_msg_name(<<"Name_Size">>) -> 'Name_Size';
fqbin_to_msg_name(<<"EntryMessage">>) -> 'EntryMessage';
fqbin_to_msg_name(<<"AuthMessage">>) -> 'AuthMessage';
fqbin_to_msg_name(<<"SignupReply">>) -> 'SignupReply';
fqbin_to_msg_name(<<"LoginReply">>) -> 'LoginReply';
fqbin_to_msg_name(<<"Subbed">>) -> 'Subbed';
fqbin_to_msg_name(<<"LocationTopic">>) -> 'LocationTopic';
fqbin_to_msg_name(<<"TopicList">>) -> 'TopicList';
fqbin_to_msg_name(<<"Operation">>) -> 'Operation';
fqbin_to_msg_name(<<"LocationOperation">>) -> 'LocationOperation';
fqbin_to_msg_name(<<"NotificationOperation">>) -> 'NotificationOperation';
fqbin_to_msg_name(<<"OperationReply">>) -> 'OperationReply';
fqbin_to_msg_name(<<"LocationOperationGetReply">>) -> 'LocationOperationGetReply';
fqbin_to_msg_name(<<"InfectedContacts">>) -> 'InfectedContacts';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('User') -> <<"User">>;
msg_name_to_fqbin('Name_Size') -> <<"Name_Size">>;
msg_name_to_fqbin('EntryMessage') -> <<"EntryMessage">>;
msg_name_to_fqbin('AuthMessage') -> <<"AuthMessage">>;
msg_name_to_fqbin('SignupReply') -> <<"SignupReply">>;
msg_name_to_fqbin('LoginReply') -> <<"LoginReply">>;
msg_name_to_fqbin('Subbed') -> <<"Subbed">>;
msg_name_to_fqbin('LocationTopic') -> <<"LocationTopic">>;
msg_name_to_fqbin('TopicList') -> <<"TopicList">>;
msg_name_to_fqbin('Operation') -> <<"Operation">>;
msg_name_to_fqbin('LocationOperation') -> <<"LocationOperation">>;
msg_name_to_fqbin('NotificationOperation') -> <<"NotificationOperation">>;
msg_name_to_fqbin('OperationReply') -> <<"OperationReply">>;
msg_name_to_fqbin('LocationOperationGetReply') -> <<"LocationOperationGetReply">>;
msg_name_to_fqbin('InfectedContacts') -> <<"InfectedContacts">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"SignupErrors">>) -> 'SignupErrors';
fqbin_to_enum_name(<<"LoginErrors">>) -> 'LoginErrors';
fqbin_to_enum_name(<<"AuthType">>) -> 'AuthType';
fqbin_to_enum_name(<<"OperationType">>) -> 'OperationType';
fqbin_to_enum_name(<<"LocationOperationType">>) -> 'LocationOperationType';
fqbin_to_enum_name(<<"NotificationOperationType">>) -> 'NotificationOperationType';
fqbin_to_enum_name(<<"OperationReplyType">>) -> 'OperationReplyType';
fqbin_to_enum_name(<<"OperationErrors">>) -> 'OperationErrors';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('SignupErrors') -> <<"SignupErrors">>;
enum_name_to_fqbin('LoginErrors') -> <<"LoginErrors">>;
enum_name_to_fqbin('AuthType') -> <<"AuthType">>;
enum_name_to_fqbin('OperationType') -> <<"OperationType">>;
enum_name_to_fqbin('LocationOperationType') -> <<"LocationOperationType">>;
enum_name_to_fqbin('NotificationOperationType') -> <<"NotificationOperationType">>;
enum_name_to_fqbin('OperationReplyType') -> <<"OperationReplyType">>;
enum_name_to_fqbin('OperationErrors') -> <<"OperationErrors">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protocol.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protocol.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protocol"].


get_msg_containment("protocol") ->
    ['AuthMessage', 'EntryMessage', 'InfectedContacts', 'LocationOperation', 'LocationOperationGetReply', 'LocationTopic', 'LoginReply', 'Name_Size', 'NotificationOperation', 'Operation', 'OperationReply', 'SignupReply', 'Subbed', 'TopicList', 'User'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("protocol") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("protocol") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("protocol") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("protocol") -> ['AuthType', 'LocationOperationType', 'LoginErrors', 'NotificationOperationType', 'OperationErrors', 'OperationReplyType', 'OperationType', 'SignupErrors'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"User">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"LocationTopic">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"InfectedContacts">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"TopicList">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Subbed">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Name_Size">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"EntryMessage">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"AuthMessage">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"SignupReply">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"OperationReply">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"LoginReply">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"LocationOperationGetReply">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"Operation">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"NotificationOperation">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(<<"LocationOperation">>) -> "protocol";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"SignupErrors">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"OperationErrors">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"LoginErrors">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"OperationType">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"OperationReplyType">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"NotificationOperationType">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"LocationOperationType">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(<<"AuthType">>) -> "protocol";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.16.0".

gpb_version_as_list() ->
    [4,16,0].
